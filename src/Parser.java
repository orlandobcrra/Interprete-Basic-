
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Oct 12 12:34:12 VET 2011
//----------------------------------------------------

import java_cup.runtime.*;
import ast.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Oct 12 12:34:12 VET 2011
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\053\000\002\002\003\000\002\002\004\000\002\002" +
    "\004\000\002\003\005\000\002\003\003\000\002\004\003" +
    "\000\002\004\004\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\004\000\002" +
    "\004\003\000\002\004\003\000\002\005\005\000\002\005" +
    "\003\000\002\006\005\000\002\006\005\000\002\006\005" +
    "\000\002\007\005\000\002\010\003\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\011\004\000\002\011" +
    "\005\000\002\012\005\000\002\012\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\014\015\000" +
    "\002\014\017\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\005\000\002\015" +
    "\005\000\002\016\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\131\000\024\003\020\005\012\006\022\007\005\010" +
    "\023\027\021\032\013\033\010\047\015\001\002\000\006" +
    "\002\ufff8\005\ufff8\001\002\000\004\010\124\001\002\000" +
    "\004\002\122\001\002\000\006\002\ufffc\005\ufffc\001\002" +
    "\000\004\010\101\001\002\000\006\002\001\005\100\001" +
    "\002\000\006\002\ufff5\005\ufff5\001\002\000\004\010\077" +
    "\001\002\000\006\002\ufffa\005\ufffa\001\002\000\006\017" +
    "\025\025\026\001\002\000\006\002\ufff9\005\ufff9\001\002" +
    "\000\006\002\ufffd\005\ufffd\001\002\000\006\002\ufff4\005" +
    "\ufff4\001\002\000\012\010\045\017\025\025\026\030\050" +
    "\001\002\000\006\002\ufff7\005\ufff7\001\002\000\004\016" +
    "\024\001\002\000\006\017\025\025\026\001\002\000\046" +
    "\002\uffed\005\uffed\016\uffed\020\uffed\021\uffed\022\uffed\023" +
    "\uffed\024\uffed\026\uffed\031\uffed\034\uffed\035\uffed\037\uffed" +
    "\040\uffed\041\uffed\042\uffed\043\uffed\050\uffed\001\002\000" +
    "\006\017\025\025\026\001\002\000\020\002\uffee\005\uffee" +
    "\020\032\021\034\022\030\023\033\024\031\001\002\000" +
    "\006\017\025\025\026\001\002\000\006\017\025\025\026" +
    "\001\002\000\006\017\025\025\026\001\002\000\006\017" +
    "\025\025\026\001\002\000\006\017\025\025\026\001\002" +
    "\000\046\002\uffeb\005\uffeb\016\uffeb\020\uffeb\021\uffeb\022" +
    "\030\023\033\024\031\026\uffeb\031\uffeb\034\uffeb\035\uffeb" +
    "\037\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb\050\uffeb\001" +
    "\002\000\046\002\uffe9\005\uffe9\016\uffe9\020\uffe9\021\uffe9" +
    "\022\uffe9\023\uffe9\024\031\026\uffe9\031\uffe9\034\uffe9\035" +
    "\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9\043\uffe9\050\uffe9" +
    "\001\002\000\046\002\uffec\005\uffec\016\uffec\020\uffec\021" +
    "\uffec\022\030\023\033\024\031\026\uffec\031\uffec\034\uffec" +
    "\035\uffec\037\uffec\040\uffec\041\uffec\042\uffec\043\uffec\050" +
    "\uffec\001\002\000\046\002\uffe8\005\uffe8\016\uffe8\020\uffe8" +
    "\021\uffe8\022\uffe8\023\uffe8\024\031\026\uffe8\031\uffe8\034" +
    "\uffe8\035\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8" +
    "\050\uffe8\001\002\000\046\002\uffea\005\uffea\016\uffea\020" +
    "\uffea\021\uffea\022\uffea\023\uffea\024\031\026\uffea\031\uffea" +
    "\034\uffea\035\uffea\037\uffea\040\uffea\041\uffea\042\uffea\043" +
    "\uffea\050\uffea\001\002\000\016\020\032\021\034\022\030" +
    "\023\033\024\031\026\043\001\002\000\046\002\uffe7\005" +
    "\uffe7\016\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7" +
    "\026\uffe7\031\uffe7\034\uffe7\035\uffe7\037\uffe7\040\uffe7\041" +
    "\uffe7\042\uffe7\043\uffe7\050\uffe7\001\002\000\010\002\uffe6" +
    "\005\uffe6\031\051\001\002\000\010\002\uffe0\005\uffe0\031" +
    "\uffe0\001\002\000\010\002\uffe3\005\uffe3\031\uffe3\001\002" +
    "\000\022\002\uffe1\005\uffe1\020\032\021\034\022\030\023" +
    "\033\024\031\031\uffe1\001\002\000\010\002\uffe2\005\uffe2" +
    "\031\uffe2\001\002\000\016\002\uffe5\005\uffe5\010\045\017" +
    "\025\025\026\030\050\001\002\000\010\002\uffe4\005\uffe4" +
    "\031\uffe4\001\002\000\004\050\071\001\002\000\030\016" +
    "\061\020\032\021\034\022\030\023\033\024\031\037\055" +
    "\040\056\041\057\042\060\043\062\001\002\000\006\017" +
    "\025\025\026\001\002\000\006\017\025\025\026\001\002" +
    "\000\006\017\025\025\026\001\002\000\006\017\025\025" +
    "\026\001\002\000\006\017\025\025\026\001\002\000\006" +
    "\017\025\025\026\001\002\000\016\020\032\021\034\022" +
    "\030\023\033\024\031\050\uffd8\001\002\000\016\020\032" +
    "\021\034\022\030\023\033\024\031\050\uffdd\001\002\000" +
    "\016\020\032\021\034\022\030\023\033\024\031\050\uffda" +
    "\001\002\000\016\020\032\021\034\022\030\023\033\024" +
    "\031\050\uffd9\001\002\000\016\020\032\021\034\022\030" +
    "\023\033\024\031\050\uffdc\001\002\000\016\020\032\021" +
    "\034\022\030\023\033\024\031\050\uffdb\001\002\000\004" +
    "\005\072\001\002\000\024\003\020\005\012\006\022\007" +
    "\005\010\023\027\021\032\013\033\010\047\015\001\002" +
    "\000\004\005\074\001\002\000\026\003\020\005\012\006" +
    "\022\007\005\010\023\027\021\032\013\033\010\047\015" +
    "\052\076\001\002\000\006\002\ufffe\005\ufffe\001\002\000" +
    "\006\002\uffd7\005\uffd7\001\002\000\006\002\ufff6\005\ufff6" +
    "\001\002\000\026\002\uffff\003\020\005\012\006\022\007" +
    "\005\010\023\027\021\032\013\033\010\047\015\001\002" +
    "\000\004\016\102\001\002\000\006\017\025\025\026\001" +
    "\002\000\016\020\032\021\034\022\030\023\033\024\031" +
    "\034\104\001\002\000\006\017\025\025\026\001\002\000" +
    "\020\005\107\020\032\021\034\022\030\023\033\024\031" +
    "\035\106\001\002\000\006\017\025\025\026\001\002\000" +
    "\024\003\020\005\012\006\022\007\005\010\023\027\021" +
    "\032\013\033\010\047\015\001\002\000\004\005\111\001" +
    "\002\000\026\003\020\005\012\006\022\007\005\010\023" +
    "\027\021\032\013\033\010\036\112\047\015\001\002\000" +
    "\004\010\113\001\002\000\006\002\uffdf\005\uffdf\001\002" +
    "\000\016\005\115\020\032\021\034\022\030\023\033\024" +
    "\031\001\002\000\024\003\020\005\012\006\022\007\005" +
    "\010\023\027\021\032\013\033\010\047\015\001\002\000" +
    "\004\005\117\001\002\000\026\003\020\005\012\006\022" +
    "\007\005\010\023\027\021\032\013\033\010\036\120\047" +
    "\015\001\002\000\004\010\121\001\002\000\006\002\uffde" +
    "\005\uffde\001\002\000\004\002\000\001\002\000\010\002" +
    "\ufffb\005\ufffb\015\132\001\002\000\004\011\126\001\002" +
    "\000\010\002\ufff2\005\ufff2\015\ufff2\001\002\000\010\012" +
    "\127\013\131\014\130\001\002\000\010\002\ufff1\005\ufff1" +
    "\015\ufff1\001\002\000\010\002\uffef\005\uffef\015\uffef\001" +
    "\002\000\010\002\ufff0\005\ufff0\015\ufff0\001\002\000\004" +
    "\010\124\001\002\000\010\002\ufff3\005\ufff3\015\ufff3\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\131\000\020\002\005\003\010\004\016\007\013\011" +
    "\006\014\015\016\003\001\001\000\002\001\001\000\006" +
    "\005\122\006\124\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\053\015" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\010\046\012\043\013\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\026\001\001" +
    "\000\002\001\001\000\004\010\041\001\001\000\002\001" +
    "\001\000\004\010\040\001\001\000\004\010\037\001\001" +
    "\000\004\010\036\001\001\000\004\010\035\001\001\000" +
    "\004\010\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\046\013\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\067\001" +
    "\001\000\004\010\066\001\001\000\004\010\065\001\001" +
    "\000\004\010\064\001\001\000\004\010\063\001\001\000" +
    "\004\010\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\003\072\004\016" +
    "\007\013\011\006\014\015\016\003\001\001\000\002\001" +
    "\001\000\014\004\074\007\013\011\006\014\015\016\003" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\004\074\007\013\011\006\014\015\016\003" +
    "\001\001\000\002\001\001\000\004\010\102\001\001\000" +
    "\002\001\001\000\004\010\104\001\001\000\002\001\001" +
    "\000\004\010\113\001\001\000\016\003\107\004\016\007" +
    "\013\011\006\014\015\016\003\001\001\000\002\001\001" +
    "\000\014\004\074\007\013\011\006\014\015\016\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\003\115\004\016\007\013\011\006\014\015\016" +
    "\003\001\001\000\002\001\001\000\014\004\074\007\013" +
    "\011\006\014\015\016\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\132" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


	private NodoBase root=null;
	private boolean debug=true;	
	private int lineaNum=0;

	public NodoBase getRoot(){
		return root;
	}

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // if ::= IF condicion THEN LINEANUEVA seq_sent LINEANUEVA ENDIF 
            {
              NodoBase RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		NodoOperacionBool bool = (NodoOperacionBool)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int thenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int thenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase then = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
		if(debug)
			System.out.println("\t Regla: if ::= IF SOLO");
		RESULT = new NodoIf(bool, then);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // condicion ::= expresion DIFERENTE expresion 
            {
              NodoOperacionBool RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoNumero e1 = (NodoNumero)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoNumero e2 = (NodoNumero)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: condicion ::= DIFERENTE");
		RESULT = new NodoOperacionBool(e1,e2,Tipo.OpBool.DIFERENTE);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // condicion ::= expresion MAYORIGUAL expresion 
            {
              NodoOperacionBool RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoNumero e1 = (NodoNumero)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoNumero e2 = (NodoNumero)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: condicion ::= MAYORIGUAL");
		RESULT = new NodoOperacionBool(e1,e2,Tipo.OpBool.MAYORIGUAL);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // condicion ::= expresion MAYOR expresion 
            {
              NodoOperacionBool RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoNumero e1 = (NodoNumero)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoNumero e2 = (NodoNumero)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: condicion ::= MAYOR");
		RESULT = new NodoOperacionBool(e1,e2,Tipo.OpBool.MAYOR);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // condicion ::= expresion MENORIGUAL expresion 
            {
              NodoOperacionBool RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoNumero e1 = (NodoNumero)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoNumero e2 = (NodoNumero)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: condicion ::= MENORIGUAL");
		RESULT = new NodoOperacionBool(e1,e2,Tipo.OpBool.MENORIGUAL);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // condicion ::= expresion MENOR expresion 
            {
              NodoOperacionBool RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoNumero e1 = (NodoNumero)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoNumero e2 = (NodoNumero)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: condicion ::= MENOR");
		RESULT = new NodoOperacionBool(e1,e2,Tipo.OpBool.MENOR);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // condicion ::= expresion IGUAL expresion 
            {
              NodoOperacionBool RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoNumero e1 = (NodoNumero)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoNumero e2 = (NodoNumero)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: condicion ::= IGUAL");
		RESULT = new NodoOperacionBool(e1,e2,Tipo.OpBool.IGUAL);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // for ::= FOR IDENTIFICADOR IGUAL expresion TO expresion STEP expresion LINEANUEVA seq_sent LINEANUEVA NEXT IDENTIFICADOR 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int desdeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int desderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		NodoNumero desde = (NodoNumero)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int hastaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int hastaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		NodoNumero hasta = (NodoNumero)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int stepleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int stepright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		NodoNumero step = (NodoNumero)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodoBase cuerpo = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int variable2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int variable2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String variable2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: for ::= Todo el FOR");
		RESULT = new NodoFor(variable, desde.getValor().intValue(), hasta.getValor().intValue(), cuerpo, variable2, step.getValor().intValue());
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // for ::= FOR IDENTIFICADOR IGUAL expresion TO expresion LINEANUEVA seq_sent LINEANUEVA NEXT IDENTIFICADOR 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int desdeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int desderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		NodoNumero desde = (NodoNumero)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int hastaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int hastaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		NodoNumero hasta = (NodoNumero)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodoBase cuerpo = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int variable2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int variable2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String variable2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: for ::= Todo el FOR");
		RESULT = new NodoFor(variable, desde.getValor().intValue(), hasta.getValor().intValue(), cuerpo, variable2);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // printValor ::= IDENTIFICADOR 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: printValor ::= IDENTIFICADOR");
		RESULT = new NodoIdentificador(variable);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("printValor",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // printValor ::= expresion 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoNumero ex = (NodoNumero)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: printValor ::= expresion");
		RESULT = ex;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("printValor",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // printValor ::= CADENA 
            {
              NodoBase RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object cadena = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: printValor ::= CADENA");
		if(cadena!=null){
			RESULT = new NodoCadena(cadena.toString());		
		}else{
			RESULT = null;
			System.err.println("Error: printValor ::= SIN CADENA");
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("printValor",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // printAnidado ::= printValor 
            {
              NodoBase RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase valor = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		if(debug)
			System.out.println("\t Regla: printAnidado ::= printValor");
		RESULT = valor;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("printAnidado",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // printAnidado ::= printAnidado PTCO printValor 
            {
              NodoBase RESULT =null;
		int valoresleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valoresright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase valores = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase valor = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: printAnidado ::= printAnidado PTCO printValor");
		NodoBase hijoActual = valores;
		if(hijoActual !=null){
			while(hijoActual.TieneHermano()){
				hijoActual = hijoActual.getHermanoDerecha();
			}
			hijoActual.setHermanoDerecha(valor);
			RESULT = valores;
		}else{
			RESULT = valor;
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("printAnidado",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // print ::= PRINT printAnidado PTCO 
            {
              NodoBase RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoBase sentencia = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
		if(debug)
			System.out.println("\t Regla: printAnidado ::= printAnidado PTCO");
		NodoEscribir nodoEscribir= new NodoEscribir(sentencia,false);
		RESULT = nodoEscribir;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // print ::= PRINT printAnidado 
            {
              NodoBase RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase sentencia = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: print ::= PRINT printAnidado");
		RESULT = new NodoEscribir(sentencia);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expresion ::= LPARENT expresion RPARENT 
            {
              NodoNumero RESULT =null;
		int EXWleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int EXWright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoNumero EXW = (NodoNumero)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		if(debug)
			System.out.println("\t Regla: expresion ::= PARENTESIS ");
		//RESULT = new Integer(EXW.intValue());
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expresion ::= expresion POTE expresion 
            {
              NodoNumero RESULT =null;
		int ED1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ED1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoNumero ED1 = (NodoNumero)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ED2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ED2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoNumero ED2 = (NodoNumero)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: expresion ::= POTE ");
		//RESULT = new Integer( (int) Math.pow(ED1.intValue(),ED2.intValue())); 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expresion ::= expresion DIVI expresion 
            {
              NodoNumero RESULT =null;
		int EC1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int EC1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoNumero EC1 = (NodoNumero)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int EC2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int EC2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoNumero EC2 = (NodoNumero)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: expresion ::= DIVI ");
		//RESULT = new Integer(EC1.intValue() / EC2.intValue());
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expresion ::= expresion MULT expresion 
            {
              NodoNumero RESULT =null;
		int EA1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int EA1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoNumero EA1 = (NodoNumero)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int EA2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int EA2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoNumero EA2 = (NodoNumero)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: expresion ::= MULT ");
		//RESULT = new Integer(EA1.intValue() * EA2.intValue());
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expresion ::= expresion REST expresion 
            {
              NodoNumero RESULT =null;
		int EE1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int EE1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoNumero EE1 = (NodoNumero)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int EE2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int EE2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoNumero EE2 = (NodoNumero)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: expresion ::= REST ");
		//RESULT = new Integer(EE1.intValue() - EE2.intValue())
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expresion ::= expresion SUMA expresion 
            {
              NodoNumero RESULT =null;
		int E1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoNumero E1 = (NodoNumero)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoNumero E2 = (NodoNumero)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: expresion ::= SUMA ");
		//RESULT = new Integer(E1.intValue() + E2.intValue());
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expresion ::= NUMERO 
            {
              NodoNumero RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: expresion ::= NUMERO ");
		RESULT = new NodoNumero(num);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // asignacion ::= IDENTIFICADOR IGUAL expresion 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoNumero ex = (NodoNumero)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: asignacion ::= IDENTIFICADOR IGUAL expresion");
		RESULT = new NodoAsignacion(variable, ex);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaracion ::= IDENTIFICADOR AS STRING 
            {
              NodoBase RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
		if(debug)
			System.out.println("\t Regla: declaracion ::= IDENTIFICADOR AS STRING");
		if(nombre!=null){
			RESULT = new NodoDeclaracion(nombre.toString(),Tipo.Variable.STRING);		
		}else{
			RESULT = null;
			System.err.println("ERROR: declaracion ::= DIM (SIN NOMBRE DE VARIABLE)");
		}                                
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaracion ::= IDENTIFICADOR AS FLOAT 
            {
              NodoBase RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
		if(debug)
			System.out.println("\t Regla: declaracion ::= IDENTIFICADOR AS FLOAT");
		if(nombre!=null){
			RESULT = new NodoDeclaracion(nombre.toString(),Tipo.Variable.FLOAT);		
		}else{
			RESULT = null;
			System.err.println("ERROR: declaracion ::= DIM (SIN NOMBRE DE VARIABLE)");
		}                                
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaracion ::= IDENTIFICADOR AS INTEGER 
            {
              NodoBase RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
		if(debug)
			System.out.println("\t Regla: declaracion ::= IDENTIFICADOR AS INTEGER");
		if(nombre!=null){
			RESULT = new NodoDeclaracion(nombre.toString(),Tipo.Variable.INTEGER);		
		}else{
			RESULT = null;
			System.err.println("ERROR: declaracion ::= DIM (SIN NOMBRE DE VARIABLE)");
		}                                
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaraciones ::= declaracion 
            {
              NodoBase RESULT =null;
		int declaracionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declaracionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase declaracion = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = declaracion;                               
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaraciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaraciones ::= declaraciones COMA declaracion 
            {
              NodoBase RESULT =null;
		
		if(debug)
			System.out.println("\t Regla: declaraciones ::= declaraciones COMA declaracion");
		RESULT=null;
		//TODO lo del hermano
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaraciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sent ::= error 
            {
              NodoBase RESULT =null;
		
		if(debug)
			System.out.println("\t Regla stmt ::= error"); 
		System.err.println("Error: sent ::= NO ENCONTRADA");
		RESULT = null;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sent ::= LINEANUEVA 
            {
              NodoBase RESULT =null;
		
		if(debug)
			System.out.println("\t Regla: sent ::= LINEANUEVA");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sent ::= INPUT IDENTIFICADOR 
            {
              NodoBase RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: sent ::= INPUT IDENTIFICADOR");
		RESULT = new NodoLeer(nombre);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sent ::= END 
            {
              NodoBase RESULT =null;
		
		if(debug)
			System.out.println("\t Regla: sent ::= END");
		RESULT = null;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sent ::= if 
            {
              NodoBase RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase sentencia = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: sent ::= if");
		RESULT=sentencia;                              
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sent ::= for 
            {
              NodoBase RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase sentencia = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: sent ::= for");
		RESULT=sentencia;                              
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sent ::= asignacion 
            {
              NodoBase RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase sentencia = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: sent ::= asignacion");
		RESULT=sentencia;                              
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sent ::= DIM declaraciones 
            {
              NodoBase RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase sentencia = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: sent ::= declaracion");
		RESULT = sentencia;                              
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sent ::= print 
            {
              NodoBase RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase sentencia = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: sent ::= print");
		RESULT = sentencia;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // seq_sent ::= sent 
            {
              NodoBase RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase sentencia = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: seq_sent ::= Una Sentencia");
		RESULT = sentencia;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_sent",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // seq_sent ::= seq_sent LINEANUEVA sent 
            {
              NodoBase RESULT =null;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase sentencias = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase sentencia = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: seq_sent ::= Varias Sentencias");
		NodoBase hijoActual = sentencias;
		if(hijoActual !=null){
			while(hijoActual.TieneHermano()){
				hijoActual = hijoActual.getHermanoDerecha();
			}
			hijoActual.setHermanoDerecha(sentencia);
			RESULT = sentencias;
		}else{
			RESULT = sentencia;
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_sent",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= seq_sent LINEANUEVA 
            {
              NodoBase RESULT =null;
		int progleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int progright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoBase prog = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		if(debug)
			System.out.println("\t Regla: programa ::= seq_sent LINEANUEVA");
		root = prog;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoBase start_val = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa ::= seq_sent 
            {
              NodoBase RESULT =null;
		int progleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int progright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase prog = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: programa ::= seq_sent");
		root = prog;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

