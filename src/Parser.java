
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Oct 12 13:03:37 VET 2011
//----------------------------------------------------
import java_cup.runtime.*;
import ast.*;

/** CUP v0.11a beta 20060608 generated parser.
 * @version Wed Oct 12 13:03:37 VET 2011
 */
public class Parser extends java_cup.runtime.lr_parser {

    /** Default constructor. */
    public Parser() {
        super();
    }

    /** Constructor which sets the default scanner. */
    public Parser(java_cup.runtime.Scanner s) {
        super(s);
    }

    /** Constructor which sets the default scanner. */
    public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
        super(s, sf);
    }
    /** Production table. */
    protected static final short _production_table[][] =
            unpackFromStrings(new String[]{
                "\000\055\000\002\002\003\000\002\002\004\000\002\002"
                + "\004\000\002\003\005\000\002\003\003\000\002\004\003"
                + "\000\002\004\004\000\002\004\003\000\002\004\003\000"
                + "\002\004\003\000\002\004\003\000\002\004\004\000\002"
                + "\004\003\000\002\004\003\000\002\005\005\000\002\005"
                + "\003\000\002\006\005\000\002\006\005\000\002\006\005"
                + "\000\002\007\005\000\002\010\003\000\002\010\003\000"
                + "\002\011\003\000\002\011\005\000\002\011\005\000\002"
                + "\011\005\000\002\011\005\000\002\011\005\000\002\011"
                + "\005\000\002\012\004\000\002\012\005\000\002\013\005"
                + "\000\002\013\003\000\002\014\003\000\002\014\003\000"
                + "\002\014\003\000\002\015\015\000\002\015\017\000\002"
                + "\016\005\000\002\016\005\000\002\016\005\000\002\016"
                + "\005\000\002\016\005\000\002\016\005\000\002\017\011"
                + ""});

    /** Access to production table. */
    public short[][] production_table() {
        return _production_table;
    }
    /** Parse-action table. */
    protected static final short[][] _action_table =
            unpackFromStrings(new String[]{
                "\000\133\000\024\003\020\005\012\006\022\007\005\010"
                + "\023\027\021\032\013\033\010\047\015\001\002\000\006"
                + "\002\ufff8\005\ufff8\001\002\000\004\010\126\001\002\000"
                + "\004\002\124\001\002\000\006\002\ufffc\005\ufffc\001\002"
                + "\000\004\010\103\001\002\000\006\002\001\005\102\001"
                + "\002\000\006\002\ufff5\005\ufff5\001\002\000\004\010\101"
                + "\001\002\000\006\002\ufffa\005\ufffa\001\002\000\006\017"
                + "\025\025\030\001\002\000\006\002\ufff9\005\ufff9\001\002"
                + "\000\006\002\ufffd\005\ufffd\001\002\000\006\002\ufff4\005"
                + "\ufff4\001\002\000\012\010\047\017\025\025\030\030\051"
                + "\001\002\000\006\002\ufff7\005\ufff7\001\002\000\004\016"
                + "\024\001\002\000\010\010\026\017\025\025\030\001\002"
                + "\000\046\002\uffeb\005\uffeb\016\uffeb\020\uffeb\021\uffeb\022"
                + "\uffeb\023\uffeb\024\uffeb\026\uffeb\031\uffeb\034\uffeb\035\uffeb"
                + "\037\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb\050\uffeb\001"
                + "\002\000\006\002\uffec\005\uffec\001\002\000\006\002\uffee"
                + "\005\uffee\001\002\000\006\017\025\025\030\001\002\000"
                + "\020\002\uffed\005\uffed\020\034\021\036\022\032\023\035"
                + "\024\033\001\002\000\006\017\025\025\030\001\002\000"
                + "\006\017\025\025\030\001\002\000\006\017\025\025\030"
                + "\001\002\000\006\017\025\025\030\001\002\000\006\017"
                + "\025\025\030\001\002\000\046\002\uffe9\005\uffe9\016\uffe9"
                + "\020\uffe9\021\uffe9\022\032\023\035\024\033\026\uffe9\031"
                + "\uffe9\034\uffe9\035\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9"
                + "\043\uffe9\050\uffe9\001\002\000\046\002\uffe7\005\uffe7\016"
                + "\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\033\026\uffe7"
                + "\031\uffe7\034\uffe7\035\uffe7\037\uffe7\040\uffe7\041\uffe7\042"
                + "\uffe7\043\uffe7\050\uffe7\001\002\000\046\002\uffea\005\uffea"
                + "\016\uffea\020\uffea\021\uffea\022\032\023\035\024\033\026"
                + "\uffea\031\uffea\034\uffea\035\uffea\037\uffea\040\uffea\041\uffea"
                + "\042\uffea\043\uffea\050\uffea\001\002\000\046\002\uffe6\005"
                + "\uffe6\016\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\033"
                + "\026\uffe6\031\uffe6\034\uffe6\035\uffe6\037\uffe6\040\uffe6\041"
                + "\uffe6\042\uffe6\043\uffe6\050\uffe6\001\002\000\046\002\uffe8"
                + "\005\uffe8\016\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024"
                + "\033\026\uffe8\031\uffe8\034\uffe8\035\uffe8\037\uffe8\040\uffe8"
                + "\041\uffe8\042\uffe8\043\uffe8\050\uffe8\001\002\000\016\020"
                + "\034\021\036\022\032\023\035\024\033\026\045\001\002"
                + "\000\046\002\uffe5\005\uffe5\016\uffe5\020\uffe5\021\uffe5\022"
                + "\uffe5\023\uffe5\024\uffe5\026\uffe5\031\uffe5\034\uffe5\035\uffe5"
                + "\037\uffe5\040\uffe5\041\uffe5\042\uffe5\043\uffe5\050\uffe5\001"
                + "\002\000\010\002\uffe4\005\uffe4\031\053\001\002\000\010"
                + "\002\uffde\005\uffde\031\uffde\001\002\000\010\002\uffe1\005"
                + "\uffe1\031\uffe1\001\002\000\010\002\uffe0\005\uffe0\031\uffe0"
                + "\001\002\000\022\002\uffdf\005\uffdf\020\034\021\036\022"
                + "\032\023\035\024\033\031\uffdf\001\002\000\016\002\uffe3"
                + "\005\uffe3\010\047\017\025\025\030\030\051\001\002\000"
                + "\010\002\uffe2\005\uffe2\031\uffe2\001\002\000\004\050\073"
                + "\001\002\000\030\016\063\020\034\021\036\022\032\023"
                + "\035\024\033\037\057\040\060\041\061\042\062\043\064"
                + "\001\002\000\006\017\025\025\030\001\002\000\006\017"
                + "\025\025\030\001\002\000\006\017\025\025\030\001\002"
                + "\000\006\017\025\025\030\001\002\000\006\017\025\025"
                + "\030\001\002\000\006\017\025\025\030\001\002\000\016"
                + "\020\034\021\036\022\032\023\035\024\033\050\uffd6\001"
                + "\002\000\016\020\034\021\036\022\032\023\035\024\033"
                + "\050\uffdb\001\002\000\016\020\034\021\036\022\032\023"
                + "\035\024\033\050\uffd8\001\002\000\016\020\034\021\036"
                + "\022\032\023\035\024\033\050\uffd7\001\002\000\016\020"
                + "\034\021\036\022\032\023\035\024\033\050\uffda\001\002"
                + "\000\016\020\034\021\036\022\032\023\035\024\033\050"
                + "\uffd9\001\002\000\004\005\074\001\002\000\024\003\020"
                + "\005\012\006\022\007\005\010\023\027\021\032\013\033"
                + "\010\047\015\001\002\000\004\005\076\001\002\000\026"
                + "\003\020\005\012\006\022\007\005\010\023\027\021\032"
                + "\013\033\010\047\015\052\100\001\002\000\006\002\ufffe"
                + "\005\ufffe\001\002\000\006\002\uffd5\005\uffd5\001\002\000"
                + "\006\002\ufff6\005\ufff6\001\002\000\026\002\uffff\003\020"
                + "\005\012\006\022\007\005\010\023\027\021\032\013\033"
                + "\010\047\015\001\002\000\004\016\104\001\002\000\006"
                + "\017\025\025\030\001\002\000\016\020\034\021\036\022"
                + "\032\023\035\024\033\034\106\001\002\000\006\017\025"
                + "\025\030\001\002\000\020\005\111\020\034\021\036\022"
                + "\032\023\035\024\033\035\110\001\002\000\006\017\025"
                + "\025\030\001\002\000\024\003\020\005\012\006\022\007"
                + "\005\010\023\027\021\032\013\033\010\047\015\001\002"
                + "\000\004\005\113\001\002\000\026\003\020\005\012\006"
                + "\022\007\005\010\023\027\021\032\013\033\010\036\114"
                + "\047\015\001\002\000\004\010\115\001\002\000\006\002"
                + "\uffdd\005\uffdd\001\002\000\016\005\117\020\034\021\036"
                + "\022\032\023\035\024\033\001\002\000\024\003\020\005"
                + "\012\006\022\007\005\010\023\027\021\032\013\033\010"
                + "\047\015\001\002\000\004\005\121\001\002\000\026\003"
                + "\020\005\012\006\022\007\005\010\023\027\021\032\013"
                + "\033\010\036\122\047\015\001\002\000\004\010\123\001"
                + "\002\000\006\002\uffdc\005\uffdc\001\002\000\004\002\000"
                + "\001\002\000\010\002\ufffb\005\ufffb\015\134\001\002\000"
                + "\004\011\130\001\002\000\010\002\ufff2\005\ufff2\015\ufff2"
                + "\001\002\000\010\012\131\013\133\014\132\001\002\000"
                + "\010\002\ufff1\005\ufff1\015\ufff1\001\002\000\010\002\uffef"
                + "\005\uffef\015\uffef\001\002\000\010\002\ufff0\005\ufff0\015"
                + "\ufff0\001\002\000\004\010\126\001\002\000\010\002\ufff3"
                + "\005\ufff3\015\ufff3\001\002"});

    /** Access to parse-action table. */
    public short[][] action_table() {
        return _action_table;
    }
    /** <code>reduce_goto</code> table. */
    protected static final short[][] _reduce_table =
            unpackFromStrings(new String[]{
                "\000\133\000\020\002\005\003\010\004\016\007\013\012"
                + "\006\015\015\017\003\001\001\000\002\001\001\000\006"
                + "\005\124\006\126\001\001\000\002\001\001\000\002\001"
                + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
                + "\000\002\001\001\000\002\001\001\000\006\011\055\016"
                + "\054\001\001\000\002\001\001\000\002\001\001\000\002"
                + "\001\001\000\010\011\051\013\045\014\047\001\001\000"
                + "\002\001\001\000\002\001\001\000\006\010\026\011\030"
                + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
                + "\001\000\004\011\043\001\001\000\002\001\001\000\004"
                + "\011\042\001\001\000\004\011\041\001\001\000\004\011"
                + "\040\001\001\000\004\011\037\001\001\000\004\011\036"
                + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
                + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
                + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
                + "\002\001\001\000\002\001\001\000\002\001\001\000\006"
                + "\011\051\014\053\001\001\000\002\001\001\000\002\001"
                + "\001\000\002\001\001\000\004\011\071\001\001\000\004"
                + "\011\070\001\001\000\004\011\067\001\001\000\004\011"
                + "\066\001\001\000\004\011\065\001\001\000\004\011\064"
                + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
                + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
                + "\000\002\001\001\000\016\003\074\004\016\007\013\012"
                + "\006\015\015\017\003\001\001\000\002\001\001\000\014"
                + "\004\076\007\013\012\006\015\015\017\003\001\001\000"
                + "\002\001\001\000\002\001\001\000\002\001\001\000\014"
                + "\004\076\007\013\012\006\015\015\017\003\001\001\000"
                + "\002\001\001\000\004\011\104\001\001\000\002\001\001"
                + "\000\004\011\106\001\001\000\002\001\001\000\004\011"
                + "\115\001\001\000\016\003\111\004\016\007\013\012\006"
                + "\015\015\017\003\001\001\000\002\001\001\000\014\004"
                + "\076\007\013\012\006\015\015\017\003\001\001\000\002"
                + "\001\001\000\002\001\001\000\002\001\001\000\016\003"
                + "\117\004\016\007\013\012\006\015\015\017\003\001\001"
                + "\000\002\001\001\000\014\004\076\007\013\012\006\015"
                + "\015\017\003\001\001\000\002\001\001\000\002\001\001"
                + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
                + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
                + "\001\001\000\002\001\001\000\004\006\134\001\001\000"
                + "\002\001\001"});

    /** Access to <code>reduce_goto</code> table. */
    public short[][] reduce_table() {
        return _reduce_table;
    }
    /** Instance of action encapsulation class. */
    protected CUP$Parser$actions action_obj;

    /** Action encapsulation object initializer. */
    protected void init_actions() {
        action_obj = new CUP$Parser$actions(this);
    }

    /** Invoke a user supplied parse action. */
    public java_cup.runtime.Symbol do_action(
            int act_num,
            java_cup.runtime.lr_parser parser,
            java.util.Stack stack,
            int top)
            throws java.lang.Exception {
        /* call code in generated class */
        return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
    }

    /** Indicates start state. */
    public int start_state() {
        return 0;
    }

    /** Indicates start production. */
    public int start_production() {
        return 1;
    }

    /** <code>EOF</code> Symbol index. */
    public int EOF_sym() {
        return 0;
    }

    /** <code>error</code> Symbol index. */
    public int error_sym() {
        return 1;
    }
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {

    private NodoBase root = null;
    private boolean debug = true;
    private int lineaNum = 0;

    public NodoBase getRoot() {
        return root;
    }
    private final Parser parser;

    /** Constructor */
    CUP$Parser$actions(Parser parser) {
        this.parser = parser;
    }

    /** Method with the actual generated action code. */
    public final java_cup.runtime.Symbol CUP$Parser$do_action(
            int CUP$Parser$act_num,
            java_cup.runtime.lr_parser CUP$Parser$parser,
            java.util.Stack CUP$Parser$stack,
            int CUP$Parser$top)
            throws java.lang.Exception {
        /* Symbol object for return from actions */
        java_cup.runtime.Symbol CUP$Parser$result;

        /* select the action based on the action number */
        switch (CUP$Parser$act_num) {
            /*. . . . . . . . . . . . . . . . . . . .*/
            case 44: // if ::= IF condicion THEN LINEANUEVA seq_sent LINEANUEVA ENDIF 
            {
                NodoBase RESULT = null;
                int boolleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).left;
                int boolright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).right;
                NodoOperacionBool bool = (NodoOperacionBool) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).value;
                int thenleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                int thenright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                NodoBase then = (NodoBase) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;

                if (debug) {
                    System.out.println("\t Regla: if ::= IF SOLO");
                }
                RESULT = new NodoIf(bool, then);

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("if", 13, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 43: // condicion ::= expresion DIFERENTE expresion 
            {
                NodoOperacionBool RESULT = null;
                int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                NodoNumero e1 = (NodoNumero) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                NodoNumero e2 = (NodoNumero) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                if (debug) {
                    System.out.println("\t Regla: condicion ::= DIFERENTE");
                }
                RESULT = new NodoOperacionBool(e1, e2, Tipo.OpBool.DIFERENTE);

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion", 12, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 42: // condicion ::= expresion MAYORIGUAL expresion 
            {
                NodoOperacionBool RESULT = null;
                int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                NodoNumero e1 = (NodoNumero) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                NodoNumero e2 = (NodoNumero) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                if (debug) {
                    System.out.println("\t Regla: condicion ::= MAYORIGUAL");
                }
                RESULT = new NodoOperacionBool(e1, e2, Tipo.OpBool.MAYORIGUAL);

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion", 12, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 41: // condicion ::= expresion MAYOR expresion 
            {
                NodoOperacionBool RESULT = null;
                int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                NodoNumero e1 = (NodoNumero) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                NodoNumero e2 = (NodoNumero) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                if (debug) {
                    System.out.println("\t Regla: condicion ::= MAYOR");
                }
                RESULT = new NodoOperacionBool(e1, e2, Tipo.OpBool.MAYOR);

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion", 12, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 40: // condicion ::= expresion MENORIGUAL expresion 
            {
                NodoOperacionBool RESULT = null;
                int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                NodoNumero e1 = (NodoNumero) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                NodoNumero e2 = (NodoNumero) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                if (debug) {
                    System.out.println("\t Regla: condicion ::= MENORIGUAL");
                }
                RESULT = new NodoOperacionBool(e1, e2, Tipo.OpBool.MENORIGUAL);

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion", 12, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 39: // condicion ::= expresion MENOR expresion 
            {
                NodoOperacionBool RESULT = null;
                int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                NodoNumero e1 = (NodoNumero) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                NodoNumero e2 = (NodoNumero) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                if (debug) {
                    System.out.println("\t Regla: condicion ::= MENOR");
                }
                RESULT = new NodoOperacionBool(e1, e2, Tipo.OpBool.MENOR);

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion", 12, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 38: // condicion ::= expresion IGUAL expresion 
            {
                NodoOperacionBool RESULT = null;
                int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                NodoNumero e1 = (NodoNumero) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                NodoNumero e2 = (NodoNumero) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                if (debug) {
                    System.out.println("\t Regla: condicion ::= IGUAL");
                }
                RESULT = new NodoOperacionBool(e1, e2, Tipo.OpBool.IGUAL);

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion", 12, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 37: // for ::= FOR IDENTIFICADOR IGUAL expresion TO expresion STEP expresion LINEANUEVA seq_sent LINEANUEVA NEXT IDENTIFICADOR 
            {
                NodoBase RESULT = null;
                int variableleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 11)).left;
                int variableright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 11)).right;
                String variable = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 11)).value;
                int desdeleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 9)).left;
                int desderight = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 9)).right;
                NodoNumero desde = (NodoNumero) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 9)).value;
                int hastaleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 7)).left;
                int hastaright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 7)).right;
                NodoNumero hasta = (NodoNumero) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 7)).value;
                int stepleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).left;
                int stepright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).right;
                NodoNumero step = (NodoNumero) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).value;
                int cuerpoleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).left;
                int cuerporight = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).right;
                NodoBase cuerpo = (NodoBase) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                int variable2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                int variable2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                String variable2 = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                if (debug) {
                    System.out.println("\t Regla: for ::= Todo el FOR");
                }
                RESULT = new NodoFor(variable, desde.getValor().intValue(), hasta.getValor().intValue(), cuerpo, variable2, step.getValor().intValue());

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("for", 11, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 12)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 36: // for ::= FOR IDENTIFICADOR IGUAL expresion TO expresion LINEANUEVA seq_sent LINEANUEVA NEXT IDENTIFICADOR 
            {
                NodoBase RESULT = null;
                int variableleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 9)).left;
                int variableright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 9)).right;
                String variable = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 9)).value;
                int desdeleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 7)).left;
                int desderight = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 7)).right;
                NodoNumero desde = (NodoNumero) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 7)).value;
                int hastaleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).left;
                int hastaright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).right;
                NodoNumero hasta = (NodoNumero) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).value;
                int cuerpoleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).left;
                int cuerporight = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).right;
                NodoBase cuerpo = (NodoBase) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                int variable2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                int variable2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                String variable2 = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                if (debug) {
                    System.out.println("\t Regla: for ::= Todo el FOR");
                }
                RESULT = new NodoFor(variable, desde.getValor().intValue(), hasta.getValor().intValue(), cuerpo, variable2);

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("for", 11, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 10)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 35: // printValor ::= IDENTIFICADOR 
            {
                NodoBase RESULT = null;
                int variableleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                int variableright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                String variable = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                if (debug) {
                    System.out.println("\t Regla: printValor ::= IDENTIFICADOR");
                }
                RESULT = new NodoIdentificador(variable);

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("printValor", 10, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 34: // printValor ::= expresion 
            {
                NodoBase RESULT = null;
                int exleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                int exright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                NodoNumero ex = (NodoNumero) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                if (debug) {
                    System.out.println("\t Regla: printValor ::= expresion");
                }
                RESULT = ex;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("printValor", 10, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 33: // printValor ::= CADENA 
            {
                NodoBase RESULT = null;
                int cadenaleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                int cadenaright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                Object cadena = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                if (debug) {
                    System.out.println("\t Regla: printValor ::= CADENA");
                }
                if (cadena != null) {
                    RESULT = new NodoCadena(cadena.toString());
                } else {
                    RESULT = null;
                    System.err.println("Error: printValor ::= SIN CADENA");
                }

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("printValor", 10, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 32: // printAnidado ::= printValor 
            {
                NodoBase RESULT = null;
                int valorleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                int valorright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                NodoBase valor = (NodoBase) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                if (debug) {
                    System.out.println("\t Regla: printAnidado ::= printValor");
                }
                RESULT = valor;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("printAnidado", 9, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 31: // printAnidado ::= printAnidado PTCO printValor 
            {
                NodoBase RESULT = null;
                int valoresleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                int valoresright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                NodoBase valores = (NodoBase) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                int valorleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                int valorright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                NodoBase valor = (NodoBase) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                if (debug) {
                    System.out.println("\t Regla: printAnidado ::= printAnidado PTCO printValor");
                }
                NodoBase hijoActual = valores;
                if (hijoActual != null) {
                    while (hijoActual.TieneHermano()) {
                        hijoActual = hijoActual.getHermanoDerecha();
                    }
                    hijoActual.setHermanoDerecha(valor);
                    RESULT = valores;
                } else {
                    RESULT = valor;
                }

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("printAnidado", 9, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 30: // print ::= PRINT printAnidado PTCO 
            {
                NodoBase RESULT = null;
                int sentencialeft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                int sentenciaright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                NodoBase sentencia = (NodoBase) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;

                if (debug) {
                    System.out.println("\t Regla: printAnidado ::= printAnidado PTCO");
                }
                NodoEscribir nodoEscribir = new NodoEscribir(sentencia, false);
                RESULT = nodoEscribir;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("print", 8, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 29: // print ::= PRINT printAnidado 
            {
                NodoBase RESULT = null;
                int sentencialeft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                int sentenciaright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                NodoBase sentencia = (NodoBase) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                if (debug) {
                    System.out.println("\t Regla: print ::= PRINT printAnidado");
                }
                RESULT = new NodoEscribir(sentencia);

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("print", 8, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 28: // expresion ::= LPARENT expresion RPARENT 
            {
                NodoNumero RESULT = null;
                int EXWleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                int EXWright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                NodoNumero EXW = (NodoNumero) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;

                if (debug) {
                    System.out.println("\t Regla: expresion ::= PARENTESIS ");
                }
                //RESULT = new Integer(EXW.intValue());

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion", 7, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 27: // expresion ::= expresion POTE expresion 
            {
                NodoNumero RESULT = null;
                int ED1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                int ED1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                NodoNumero ED1 = (NodoNumero) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                int ED2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                int ED2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                NodoNumero ED2 = (NodoNumero) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                if (debug) {
                    System.out.println("\t Regla: expresion ::= POTE ");
                }
                //RESULT = new Integer( (int) Math.pow(ED1.intValue(),ED2.intValue())); 

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion", 7, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 26: // expresion ::= expresion DIVI expresion 
            {
                NodoNumero RESULT = null;
                int EC1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                int EC1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                NodoNumero EC1 = (NodoNumero) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                int EC2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                int EC2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                NodoNumero EC2 = (NodoNumero) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                if (debug) {
                    System.out.println("\t Regla: expresion ::= DIVI ");
                }
                //RESULT = new Integer(EC1.intValue() / EC2.intValue());

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion", 7, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 25: // expresion ::= expresion MULT expresion 
            {
                NodoNumero RESULT = null;
                int EA1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                int EA1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                NodoNumero EA1 = (NodoNumero) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                int EA2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                int EA2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                NodoNumero EA2 = (NodoNumero) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                if (debug) {
                    System.out.println("\t Regla: expresion ::= MULT ");
                }
                //RESULT = new Integer(EA1.intValue() * EA2.intValue());

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion", 7, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 24: // expresion ::= expresion REST expresion 
            {
                NodoNumero RESULT = null;
                int EE1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                int EE1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                NodoNumero EE1 = (NodoNumero) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                int EE2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                int EE2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                NodoNumero EE2 = (NodoNumero) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                if (debug) {
                    System.out.println("\t Regla: expresion ::= REST ");
                }
                //RESULT = new Integer(EE1.intValue() - EE2.intValue())

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion", 7, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 23: // expresion ::= expresion SUMA expresion 
            {
                NodoNumero RESULT = null;
                int E1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                int E1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                NodoNumero E1 = (NodoNumero) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                int E2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                int E2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                NodoNumero E2 = (NodoNumero) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                if (debug) {
                    System.out.println("\t Regla: expresion ::= SUMA ");
                }
                //RESULT = new Integer(E1.intValue() + E2.intValue());

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion", 7, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 22: // expresion ::= NUMERO 
            {
                NodoNumero RESULT = null;
                int numleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                int numright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                String num = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                if (debug) {
                    System.out.println("\t Regla: expresion ::= NUMERO ");
                }
                RESULT = new NodoNumero(num);

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion", 7, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 21: // valor ::= IDENTIFICADOR 
            {
                NodoBase RESULT = null;
                int variableleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                int variableright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                String variable = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                if (debug) {
                    System.out.println("\t Regla: valor ::= IDENTIFICADOR ");
                }
                RESULT = new NodoIdentificador(variable);

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor", 6, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 20: // valor ::= expresion 
            {
                NodoBase RESULT = null;
                int exleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                int exright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                NodoNumero ex = (NodoNumero) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                if (debug) {
                    System.out.println("\t Regla: valor ::= expresion ");
                }
                RESULT = ex;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor", 6, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 19: // asignacion ::= IDENTIFICADOR IGUAL valor 
            {
                NodoBase RESULT = null;
                int variableleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                int variableright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                String variable = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                int valorleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                int valorright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                NodoBase valor = (NodoBase) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                if (debug) {
                    System.out.println("\t Regla: asignacion ::= IDENTIFICADOR IGUAL expresion");
                }
                RESULT = new NodoAsignacion(variable, valor);

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion", 5, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 18: // declaracion ::= IDENTIFICADOR AS STRING 
            {
                NodoBase RESULT = null;
                int nombreleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                int nombreright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                String nombre = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;

                if (debug) {
                    System.out.println("\t Regla: declaracion ::= IDENTIFICADOR AS STRING");
                }
                if (nombre != null) {
                    RESULT = new NodoDeclaracion(nombre.toString(), Tipo.Variable.STRING);
                } else {
                    RESULT = null;
                    System.err.println("ERROR: declaracion ::= DIM (SIN NOMBRE DE VARIABLE)");
                }

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion", 4, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 17: // declaracion ::= IDENTIFICADOR AS FLOAT 
            {
                NodoBase RESULT = null;
                int nombreleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                int nombreright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                String nombre = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;

                if (debug) {
                    System.out.println("\t Regla: declaracion ::= IDENTIFICADOR AS FLOAT");
                }
                if (nombre != null) {
                    RESULT = new NodoDeclaracion(nombre.toString(), Tipo.Variable.FLOAT);
                } else {
                    RESULT = null;
                    System.err.println("ERROR: declaracion ::= DIM (SIN NOMBRE DE VARIABLE)");
                }

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion", 4, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 16: // declaracion ::= IDENTIFICADOR AS INTEGER 
            {
                NodoBase RESULT = null;
                int nombreleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                int nombreright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                String nombre = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;

                if (debug) {
                    System.out.println("\t Regla: declaracion ::= IDENTIFICADOR AS INTEGER");
                }
                if (nombre != null) {
                    RESULT = new NodoDeclaracion(nombre.toString(), Tipo.Variable.INTEGER);
                } else {
                    RESULT = null;
                    System.err.println("ERROR: declaracion ::= DIM (SIN NOMBRE DE VARIABLE)");
                }

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion", 4, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 15: // declaraciones ::= declaracion 
            {
                NodoBase RESULT = null;
                int declaracionleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                int declaracionright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                NodoBase declaracion = (NodoBase) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = declaracion;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaraciones", 3, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 14: // declaraciones ::= declaraciones COMA declaracion 
            {
                NodoBase RESULT = null;

                if (debug) {
                    System.out.println("\t Regla: declaraciones ::= declaraciones COMA declaracion");
                }
                RESULT = null;
                //TODO lo del hermano

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaraciones", 3, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 13: // sent ::= error 
            {
                NodoBase RESULT = null;

                if (debug) {
                    System.out.println("\t Regla stmt ::= error");
                }
                System.err.println("Error: sent ::= NO ENCONTRADA");
                RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent", 2, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 12: // sent ::= LINEANUEVA 
            {
                NodoBase RESULT = null;

                if (debug) {
                    System.out.println("\t Regla: sent ::= LINEANUEVA");
                }

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent", 2, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 11: // sent ::= INPUT IDENTIFICADOR 
            {
                NodoBase RESULT = null;
                int nombreleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                int nombreright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                String nombre = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                if (debug) {
                    System.out.println("\t Regla: sent ::= INPUT IDENTIFICADOR");
                }
                RESULT = new NodoLeer(nombre);

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent", 2, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 10: // sent ::= END 
            {
                NodoBase RESULT = null;

                if (debug) {
                    System.out.println("\t Regla: sent ::= END");
                }
                RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent", 2, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 9: // sent ::= if 
            {
                NodoBase RESULT = null;
                int sentencialeft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                int sentenciaright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                NodoBase sentencia = (NodoBase) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                if (debug) {
                    System.out.println("\t Regla: sent ::= if");
                }
                RESULT = sentencia;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent", 2, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 8: // sent ::= for 
            {
                NodoBase RESULT = null;
                int sentencialeft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                int sentenciaright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                NodoBase sentencia = (NodoBase) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                if (debug) {
                    System.out.println("\t Regla: sent ::= for");
                }
                RESULT = sentencia;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent", 2, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 7: // sent ::= asignacion 
            {
                NodoBase RESULT = null;
                int sentencialeft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                int sentenciaright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                NodoBase sentencia = (NodoBase) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                if (debug) {
                    System.out.println("\t Regla: sent ::= asignacion");
                }
                RESULT = sentencia;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent", 2, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 6: // sent ::= DIM declaraciones 
            {
                NodoBase RESULT = null;
                int sentencialeft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                int sentenciaright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                NodoBase sentencia = (NodoBase) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                if (debug) {
                    System.out.println("\t Regla: sent ::= declaracion");
                }
                RESULT = sentencia;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent", 2, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 5: // sent ::= print 
            {
                NodoBase RESULT = null;
                int sentencialeft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                int sentenciaright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                NodoBase sentencia = (NodoBase) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                if (debug) {
                    System.out.println("\t Regla: sent ::= print");
                }
                RESULT = sentencia;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent", 2, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 4: // seq_sent ::= sent 
            {
                NodoBase RESULT = null;
                int sentencialeft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                int sentenciaright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                NodoBase sentencia = (NodoBase) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                if (debug) {
                    System.out.println("\t Regla: seq_sent ::= Una Sentencia");
                }
                RESULT = sentencia;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_sent", 1, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 3: // seq_sent ::= seq_sent LINEANUEVA sent 
            {
                NodoBase RESULT = null;
                int sentenciasleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                int sentenciasright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                NodoBase sentencias = (NodoBase) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                int sentencialeft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                int sentenciaright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                NodoBase sentencia = (NodoBase) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                if (debug) {
                    System.out.println("\t Regla: seq_sent ::= Varias Sentencias");
                }
                NodoBase hijoActual = sentencias;
                if (hijoActual != null) {
                    while (hijoActual.TieneHermano()) {
                        hijoActual = hijoActual.getHermanoDerecha();
                    }
                    hijoActual.setHermanoDerecha(sentencia);
                    RESULT = sentencias;
                } else {
                    RESULT = sentencia;
                }

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_sent", 1, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 2: // programa ::= seq_sent LINEANUEVA 
            {
                NodoBase RESULT = null;
                int progleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                int progright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                NodoBase prog = (NodoBase) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;

                if (debug) {
                    System.out.println("\t Regla: programa ::= seq_sent LINEANUEVA");
                }
                root = prog;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 1: // $START ::= programa EOF 
            {
                Object RESULT = null;
                int start_valleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                int start_valright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                NodoBase start_val = (NodoBase) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                RESULT = start_val;
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            /* ACCEPT */
            CUP$Parser$parser.done_parsing();
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 0: // programa ::= seq_sent 
            {
                NodoBase RESULT = null;
                int progleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                int progright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                NodoBase prog = (NodoBase) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                if (debug) {
                    System.out.println("\t Regla: programa ::= seq_sent");
                }
                root = prog;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /* . . . . . .*/
            default:
                throw new Exception(
                        "Invalid action number found in internal parse table");

        }
    }
}
