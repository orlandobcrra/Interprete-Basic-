
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Oct 15 17:40:02 VET 2011
//----------------------------------------------------

import java_cup.runtime.*;
import ast.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Oct 15 17:40:02 VET 2011
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\102\000\002\002\003\000\002\002\004\000\002\002" +
    "\004\000\002\003\005\000\002\003\003\000\002\004\003" +
    "\000\002\004\004\000\002\004\004\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\004\000\002\004\003\000\002\004\003\000\002\005\005" +
    "\000\002\005\003\000\002\006\005\000\002\006\005\000" +
    "\002\006\005\000\002\007\005\000\002\007\003\000\002" +
    "\010\010\000\002\010\010\000\002\010\010\000\002\011" +
    "\005\000\002\011\005\000\002\012\010\000\002\012\010" +
    "\000\002\013\003\000\002\013\003\000\002\013\006\000" +
    "\002\013\005\000\002\013\005\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\004\000\002\013\005\000\002\014\004\000\002\014\005" +
    "\000\002\015\005\000\002\015\003\000\002\016\003\000" +
    "\002\016\003\000\002\017\015\000\002\017\017\000\002" +
    "\021\003\000\002\021\005\000\002\021\005\000\002\021" +
    "\004\000\002\021\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\005\000\002\022\011\000\002\022\015\000\002" +
    "\023\010\000\002\024\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\224\000\030\003\022\005\011\006\007\007\026\010" +
    "\024\033\023\036\004\037\027\053\012\057\006\061\016" +
    "\001\002\000\004\010\226\001\002\000\006\002\ufffc\005" +
    "\ufffc\001\002\000\014\010\034\017\033\021\036\026\155" +
    "\052\153\001\002\000\006\002\ufff3\005\ufff3\001\002\000" +
    "\006\002\ufff8\005\ufff8\001\002\000\006\002\ufff1\005\ufff1" +
    "\001\002\000\014\010\034\017\033\021\036\026\155\052" +
    "\153\001\002\000\006\002\001\005\205\001\002\000\006" +
    "\002\ufff9\005\ufff9\001\002\000\004\002\204\001\002\000" +
    "\004\005\146\001\002\000\006\002\ufff6\005\ufff6\001\002" +
    "\000\006\002\ufff5\005\ufff5\001\002\000\006\002\ufff4\005" +
    "\ufff4\001\002\000\006\002\ufff0\005\ufff0\001\002\000\014" +
    "\010\034\017\033\021\036\026\035\034\142\001\002\000" +
    "\006\016\127\030\130\001\002\000\006\002\ufff7\005\ufff7" +
    "\001\002\000\004\010\103\001\002\000\004\010\031\001" +
    "\002\000\006\002\ufffd\005\ufffd\001\002\000\004\016\032" +
    "\001\002\000\012\010\034\017\033\021\036\026\035\001" +
    "\002\000\056\002\uffe1\005\uffe1\016\uffe1\020\uffe1\021\uffe1" +
    "\022\uffe1\023\uffe1\024\uffe1\025\uffe1\027\uffe1\031\uffe1\035" +
    "\uffe1\040\uffe1\041\uffe1\043\uffe1\044\uffe1\045\uffe1\046\uffe1" +
    "\047\uffe1\050\uffe1\051\uffe1\054\uffe1\001\002\000\060\002" +
    "\uffe0\005\uffe0\016\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0" +
    "\024\uffe0\025\uffe0\027\uffe0\030\076\031\uffe0\035\uffe0\040" +
    "\uffe0\041\uffe0\043\uffe0\044\uffe0\045\uffe0\046\uffe0\047\uffe0" +
    "\050\uffe0\051\uffe0\054\uffe0\001\002\000\012\010\034\017" +
    "\033\021\036\026\035\001\002\000\012\010\034\017\033" +
    "\021\036\026\035\001\002\000\020\020\044\021\046\022" +
    "\042\023\045\024\043\025\041\040\040\001\002\000\012" +
    "\010\034\017\033\021\036\026\035\001\002\000\012\010" +
    "\034\017\033\021\036\026\035\001\002\000\012\010\034" +
    "\017\033\021\036\026\035\001\002\000\012\010\034\017" +
    "\033\021\036\026\035\001\002\000\012\010\034\017\033" +
    "\021\036\026\035\001\002\000\012\010\034\017\033\021" +
    "\036\026\035\001\002\000\012\010\034\017\033\021\036" +
    "\026\035\001\002\000\056\002\uffdd\005\uffdd\016\uffdd\020" +
    "\uffdd\021\uffdd\022\042\023\045\024\043\025\041\027\uffdd" +
    "\031\uffdd\035\uffdd\040\uffdd\041\uffdd\043\uffdd\044\uffdd\045" +
    "\uffdd\046\uffdd\047\uffdd\050\uffdd\051\uffdd\054\uffdd\001\002" +
    "\000\056\002\uffdb\005\uffdb\016\uffdb\020\uffdb\021\uffdb\022" +
    "\uffdb\023\uffdb\024\043\025\uffdb\027\uffdb\031\uffdb\035\uffdb" +
    "\040\uffdb\041\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb\047" +
    "\uffdb\050\uffdb\051\uffdb\054\uffdb\001\002\000\056\002\uffde" +
    "\005\uffde\016\uffde\020\uffde\021\uffde\022\042\023\045\024" +
    "\043\025\041\027\uffde\031\uffde\035\uffde\040\uffde\041\uffde" +
    "\043\uffde\044\uffde\045\uffde\046\uffde\047\uffde\050\uffde\051" +
    "\uffde\054\uffde\001\002\000\056\002\uffd9\005\uffd9\016\uffd9" +
    "\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024\043\025\uffd9\027" +
    "\uffd9\031\uffd9\035\uffd9\040\uffd9\041\uffd9\043\uffd9\044\uffd9" +
    "\045\uffd9\046\uffd9\047\uffd9\050\uffd9\051\uffd9\054\uffd9\001" +
    "\002\000\056\002\uffdc\005\uffdc\016\uffdc\020\uffdc\021\uffdc" +
    "\022\uffdc\023\uffdc\024\043\025\uffdc\027\uffdc\031\uffdc\035" +
    "\uffdc\040\uffdc\041\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc" +
    "\047\uffdc\050\uffdc\051\uffdc\054\uffdc\001\002\000\056\002" +
    "\uffda\005\uffda\016\uffda\020\uffda\021\uffda\022\uffda\023\uffda" +
    "\024\043\025\uffda\027\uffda\031\uffda\035\uffda\040\uffda\041" +
    "\uffda\043\uffda\044\uffda\045\uffda\046\uffda\047\uffda\050\uffda" +
    "\051\uffda\054\uffda\001\002\000\022\005\057\020\044\021" +
    "\046\022\042\023\045\024\043\025\041\041\056\001\002" +
    "\000\012\010\034\017\033\021\036\026\035\001\002\000" +
    "\030\003\022\005\011\006\007\007\026\010\024\033\023" +
    "\036\004\037\027\053\012\057\006\061\016\001\002\000" +
    "\004\005\061\001\002\000\032\003\022\005\011\006\007" +
    "\007\026\010\024\033\023\036\004\037\027\042\062\053" +
    "\012\057\006\061\016\001\002\000\004\010\064\001\002" +
    "\000\006\002\ufffe\005\ufffe\001\002\000\006\002\uffd0\005" +
    "\uffd0\001\002\000\020\005\066\020\044\021\046\022\042" +
    "\023\045\024\043\025\041\001\002\000\030\003\022\005" +
    "\011\006\007\007\026\010\024\033\023\036\004\037\027" +
    "\053\012\057\006\061\016\001\002\000\004\005\070\001" +
    "\002\000\032\003\022\005\011\006\007\007\026\010\024" +
    "\033\023\036\004\037\027\042\071\053\012\057\006\061" +
    "\016\001\002\000\004\010\072\001\002\000\006\002\uffcf" +
    "\005\uffcf\001\002\000\056\002\uffd8\005\uffd8\016\uffd8\020" +
    "\uffd8\021\uffd8\022\uffd8\023\uffd8\024\043\025\uffd8\027\uffd8" +
    "\031\uffd8\035\uffd8\040\uffd8\041\uffd8\043\uffd8\044\uffd8\045" +
    "\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8\054\uffd8\001\002" +
    "\000\020\020\044\021\046\022\042\023\045\024\043\025" +
    "\041\027\075\001\002\000\056\002\uffd7\005\uffd7\016\uffd7" +
    "\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\027" +
    "\uffd7\031\uffd7\035\uffd7\040\uffd7\041\uffd7\043\uffd7\044\uffd7" +
    "\045\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7\054\uffd7\001" +
    "\002\000\012\010\034\017\033\021\036\026\035\001\002" +
    "\000\020\020\044\021\046\022\042\023\045\024\043\025" +
    "\041\031\100\001\002\000\056\002\uffdf\005\uffdf\016\uffdf" +
    "\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\027" +
    "\uffdf\031\uffdf\035\uffdf\040\uffdf\041\uffdf\043\uffdf\044\uffdf" +
    "\045\uffdf\046\uffdf\047\uffdf\050\uffdf\051\uffdf\054\uffdf\001" +
    "\002\000\010\002\ufffb\005\ufffb\015\124\001\002\000\010" +
    "\002\uffe9\005\uffe9\015\uffe9\001\002\000\006\011\120\030" +
    "\111\001\002\000\010\002\uffee\005\uffee\015\uffee\001\002" +
    "\000\010\002\ufffa\005\ufffa\015\106\001\002\000\004\010" +
    "\110\001\002\000\010\002\uffea\005\uffea\015\uffea\001\002" +
    "\000\004\030\111\001\002\000\012\010\034\017\033\021" +
    "\036\026\035\001\002\000\020\020\044\021\046\022\042" +
    "\023\045\024\043\025\041\031\113\001\002\000\004\011" +
    "\114\001\002\000\010\012\115\013\117\014\116\001\002" +
    "\000\010\002\uffe8\005\uffe8\015\uffe8\001\002\000\010\002" +
    "\uffe6\005\uffe6\015\uffe6\001\002\000\010\002\uffe7\005\uffe7" +
    "\015\uffe7\001\002\000\010\012\121\013\123\014\122\001" +
    "\002\000\010\002\uffed\005\uffed\015\uffed\001\002\000\010" +
    "\002\uffeb\005\uffeb\015\uffeb\001\002\000\010\002\uffec\005" +
    "\uffec\015\uffec\001\002\000\004\010\125\001\002\000\004" +
    "\011\120\001\002\000\010\002\uffef\005\uffef\015\uffef\001" +
    "\002\000\014\010\034\017\033\021\036\026\035\034\136" +
    "\001\002\000\012\010\034\017\033\021\036\026\035\001" +
    "\002\000\020\020\044\021\046\022\042\023\045\024\043" +
    "\025\041\031\132\001\002\000\004\016\133\001\002\000" +
    "\014\010\034\017\033\021\036\026\035\034\134\001\002" +
    "\000\006\002\uffe2\005\uffe2\001\002\000\022\002\uffe3\005" +
    "\uffe3\020\044\021\046\022\042\023\045\024\043\025\041" +
    "\001\002\000\006\002\uffe4\005\uffe4\001\002\000\022\002" +
    "\uffe5\005\uffe5\020\044\021\046\022\042\023\045\024\043" +
    "\025\041\001\002\000\010\002\uffd6\005\uffd6\035\144\001" +
    "\002\000\010\002\uffd3\005\uffd3\035\uffd3\001\002\000\010" +
    "\002\uffd2\005\uffd2\035\uffd2\001\002\000\024\002\uffd1\005" +
    "\uffd1\020\044\021\046\022\042\023\045\024\043\025\041" +
    "\035\uffd1\001\002\000\020\002\uffd5\005\uffd5\010\034\017" +
    "\033\021\036\026\035\034\142\001\002\000\010\002\uffd4" +
    "\005\uffd4\035\uffd4\001\002\000\030\003\022\005\011\006" +
    "\007\007\026\010\024\033\023\036\004\037\027\053\012" +
    "\057\006\061\016\001\002\000\004\005\150\001\002\000" +
    "\032\003\022\005\011\006\007\007\026\010\024\033\023" +
    "\036\004\037\027\053\012\057\006\061\016\062\151\001" +
    "\002\000\004\063\152\001\002\000\014\010\034\017\033" +
    "\021\036\026\155\052\153\001\002\000\014\010\034\017" +
    "\033\021\036\026\155\052\153\001\002\000\016\002\uffce" +
    "\005\uffce\027\uffce\050\uffce\051\uffce\054\uffce\001\002\000" +
    "\014\010\034\017\033\021\036\026\155\052\153\001\002" +
    "\000\012\002\uffc0\005\uffc0\050\174\051\175\001\002\000" +
    "\032\016\164\020\044\021\046\022\042\023\045\024\043" +
    "\025\041\043\160\044\161\045\162\046\163\047\165\001" +
    "\002\000\012\010\034\017\033\021\036\026\035\001\002" +
    "\000\012\010\034\017\033\021\036\026\035\001\002\000" +
    "\012\010\034\017\033\021\036\026\035\001\002\000\012" +
    "\010\034\017\033\021\036\026\035\001\002\000\012\010" +
    "\034\017\033\021\036\026\035\001\002\000\012\010\034" +
    "\017\033\021\036\026\035\001\002\000\032\002\uffc4\005" +
    "\uffc4\020\044\021\046\022\042\023\045\024\043\025\041" +
    "\027\uffc4\050\uffc4\051\uffc4\054\uffc4\001\002\000\032\002" +
    "\uffc9\005\uffc9\020\044\021\046\022\042\023\045\024\043" +
    "\025\041\027\uffc9\050\uffc9\051\uffc9\054\uffc9\001\002\000" +
    "\032\002\uffc6\005\uffc6\020\044\021\046\022\042\023\045" +
    "\024\043\025\041\027\uffc6\050\uffc6\051\uffc6\054\uffc6\001" +
    "\002\000\032\002\uffc5\005\uffc5\020\044\021\046\022\042" +
    "\023\045\024\043\025\041\027\uffc5\050\uffc5\051\uffc5\054" +
    "\uffc5\001\002\000\032\002\uffc8\005\uffc8\020\044\021\046" +
    "\022\042\023\045\024\043\025\041\027\uffc8\050\uffc8\051" +
    "\uffc8\054\uffc8\001\002\000\032\002\uffc7\005\uffc7\020\044" +
    "\021\046\022\042\023\045\024\043\025\041\027\uffc7\050" +
    "\uffc7\051\uffc7\054\uffc7\001\002\000\014\010\034\017\033" +
    "\021\036\026\155\052\153\001\002\000\014\010\034\017" +
    "\033\021\036\026\155\052\153\001\002\000\016\002\uffcc" +
    "\005\uffcc\027\uffcc\050\uffcc\051\uffcc\054\uffcc\001\002\000" +
    "\016\002\uffcd\005\uffcd\027\uffcd\050\uffcd\051\uffcd\054\uffcd" +
    "\001\002\000\010\027\202\050\174\051\175\001\002\000" +
    "\034\016\164\020\044\021\046\022\042\023\045\024\043" +
    "\025\041\027\075\043\160\044\161\045\162\046\163\047" +
    "\165\001\002\000\016\002\uffca\005\uffca\027\uffca\050\uffca" +
    "\051\uffca\054\uffca\001\002\000\016\002\uffcb\005\uffcb\027" +
    "\uffcb\050\uffcb\051\uffcb\054\uffcb\001\002\000\004\002\000" +
    "\001\002\000\032\002\uffff\003\022\005\011\006\007\007" +
    "\026\010\024\033\023\036\004\037\027\053\012\057\006" +
    "\061\016\001\002\000\010\050\174\051\175\054\207\001" +
    "\002\000\004\005\210\001\002\000\030\003\022\005\011" +
    "\006\007\007\026\010\024\033\023\036\004\037\027\053" +
    "\012\057\006\061\016\001\002\000\004\005\212\001\002" +
    "\000\034\003\022\005\011\006\007\007\026\010\024\033" +
    "\023\036\004\037\027\053\012\055\213\056\214\057\006" +
    "\061\016\001\002\000\004\005\215\001\002\000\006\002" +
    "\uffc3\005\uffc3\001\002\000\030\003\022\005\011\006\007" +
    "\007\026\010\024\033\023\036\004\037\027\053\012\057" +
    "\006\061\016\001\002\000\004\005\217\001\002\000\032" +
    "\003\022\005\011\006\007\007\026\010\024\033\023\036" +
    "\004\037\027\053\012\056\220\057\006\061\016\001\002" +
    "\000\006\002\uffc2\005\uffc2\001\002\000\010\005\222\050" +
    "\174\051\175\001\002\000\030\003\022\005\011\006\007" +
    "\007\026\010\024\033\023\036\004\037\027\053\012\057" +
    "\006\061\016\001\002\000\004\005\224\001\002\000\032" +
    "\003\022\005\011\006\007\007\026\010\024\033\023\036" +
    "\004\037\027\053\012\057\006\060\225\061\016\001\002" +
    "\000\006\002\uffc1\005\uffc1\001\002\000\006\002\ufff2\005" +
    "\ufff2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\224\000\026\002\014\003\012\004\027\011\013\012" +
    "\007\014\004\017\024\022\016\023\017\024\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\013\156\020" +
    "\153\021\220\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\013\156\020\153\021\205\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\013\142\015\137" +
    "\016\140\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\005\100\006\103\007\104\010\101\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\073\001\001\000\004\013\072\001\001\000\002\001" +
    "\001\000\004\013\054\001\001\000\004\013\053\001\001" +
    "\000\004\013\052\001\001\000\004\013\051\001\001\000" +
    "\004\013\050\001\001\000\004\013\047\001\001\000\004" +
    "\013\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\064\001\001\000" +
    "\024\003\057\004\027\011\013\012\007\014\004\017\024" +
    "\022\016\023\017\024\020\001\001\000\002\001\001\000" +
    "\022\004\062\011\013\012\007\014\004\017\024\022\016" +
    "\023\017\024\020\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\003\066" +
    "\004\027\011\013\012\007\014\004\017\024\022\016\023" +
    "\017\024\020\001\001\000\002\001\001\000\022\004\062" +
    "\011\013\012\007\014\004\017\024\022\016\023\017\024" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\111\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\125\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\136\001\001\000\004\013\130\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\134\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\013\142\016\144" +
    "\001\001\000\002\001\001\000\024\003\146\004\027\011" +
    "\013\012\007\014\004\017\024\022\016\023\017\024\020" +
    "\001\001\000\002\001\001\000\022\004\062\011\013\012" +
    "\007\014\004\017\024\022\016\023\017\024\020\001\001" +
    "\000\002\001\001\000\010\013\156\020\153\021\155\001" +
    "\001\000\010\013\156\020\153\021\202\001\001\000\002" +
    "\001\001\000\010\013\200\020\153\021\177\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\172\001\001" +
    "\000\004\013\171\001\001\000\004\013\170\001\001\000" +
    "\004\013\167\001\001\000\004\013\166\001\001\000\004" +
    "\013\165\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\013\156\020\153\021\176\001\001\000" +
    "\010\013\156\020\153\021\175\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\004\062\011\013\012\007\014\004\017\024\022\016\023" +
    "\017\024\020\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\003\210\004\027\011\013\012\007\014\004\017" +
    "\024\022\016\023\017\024\020\001\001\000\002\001\001" +
    "\000\022\004\062\011\013\012\007\014\004\017\024\022" +
    "\016\023\017\024\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\003\215\004\027\011\013\012\007\014" +
    "\004\017\024\022\016\023\017\024\020\001\001\000\002" +
    "\001\001\000\022\004\062\011\013\012\007\014\004\017" +
    "\024\022\016\023\017\024\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\003\222\004\027\011\013\012" +
    "\007\014\004\017\024\022\016\023\017\024\020\001\001" +
    "\000\002\001\001\000\022\004\062\011\013\012\007\014" +
    "\004\017\024\022\016\023\017\024\020\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


	private NodoBase root=null;
	private boolean debug=true;	
	private int lineaNum=0;

	public NodoBase getRoot(){
		return root;
	}

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // do ::= DO LINEANUEVA seq_sent LINEANUEVA LOOP UNTIL expresionBool 
            {
              NodoBase RESULT =null;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		NodoBase cuerpo = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: if ::= IF SOLO");
		RESULT = new NodoDo(ex,cuerpo);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("do",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // while ::= WHILE expresionBool LINEANUEVA seq_sent LINEANUEVA WEND 
            {
              NodoWhile RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase cuerpo = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
		if(debug)
			System.out.println("\t Regla: if ::= IF SOLO");
		RESULT = new NodoWhile(ex,cuerpo);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // if ::= IF expresionBool THEN LINEANUEVA seq_sent LINEANUEVA ELSE LINEANUEVA seq_sent LINEANUEVA ENDIF 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int thenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int thenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		NodoBase then = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int else1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int else1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase else1 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
		if(debug)
			System.out.println("\t Regla: if ::= IF CON ELSE");
		RESULT = new NodoIf(ex, then, else1);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // if ::= IF expresionBool THEN LINEANUEVA seq_sent LINEANUEVA ENDIF 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int thenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int thenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase then = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
		if(debug)
			System.out.println("\t Regla: if ::= IF SOLO");
		RESULT = new NodoIf(ex, then);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // condicion ::= expresion DIFERENTE expresion 
            {
              NodoBase RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase e1 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase e2 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: condicion ::= DIFERENTE");
		RESULT = new NodoOperacionBool(e1,e2,Tipo.OpBool.DIFERENTE);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // condicion ::= expresion MAYORIGUAL expresion 
            {
              NodoBase RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase e1 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase e2 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: condicion ::= MAYORIGUAL");
		RESULT = new NodoOperacionBool(e1,e2,Tipo.OpBool.MAYORIGUAL);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // condicion ::= expresion MAYOR expresion 
            {
              NodoBase RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase e1 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase e2 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: condicion ::= MAYOR");
		RESULT = new NodoOperacionBool(e1,e2,Tipo.OpBool.MAYOR);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // condicion ::= expresion MENORIGUAL expresion 
            {
              NodoBase RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase e1 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase e2 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: condicion ::= MENORIGUAL");
		RESULT = new NodoOperacionBool(e1,e2,Tipo.OpBool.MENORIGUAL);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // condicion ::= expresion MENOR expresion 
            {
              NodoBase RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase e1 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase e2 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: condicion ::= MENOR");
		RESULT = new NodoOperacionBool(e1,e2,Tipo.OpBool.MENOR);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // condicion ::= expresion IGUAL expresion 
            {
              NodoBase RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase e1 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase e2 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: condicion ::= IGUAL");
		RESULT = new NodoOperacionBool(e1,e2,Tipo.OpBool.IGUAL);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresionBool ::= LPARENT expresionBool RPARENT 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		if(debug)
			System.out.println("\t Regla: expresionBool ::= PARENTESIS ");
		RESULT = ex;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBool",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresionBool ::= NOT expresionBool 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: expresionBool ::= NOT expresionBool");
		RESULT = new NodoOperacionBoolUnaria(ex);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBool",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresionBool ::= expresionBool OR expresionBool 
            {
              NodoBase RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase c1 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase c2 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: expresionBool ::= expresionBool OR expresionBool ");
		RESULT = new NodoOperacionBoolLogica(c1,c2,Tipo.OpBoolLogica.OR);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBool",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresionBool ::= expresionBool AND expresionBool 
            {
              NodoBase RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase c1 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase c2 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: expresionBool ::= expresionBool AND expresionBool ");
		RESULT = new NodoOperacionBoolLogica(c1,c2,Tipo.OpBoolLogica.AND);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBool",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresionBool ::= condicion 
            {
              NodoBase RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase c = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: expresionBool ::= condicion");
		RESULT = c;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBool",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // for ::= FOR IDENTIFICADOR IGUAL expresion TO expresion STEP expresion LINEANUEVA seq_sent LINEANUEVA NEXT IDENTIFICADOR 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int desdeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int desderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		NodoBase desde = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int hastaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int hastaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		NodoBase hasta = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int stepleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int stepright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		NodoBase step = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodoBase cuerpo = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int variable2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int variable2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String variable2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: for ::= Todo el FOR");
		RESULT = new NodoFor(variable, desde, hasta, cuerpo, variable2, step);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // for ::= FOR IDENTIFICADOR IGUAL expresion TO expresion LINEANUEVA seq_sent LINEANUEVA NEXT IDENTIFICADOR 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int desdeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int desderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		NodoBase desde = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int hastaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int hastaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		NodoBase hasta = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodoBase cuerpo = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int variable2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int variable2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String variable2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: for ::= Todo el FOR");
		RESULT = new NodoFor(variable, desde, hasta, cuerpo, variable2);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // printValor ::= expresion 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: printValor ::= expresion");
		RESULT = ex;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("printValor",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // printValor ::= CADENA 
            {
              NodoBase RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: printValor ::= CADENA");
		RESULT = new NodoCadena(cadena.toString());				
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("printValor",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // printAnidado ::= printValor 
            {
              NodoBase RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase valor = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		if(debug)
			System.out.println("\t Regla: printAnidado ::= printValor");
		RESULT = valor;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("printAnidado",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // printAnidado ::= printAnidado PTCO printValor 
            {
              NodoBase RESULT =null;
		int valoresleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valoresright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase valores = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase valor = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: printAnidado ::= printAnidado PTCO printValor");
		NodoBase hijoActual = valores;
		if(hijoActual !=null){
			while(hijoActual.tieneHermano()){
				hijoActual = hijoActual.getHermanoDerecha();
			}
			hijoActual.setHermanoDerecha(valor);
			RESULT = valores;
		}else{
			RESULT = valor;
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("printAnidado",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // print ::= PRINT printAnidado PTCO 
            {
              NodoBase RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoBase sentencia = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
		if(debug)
			System.out.println("\t Regla: printAnidado ::= printAnidado PTCO");
		NodoEscribir nodoEscribir= new NodoEscribir(sentencia,false);
		RESULT = nodoEscribir;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // print ::= PRINT printAnidado 
            {
              NodoBase RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase sentencia = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: print ::= PRINT printAnidado");
		RESULT = new NodoEscribir(sentencia);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresion ::= LPARENT expresion RPARENT 
            {
              NodoBase RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoBase e = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		if(debug)
			System.out.println("\t Regla: expresion ::= PARENTESIS ");
		RESULT = e;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion ::= REST expresion 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: expresion ::= RESTA expresion ");
		RESULT = new NodoOperacionMatUnaria(ex);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion ::= expresion POTE expresion 
            {
              NodoBase RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase e1 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase e2 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: expresion ::= POTE ");
		RESULT = new NodoOperacionMat(e1,e2, Tipo.OpMat.POTE);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion ::= expresion MOD expresion 
            {
              NodoBase RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase e1 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase e2 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: expresion ::= MOD ");
		RESULT = new NodoOperacionMat(e1,e2, Tipo.OpMat.MOD);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresion ::= expresion DIVI expresion 
            {
              NodoBase RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase e1 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase e2 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: expresion ::= DIVI ");
		RESULT = new NodoOperacionMat(e1,e2, Tipo.OpMat.DIVI);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion ::= expresion MULT expresion 
            {
              NodoBase RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase e1 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase e2 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: expresion ::= MULT ");
		RESULT = new NodoOperacionMat(e1,e2, Tipo.OpMat.MULT);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion ::= expresion REST expresion 
            {
              NodoBase RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase e1 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase e2 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: expresion ::= REST ");
		RESULT = new NodoOperacionMat(e1,e2, Tipo.OpMat.REST);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresion ::= expresion SUMA expresion 
            {
              NodoBase RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase e1 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase e2 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: expresion ::= SUMA ");
		RESULT = new NodoOperacionMat(e1,e2, Tipo.OpMat.SUMA);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresion ::= IDENTIFICADOR LCORCHE expresion RCORCHE 
            {
              NodoBase RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		if(debug)
			System.out.println("\t Regla: valor ::= IDENTIFICADOR ");
		RESULT = new NodoIdentificadorVector(nombre,ex);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expresion ::= IDENTIFICADOR 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: valor ::= IDENTIFICADOR ");
		RESULT = new NodoIdentificador(variable);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expresion ::= NUMERO 
            {
              NodoBase RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: expresion ::= NUMERO ");
		RESULT = new NodoNumero(num);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // asignacionVector ::= IDENTIFICADOR LCORCHE expresion RCORCHE IGUAL CADENA 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: asignacion ::= IDENTIFICADOR IGUAL expresion");
		RESULT = new NodoAsignacionVector(variable, ex, new NodoCadena(valor));
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacionVector",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // asignacionVector ::= IDENTIFICADOR LCORCHE expresion RCORCHE IGUAL expresion 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase valor = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: asignacion ::= IDENTIFICADOR IGUAL expresion");
		RESULT = new NodoAsignacionVector(variable, ex, valor);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacionVector",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // asignacion ::= IDENTIFICADOR IGUAL CADENA 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: asignacion ::= IDENTIFICADOR IGUAL expresion");
		RESULT = new NodoAsignacion(variable, new NodoCadena(valor));
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // asignacion ::= IDENTIFICADOR IGUAL expresion 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase valor = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: asignacion ::= IDENTIFICADOR IGUAL expresion");
		RESULT = new NodoAsignacion(variable, valor);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // declaracionVector ::= IDENTIFICADOR LCORCHE expresion RCORCHE AS STRING 
            {
              NodoBase RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
		if(debug)
			System.out.println("\t Regla: declaracionVector ::= IDENTIFICADOR AS STRING");
		if(nombre!=null){
			RESULT = new NodoDeclaracionVector(nombre.toString(),ex,Tipo.Variable.STRING);		
		}else{
			RESULT = null;
			System.err.println("ERROR: declaracionVector ::= DIM (SIN NOMBRE DE VARIABLE)");
		}                                
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionVector",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declaracionVector ::= IDENTIFICADOR LCORCHE expresion RCORCHE AS FLOAT 
            {
              NodoBase RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
		if(debug)
			System.out.println("\t Regla: declaracionVector ::= IDENTIFICADOR AS FLOAT");
		if(nombre!=null){
			RESULT = new NodoDeclaracionVector(nombre.toString(),ex,Tipo.Variable.FLOAT);		
		}else{
			RESULT = null;
			System.err.println("ERROR: declaracionVector ::= DIM (SIN NOMBRE DE VARIABLE)");
		}                                
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionVector",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declaracionVector ::= IDENTIFICADOR LCORCHE expresion RCORCHE AS INTEGER 
            {
              NodoBase RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
		if(debug)
			System.out.println("\t Regla: declaracionVector ::= IDENTIFICADOR AS INTEGER");
		if(nombre!=null){
			RESULT = new NodoDeclaracionVector(nombre.toString(),ex,Tipo.Variable.INTEGER);		
		}else{
			RESULT = null;
			System.err.println("ERROR: declaracionVector ::= DIM (SIN NOMBRE DE VARIABLE)");
		}                                
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionVector",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declaracionesVector ::= declaracionVector 
            {
              NodoBase RESULT =null;
		int declaracionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declaracionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase declaracion = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = declaracion;                               
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionesVector",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declaracionesVector ::= declaracionesVector COMA declaracionVector 
            {
              NodoBase RESULT =null;
		
		if(debug)
			System.out.println("\t Regla: declaracionesVector ::= declaracionesVector COMA declaracionVector");
		RESULT=null;
		//TODO lo del hermano
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionesVector",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declaracion ::= IDENTIFICADOR AS STRING 
            {
              NodoBase RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
		if(debug)
			System.out.println("\t Regla: declaracion ::= IDENTIFICADOR AS STRING");
		if(nombre!=null){
			RESULT = new NodoDeclaracion(nombre.toString(),Tipo.Variable.STRING);		
		}else{
			RESULT = null;
			System.err.println("ERROR: declaracion ::= DIM (SIN NOMBRE DE VARIABLE)");
		}                                
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaracion ::= IDENTIFICADOR AS FLOAT 
            {
              NodoBase RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
		if(debug)
			System.out.println("\t Regla: declaracion ::= IDENTIFICADOR AS FLOAT");
		if(nombre!=null){
			RESULT = new NodoDeclaracion(nombre.toString(),Tipo.Variable.FLOAT);		
		}else{
			RESULT = null;
			System.err.println("ERROR: declaracion ::= DIM (SIN NOMBRE DE VARIABLE)");
		}                                
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declaracion ::= IDENTIFICADOR AS INTEGER 
            {
              NodoBase RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
		if(debug)
			System.out.println("\t Regla: declaracion ::= IDENTIFICADOR AS INTEGER");
		if(nombre!=null){
			RESULT = new NodoDeclaracion(nombre.toString(),Tipo.Variable.INTEGER);		
		}else{
			RESULT = null;
			System.err.println("ERROR: declaracion ::= DIM (SIN NOMBRE DE VARIABLE)");
		}                                
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaraciones ::= declaracion 
            {
              NodoBase RESULT =null;
		int declaracionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declaracionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase declaracion = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = declaracion;                               
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaraciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaraciones ::= declaraciones COMA declaracion 
            {
              NodoBase RESULT =null;
		
		if(debug)
			System.out.println("\t Regla: declaraciones ::= declaraciones COMA declaracion");
		RESULT=null;
		//TODO lo del hermano
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaraciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sent ::= error 
            {
              NodoBase RESULT =null;
		
		if(debug)
			System.out.println("\t Regla stmt ::= error"); 
		System.err.println("Error: sent ::= NO ENCONTRADA");
		RESULT = null;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sent ::= LINEANUEVA 
            {
              NodoBase RESULT =null;
		
		if(debug)
			System.out.println("\t Regla: sent ::= LINEANUEVA");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sent ::= INPUT IDENTIFICADOR 
            {
              NodoBase RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: sent ::= INPUT IDENTIFICADOR");
		RESULT = new NodoLeer(nombre);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sent ::= END 
            {
              NodoBase RESULT =null;
		
		if(debug)
			System.out.println("\t Regla: sent ::= END");
		RESULT = null;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sent ::= do 
            {
              NodoBase RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase sentencia = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: sent ::= do");
		RESULT=sentencia;                              
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sent ::= while 
            {
              NodoBase RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoWhile sentencia = (NodoWhile)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: sent ::= while");
		RESULT=sentencia;                              
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sent ::= if 
            {
              NodoBase RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase sentencia = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: sent ::= if");
		RESULT=sentencia;                              
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sent ::= for 
            {
              NodoBase RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase sentencia = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: sent ::= for");
		RESULT=sentencia;                              
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sent ::= asignacionVector 
            {
              NodoBase RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase sentencia = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: sent ::= asignacionVector");
		RESULT=sentencia;                              
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sent ::= asignacion 
            {
              NodoBase RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase sentencia = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: sent ::= asignacion");
		RESULT=sentencia;                              
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sent ::= DIM declaracionesVector 
            {
              NodoBase RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase sentencia = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: sent ::= declaracion");
		RESULT = sentencia;                              
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sent ::= DIM declaraciones 
            {
              NodoBase RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase sentencia = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: sent ::= declaracion");
		RESULT = sentencia;                              
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sent ::= print 
            {
              NodoBase RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase sentencia = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: sent ::= print");
		RESULT = sentencia;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // seq_sent ::= sent 
            {
              NodoBase RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase sentencia = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: seq_sent ::= Una Sentencia");
		RESULT = sentencia;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_sent",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // seq_sent ::= seq_sent LINEANUEVA sent 
            {
              NodoBase RESULT =null;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase sentencias = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase sentencia = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: seq_sent ::= Varias Sentencias");
		NodoBase hijoActual = sentencias;
		if(hijoActual !=null){
			while(hijoActual.tieneHermano()){
				hijoActual = hijoActual.getHermanoDerecha();
			}
			hijoActual.setHermanoDerecha(sentencia);
			RESULT = sentencias;
		}else{
			RESULT = sentencia;
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_sent",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= seq_sent LINEANUEVA 
            {
              NodoBase RESULT =null;
		int progleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int progright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoBase prog = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		if(debug)
			System.out.println("\t Regla: programa ::= seq_sent LINEANUEVA");
		root = prog;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoBase start_val = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa ::= seq_sent 
            {
              NodoBase RESULT =null;
		int progleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int progright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase prog = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: programa ::= seq_sent");
		root = prog;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

