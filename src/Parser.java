
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Nov 02 14:06:30 VET 2011
//----------------------------------------------------

import java_cup.runtime.*;
import ast.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Nov 02 14:06:30 VET 2011
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\125\000\002\002\005\000\002\002\004\000\002\002" +
    "\007\000\002\002\011\000\002\002\003\000\002\002\003" +
    "\000\002\004\005\000\002\004\003\000\002\003\014\000" +
    "\002\005\003\000\002\005\002\000\002\006\003\000\002" +
    "\006\003\000\002\006\005\000\002\006\005\000\002\007" +
    "\003\000\002\007\002\000\002\010\005\000\002\010\003" +
    "\000\002\011\005\000\002\011\003\000\002\012\003\000" +
    "\002\012\004\000\002\012\004\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\004\000\002\012\007" +
    "\000\002\012\006\000\002\013\005\000\002\013\003\000" +
    "\002\014\005\000\002\014\005\000\002\014\005\000\002" +
    "\015\005\000\002\015\003\000\002\016\010\000\002\016" +
    "\010\000\002\016\010\000\002\017\005\000\002\017\005" +
    "\000\002\020\010\000\002\020\010\000\002\021\003\000" +
    "\002\021\003\000\002\021\006\000\002\021\005\000\002" +
    "\021\005\000\002\021\005\000\002\021\005\000\002\021" +
    "\005\000\002\021\005\000\002\021\004\000\002\021\005" +
    "\000\002\022\004\000\002\022\005\000\002\023\005\000" +
    "\002\023\003\000\002\024\003\000\002\024\003\000\002" +
    "\025\015\000\002\025\017\000\002\027\003\000\002\027" +
    "\005\000\002\027\005\000\002\027\004\000\002\027\005" +
    "\000\002\026\005\000\002\026\005\000\002\026\005\000" +
    "\002\026\005\000\002\026\005\000\002\026\005\000\002" +
    "\030\011\000\002\030\015\000\002\031\010\000\002\032" +
    "\011\000\002\033\003\000\002\033\002\000\002\034\004" +
    "\000\002\034\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\266\000\030\002\uffaf\003\006\006\uffaf\007\uffaf\032" +
    "\uffaf\035\uffaf\036\uffaf\052\uffaf\056\uffaf\060\uffaf\063\005" +
    "\001\002\000\044\002\uffb0\004\uffb0\005\uffb0\006\uffb0\007" +
    "\uffb0\032\uffb0\035\uffb0\036\uffb0\041\uffb0\052\uffb0\054\uffb0" +
    "\055\uffb0\056\uffb0\057\uffb0\060\uffb0\061\uffb0\063\270\001" +
    "\002\000\044\002\uffad\004\uffad\005\uffad\006\uffad\007\uffad" +
    "\032\uffad\035\uffad\036\uffad\041\uffad\052\uffad\054\uffad\055" +
    "\uffad\056\uffad\057\uffad\060\uffad\061\uffad\063\uffad\001\002" +
    "\000\004\002\ufffc\001\002\000\004\002\267\001\002\000" +
    "\024\002\ufffd\006\013\007\031\032\027\035\022\036\015" +
    "\052\024\056\014\060\030\001\002\000\042\002\uffe6\004" +
    "\uffe6\006\uffe6\007\uffe6\032\uffe6\035\uffe6\036\uffe6\041\uffe6" +
    "\052\uffe6\054\uffe6\055\uffe6\056\uffe6\057\uffe6\060\uffe6\061" +
    "\uffe6\063\uffe6\001\002\000\042\002\uffec\004\uffec\006\uffec" +
    "\007\uffec\032\uffec\035\uffec\036\uffec\041\uffec\052\uffec\054" +
    "\uffec\055\uffec\056\uffec\057\uffec\060\uffec\061\uffec\063\uffec" +
    "\001\002\000\004\007\200\001\002\000\016\007\044\016" +
    "\041\020\036\025\113\033\035\051\112\001\002\000\004" +
    "\007\227\001\002\000\030\002\uffaf\004\uffaf\006\uffaf\007" +
    "\uffaf\032\uffaf\035\uffaf\036\uffaf\052\uffaf\056\uffaf\060\uffaf" +
    "\063\005\001\002\000\042\002\uffe8\004\uffe8\006\uffe8\007" +
    "\uffe8\032\uffe8\035\uffe8\036\uffe8\041\uffe8\052\uffe8\054\uffe8" +
    "\055\uffe8\056\uffe8\057\uffe8\060\uffe8\061\uffe8\063\uffe8\001" +
    "\002\000\042\002\uffe4\004\uffe4\006\uffe4\007\uffe4\032\uffe4" +
    "\035\uffe4\036\uffe4\041\uffe4\052\uffe4\054\uffe4\055\uffe4\056" +
    "\uffe4\057\uffe4\060\uffe4\061\uffe4\063\uffe4\001\002\000\042" +
    "\002\uffe5\004\uffe5\006\uffe5\007\uffe5\032\uffe5\035\uffe5\036" +
    "\uffe5\041\uffe5\052\uffe5\054\uffe5\055\uffe5\056\uffe5\057\uffe5" +
    "\060\uffe5\061\uffe5\063\uffe5\001\002\000\004\007\160\001" +
    "\002\000\042\002\uffe9\004\uffe9\006\uffe9\007\uffe9\032\uffe9" +
    "\035\uffe9\036\uffe9\041\uffe9\052\uffe9\054\uffe9\055\uffe9\056" +
    "\uffe9\057\uffe9\060\uffe9\061\uffe9\063\uffe9\001\002\000\016" +
    "\007\044\016\041\020\036\025\113\033\035\051\112\001" +
    "\002\000\042\002\uffe7\004\uffe7\006\uffe7\007\uffe7\032\uffe7" +
    "\035\uffe7\036\uffe7\041\uffe7\052\uffe7\054\uffe7\055\uffe7\056" +
    "\uffe7\057\uffe7\060\uffe7\061\uffe7\063\uffe7\001\002\000\042" +
    "\002\uffed\004\uffed\006\uffed\007\uffed\032\uffed\035\uffed\036" +
    "\uffed\041\uffed\052\uffed\054\uffed\055\uffed\056\uffed\057\uffed" +
    "\060\uffed\061\uffed\063\uffed\001\002\000\014\007\044\016" +
    "\041\020\036\025\043\033\035\001\002\000\024\006\uffaf" +
    "\007\uffaf\032\uffaf\035\uffaf\036\uffaf\052\uffaf\056\uffaf\060" +
    "\uffaf\063\005\001\002\000\010\015\032\025\034\027\033" +
    "\001\002\000\014\007\044\016\041\020\036\025\043\033" +
    "\100\001\002\000\012\007\044\016\041\020\036\025\043" +
    "\001\002\000\016\007\044\016\041\020\036\025\043\026" +
    "\ufff1\033\035\001\002\000\072\002\uffc3\004\uffc3\006\uffc3" +
    "\007\uffc3\014\uffc3\015\uffc3\026\uffc3\032\uffc3\034\uffc3\035" +
    "\uffc3\036\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3" +
    "\046\uffc3\047\uffc3\050\uffc3\052\uffc3\053\uffc3\054\uffc3\055" +
    "\uffc3\056\uffc3\057\uffc3\060\uffc3\061\uffc3\063\uffc3\001\002" +
    "\000\012\007\044\016\041\020\036\025\043\001\002\000" +
    "\006\014\070\026\ufff2\001\002\000\004\026\067\001\002" +
    "\000\114\002\uffd2\004\uffd2\006\uffd2\007\uffd2\014\uffd2\015" +
    "\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2" +
    "\026\uffd2\030\uffd2\032\uffd2\034\uffd2\035\uffd2\036\uffd2\037" +
    "\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2" +
    "\046\uffd2\047\uffd2\050\uffd2\052\uffd2\053\uffd2\054\uffd2\055" +
    "\uffd2\056\uffd2\057\uffd2\060\uffd2\061\uffd2\063\uffd2\001\002" +
    "\000\106\002\uffc2\004\uffc2\006\uffc2\007\uffc2\014\uffc2\015" +
    "\uffc2\017\054\020\056\021\052\022\055\023\053\024\051" +
    "\026\uffc2\032\uffc2\034\uffc2\035\uffc2\036\uffc2\041\uffc2\042" +
    "\uffc2\043\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2" +
    "\052\uffc2\053\uffc2\054\uffc2\055\uffc2\056\uffc2\057\uffc2\060" +
    "\uffc2\061\uffc2\063\uffc2\001\002\000\012\007\044\016\041" +
    "\020\036\025\043\001\002\000\116\002\uffd1\004\uffd1\006" +
    "\uffd1\007\uffd1\014\uffd1\015\uffd1\017\uffd1\020\uffd1\021\uffd1" +
    "\022\uffd1\023\uffd1\024\uffd1\026\uffd1\027\046\030\uffd1\032" +
    "\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1" +
    "\042\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1\050" +
    "\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1\056\uffd1\057\uffd1" +
    "\060\uffd1\061\uffd1\063\uffd1\001\002\000\006\014\uffef\026" +
    "\uffef\001\002\000\012\007\044\016\041\020\036\025\043" +
    "\001\002\000\020\017\054\020\056\021\052\022\055\023" +
    "\053\024\051\030\050\001\002\000\114\002\uffd0\004\uffd0" +
    "\006\uffd0\007\uffd0\014\uffd0\015\uffd0\017\uffd0\020\uffd0\021" +
    "\uffd0\022\uffd0\023\uffd0\024\uffd0\026\uffd0\030\uffd0\032\uffd0" +
    "\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\042" +
    "\uffd0\043\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0" +
    "\052\uffd0\053\uffd0\054\uffd0\055\uffd0\056\uffd0\057\uffd0\060" +
    "\uffd0\061\uffd0\063\uffd0\001\002\000\012\007\044\016\041" +
    "\020\036\025\043\001\002\000\012\007\044\016\041\020" +
    "\036\025\043\001\002\000\012\007\044\016\041\020\036" +
    "\025\043\001\002\000\012\007\044\016\041\020\036\025" +
    "\043\001\002\000\012\007\044\016\041\020\036\025\043" +
    "\001\002\000\012\007\044\016\041\020\036\025\043\001" +
    "\002\000\114\002\uffce\004\uffce\006\uffce\007\uffce\014\uffce" +
    "\015\uffce\017\uffce\020\uffce\021\052\022\055\023\053\024" +
    "\051\026\uffce\030\uffce\032\uffce\034\uffce\035\uffce\036\uffce" +
    "\037\uffce\040\uffce\041\uffce\042\uffce\043\uffce\044\uffce\045" +
    "\uffce\046\uffce\047\uffce\050\uffce\052\uffce\053\uffce\054\uffce" +
    "\055\uffce\056\uffce\057\uffce\060\uffce\061\uffce\063\uffce\001" +
    "\002\000\114\002\uffcc\004\uffcc\006\uffcc\007\uffcc\014\uffcc" +
    "\015\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023\053\024" +
    "\uffcc\026\uffcc\030\uffcc\032\uffcc\034\uffcc\035\uffcc\036\uffcc" +
    "\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045" +
    "\uffcc\046\uffcc\047\uffcc\050\uffcc\052\uffcc\053\uffcc\054\uffcc" +
    "\055\uffcc\056\uffcc\057\uffcc\060\uffcc\061\uffcc\063\uffcc\001" +
    "\002\000\114\002\uffcf\004\uffcf\006\uffcf\007\uffcf\014\uffcf" +
    "\015\uffcf\017\uffcf\020\uffcf\021\052\022\055\023\053\024" +
    "\051\026\uffcf\030\uffcf\032\uffcf\034\uffcf\035\uffcf\036\uffcf" +
    "\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\045" +
    "\uffcf\046\uffcf\047\uffcf\050\uffcf\052\uffcf\053\uffcf\054\uffcf" +
    "\055\uffcf\056\uffcf\057\uffcf\060\uffcf\061\uffcf\063\uffcf\001" +
    "\002\000\114\002\uffca\004\uffca\006\uffca\007\uffca\014\uffca" +
    "\015\uffca\017\uffca\020\uffca\021\uffca\022\uffca\023\053\024" +
    "\uffca\026\uffca\030\uffca\032\uffca\034\uffca\035\uffca\036\uffca" +
    "\037\uffca\040\uffca\041\uffca\042\uffca\043\uffca\044\uffca\045" +
    "\uffca\046\uffca\047\uffca\050\uffca\052\uffca\053\uffca\054\uffca" +
    "\055\uffca\056\uffca\057\uffca\060\uffca\061\uffca\063\uffca\001" +
    "\002\000\114\002\uffcd\004\uffcd\006\uffcd\007\uffcd\014\uffcd" +
    "\015\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd\023\053\024" +
    "\uffcd\026\uffcd\030\uffcd\032\uffcd\034\uffcd\035\uffcd\036\uffcd" +
    "\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045" +
    "\uffcd\046\uffcd\047\uffcd\050\uffcd\052\uffcd\053\uffcd\054\uffcd" +
    "\055\uffcd\056\uffcd\057\uffcd\060\uffcd\061\uffcd\063\uffcd\001" +
    "\002\000\114\002\uffcb\004\uffcb\006\uffcb\007\uffcb\014\uffcb" +
    "\015\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023\053\024" +
    "\uffcb\026\uffcb\030\uffcb\032\uffcb\034\uffcb\035\uffcb\036\uffcb" +
    "\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045" +
    "\uffcb\046\uffcb\047\uffcb\050\uffcb\052\uffcb\053\uffcb\054\uffcb" +
    "\055\uffcb\056\uffcb\057\uffcb\060\uffcb\061\uffcb\063\uffcb\001" +
    "\002\000\020\017\054\020\056\021\052\022\055\023\053" +
    "\024\051\026\066\001\002\000\114\002\uffc8\004\uffc8\006" +
    "\uffc8\007\uffc8\014\uffc8\015\uffc8\017\uffc8\020\uffc8\021\uffc8" +
    "\022\uffc8\023\uffc8\024\uffc8\026\uffc8\030\uffc8\032\uffc8\034" +
    "\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8" +
    "\043\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8\052" +
    "\uffc8\053\uffc8\054\uffc8\055\uffc8\056\uffc8\057\uffc8\060\uffc8" +
    "\061\uffc8\063\uffc8\001\002\000\042\002\uffe1\004\uffe1\006" +
    "\uffe1\007\uffe1\032\uffe1\035\uffe1\036\uffe1\041\uffe1\052\uffe1" +
    "\054\uffe1\055\uffe1\056\uffe1\057\uffe1\060\uffe1\061\uffe1\063" +
    "\uffe1\001\002\000\014\007\044\016\041\020\036\025\043" +
    "\033\035\001\002\000\006\014\ufff0\026\ufff0\001\002\000" +
    "\114\002\uffc9\004\uffc9\006\uffc9\007\uffc9\014\uffc9\015\uffc9" +
    "\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023\053\024\uffc9\026" +
    "\uffc9\030\uffc9\032\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9" +
    "\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9\046" +
    "\uffc9\047\uffc9\050\uffc9\052\uffc9\053\uffc9\054\uffc9\055\uffc9" +
    "\056\uffc9\057\uffc9\060\uffc9\061\uffc9\063\uffc9\001\002\000" +
    "\020\017\054\020\056\021\052\022\055\023\053\024\051" +
    "\030\074\001\002\000\004\015\075\001\002\000\014\007" +
    "\044\016\041\020\036\025\043\033\076\001\002\000\042" +
    "\002\uffd3\004\uffd3\006\uffd3\007\uffd3\032\uffd3\035\uffd3\036" +
    "\uffd3\041\uffd3\052\uffd3\054\uffd3\055\uffd3\056\uffd3\057\uffd3" +
    "\060\uffd3\061\uffd3\063\uffd3\001\002\000\056\002\uffd4\004" +
    "\uffd4\006\uffd4\007\uffd4\017\054\020\056\021\052\022\055" +
    "\023\053\024\051\032\uffd4\035\uffd4\036\uffd4\041\uffd4\052" +
    "\uffd4\054\uffd4\055\uffd4\056\uffd4\057\uffd4\060\uffd4\061\uffd4" +
    "\063\uffd4\001\002\000\042\002\uffd5\004\uffd5\006\uffd5\007" +
    "\uffd5\032\uffd5\035\uffd5\036\uffd5\041\uffd5\052\uffd5\054\uffd5" +
    "\055\uffd5\056\uffd5\057\uffd5\060\uffd5\061\uffd5\063\uffd5\001" +
    "\002\000\056\002\uffd6\004\uffd6\006\uffd6\007\uffd6\017\054" +
    "\020\056\021\052\022\055\023\053\024\051\032\uffd6\035" +
    "\uffd6\036\uffd6\041\uffd6\052\uffd6\054\uffd6\055\uffd6\056\uffd6" +
    "\057\uffd6\060\uffd6\061\uffd6\063\uffd6\001\002\000\022\006" +
    "\013\007\031\032\027\035\022\036\015\052\024\056\014" +
    "\060\030\001\002\000\026\006\uffaf\007\uffaf\032\uffaf\035" +
    "\uffaf\036\uffaf\052\uffaf\056\uffaf\060\uffaf\061\uffaf\063\005" +
    "\001\002\000\024\006\013\007\031\032\027\035\022\036" +
    "\015\052\024\056\014\060\030\061\105\001\002\000\004" +
    "\062\107\001\002\000\042\002\uffee\004\uffee\006\uffee\007" +
    "\uffee\032\uffee\035\uffee\036\uffee\041\uffee\052\uffee\054\uffee" +
    "\055\uffee\056\uffee\057\uffee\060\uffee\061\uffee\063\uffee\001" +
    "\002\000\016\007\044\016\041\020\036\025\113\033\035" +
    "\051\112\001\002\000\046\002\uffb1\004\uffb1\006\uffb1\007" +
    "\uffb1\032\uffb1\035\uffb1\036\uffb1\041\uffb1\047\133\050\135" +
    "\052\uffb1\054\uffb1\055\uffb1\056\uffb1\057\uffb1\060\uffb1\061" +
    "\uffb1\063\uffb1\001\002\000\052\002\uffbf\004\uffbf\006\uffbf" +
    "\007\uffbf\026\uffbf\032\uffbf\035\uffbf\036\uffbf\041\uffbf\047" +
    "\uffbf\050\uffbf\052\uffbf\053\uffbf\054\uffbf\055\uffbf\056\uffbf" +
    "\057\uffbf\060\uffbf\061\uffbf\063\uffbf\001\002\000\016\007" +
    "\044\016\041\020\036\025\113\033\035\051\112\001\002" +
    "\000\016\007\044\016\041\020\036\025\113\033\035\051" +
    "\112\001\002\000\016\015\117\042\116\043\121\044\115" +
    "\045\122\046\120\001\002\000\014\007\044\016\041\020" +
    "\036\025\043\033\035\001\002\000\014\007\044\016\041" +
    "\020\036\025\043\033\035\001\002\000\014\007\044\016" +
    "\041\020\036\025\043\033\035\001\002\000\014\007\044" +
    "\016\041\020\036\025\043\033\035\001\002\000\014\007" +
    "\044\016\041\020\036\025\043\033\035\001\002\000\014" +
    "\007\044\016\041\020\036\025\043\033\035\001\002\000" +
    "\052\002\uffb7\004\uffb7\006\uffb7\007\uffb7\026\uffb7\032\uffb7" +
    "\035\uffb7\036\uffb7\041\uffb7\047\uffb7\050\uffb7\052\uffb7\053" +
    "\uffb7\054\uffb7\055\uffb7\056\uffb7\057\uffb7\060\uffb7\061\uffb7" +
    "\063\uffb7\001\002\000\052\002\uffb9\004\uffb9\006\uffb9\007" +
    "\uffb9\026\uffb9\032\uffb9\035\uffb9\036\uffb9\041\uffb9\047\uffb9" +
    "\050\uffb9\052\uffb9\053\uffb9\054\uffb9\055\uffb9\056\uffb9\057" +
    "\uffb9\060\uffb9\061\uffb9\063\uffb9\001\002\000\052\002\uffb5" +
    "\004\uffb5\006\uffb5\007\uffb5\026\uffb5\032\uffb5\035\uffb5\036" +
    "\uffb5\041\uffb5\047\uffb5\050\uffb5\052\uffb5\053\uffb5\054\uffb5" +
    "\055\uffb5\056\uffb5\057\uffb5\060\uffb5\061\uffb5\063\uffb5\001" +
    "\002\000\052\002\uffba\004\uffba\006\uffba\007\uffba\026\uffba" +
    "\032\uffba\035\uffba\036\uffba\041\uffba\047\uffba\050\uffba\052" +
    "\uffba\053\uffba\054\uffba\055\uffba\056\uffba\057\uffba\060\uffba" +
    "\061\uffba\063\uffba\001\002\000\052\002\uffb8\004\uffb8\006" +
    "\uffb8\007\uffb8\026\uffb8\032\uffb8\035\uffb8\036\uffb8\041\uffb8" +
    "\047\uffb8\050\uffb8\052\uffb8\053\uffb8\054\uffb8\055\uffb8\056" +
    "\uffb8\057\uffb8\060\uffb8\061\uffb8\063\uffb8\001\002\000\052" +
    "\002\uffb6\004\uffb6\006\uffb6\007\uffb6\026\uffb6\032\uffb6\035" +
    "\uffb6\036\uffb6\041\uffb6\047\uffb6\050\uffb6\052\uffb6\053\uffb6" +
    "\054\uffb6\055\uffb6\056\uffb6\057\uffb6\060\uffb6\061\uffb6\063" +
    "\uffb6\001\002\000\010\026\134\047\133\050\135\001\002" +
    "\000\034\015\uffc2\017\054\020\056\021\052\022\055\023" +
    "\053\024\051\026\066\042\uffc2\043\uffc2\044\uffc2\045\uffc2" +
    "\046\uffc2\001\002\000\016\007\044\016\041\020\036\025" +
    "\113\033\035\051\112\001\002\000\052\002\uffbb\004\uffbb" +
    "\006\uffbb\007\uffbb\026\uffbb\032\uffbb\035\uffbb\036\uffbb\041" +
    "\uffbb\047\uffbb\050\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb" +
    "\056\uffbb\057\uffbb\060\uffbb\061\uffbb\063\uffbb\001\002\000" +
    "\016\007\044\016\041\020\036\025\113\033\035\051\112" +
    "\001\002\000\052\002\uffbd\004\uffbd\006\uffbd\007\uffbd\026" +
    "\uffbd\032\uffbd\035\uffbd\036\uffbd\041\uffbd\047\uffbd\050\uffbd" +
    "\052\uffbd\053\uffbd\054\uffbd\055\uffbd\056\uffbd\057\uffbd\060" +
    "\uffbd\061\uffbd\063\uffbd\001\002\000\052\002\uffbe\004\uffbe" +
    "\006\uffbe\007\uffbe\026\uffbe\032\uffbe\035\uffbe\036\uffbe\041" +
    "\uffbe\047\uffbe\050\uffbe\052\uffbe\053\uffbe\054\uffbe\055\uffbe" +
    "\056\uffbe\057\uffbe\060\uffbe\061\uffbe\063\uffbe\001\002\000" +
    "\052\002\uffbc\004\uffbc\006\uffbc\007\uffbc\026\uffbc\032\uffbc" +
    "\035\uffbc\036\uffbc\041\uffbc\047\uffbc\050\uffbc\052\uffbc\053" +
    "\uffbc\054\uffbc\055\uffbc\056\uffbc\057\uffbc\060\uffbc\061\uffbc" +
    "\063\uffbc\001\002\000\044\002\uffc7\004\uffc7\006\uffc7\007" +
    "\uffc7\032\uffc7\034\143\035\uffc7\036\uffc7\041\uffc7\052\uffc7" +
    "\054\uffc7\055\uffc7\056\uffc7\057\uffc7\060\uffc7\061\uffc7\063" +
    "\uffc7\001\002\000\044\002\uffc4\004\uffc4\006\uffc4\007\uffc4" +
    "\032\uffc4\034\uffc4\035\uffc4\036\uffc4\041\uffc4\052\uffc4\054" +
    "\uffc4\055\uffc4\056\uffc4\057\uffc4\060\uffc4\061\uffc4\063\uffc4" +
    "\001\002\000\052\002\uffc6\004\uffc6\006\uffc6\007\044\016" +
    "\041\020\036\025\043\032\uffc6\033\035\035\uffc6\036\uffc6" +
    "\041\uffc6\052\uffc6\054\uffc6\055\uffc6\056\uffc6\057\uffc6\060" +
    "\uffc6\061\uffc6\063\uffc6\001\002\000\044\002\uffc5\004\uffc5" +
    "\006\uffc5\007\uffc5\032\uffc5\034\uffc5\035\uffc5\036\uffc5\041" +
    "\uffc5\052\uffc5\054\uffc5\055\uffc5\056\uffc5\057\uffc5\060\uffc5" +
    "\061\uffc5\063\uffc5\001\002\000\010\047\133\050\135\053" +
    "\146\001\002\000\024\006\uffaf\007\uffaf\032\uffaf\035\uffaf" +
    "\036\uffaf\052\uffaf\056\uffaf\060\uffaf\063\005\001\002\000" +
    "\022\006\013\007\031\032\027\035\022\036\015\052\024" +
    "\056\014\060\030\001\002\000\030\006\uffaf\007\uffaf\032" +
    "\uffaf\035\uffaf\036\uffaf\052\uffaf\054\uffaf\055\uffaf\056\uffaf" +
    "\060\uffaf\063\005\001\002\000\026\006\013\007\031\032" +
    "\027\035\022\036\015\052\024\054\152\055\153\056\014" +
    "\060\030\001\002\000\024\006\uffaf\007\uffaf\032\uffaf\035" +
    "\uffaf\036\uffaf\052\uffaf\056\uffaf\060\uffaf\063\005\001\002" +
    "\000\042\002\uffb4\004\uffb4\006\uffb4\007\uffb4\032\uffb4\035" +
    "\uffb4\036\uffb4\041\uffb4\052\uffb4\054\uffb4\055\uffb4\056\uffb4" +
    "\057\uffb4\060\uffb4\061\uffb4\063\uffb4\001\002\000\022\006" +
    "\013\007\031\032\027\035\022\036\015\052\024\056\014" +
    "\060\030\001\002\000\026\006\uffaf\007\uffaf\032\uffaf\035" +
    "\uffaf\036\uffaf\052\uffaf\055\uffaf\056\uffaf\060\uffaf\063\005" +
    "\001\002\000\024\006\013\007\031\032\027\035\022\036" +
    "\015\052\024\055\157\056\014\060\030\001\002\000\042" +
    "\002\uffb3\004\uffb3\006\uffb3\007\uffb3\032\uffb3\035\uffb3\036" +
    "\uffb3\041\uffb3\052\uffb3\054\uffb3\055\uffb3\056\uffb3\057\uffb3" +
    "\060\uffb3\061\uffb3\063\uffb3\001\002\000\044\002\uffe3\004" +
    "\uffe3\006\uffe3\007\uffe3\027\161\032\uffe3\035\uffe3\036\uffe3" +
    "\041\uffe3\052\uffe3\054\uffe3\055\uffe3\056\uffe3\057\uffe3\060" +
    "\uffe3\061\uffe3\063\uffe3\001\002\000\012\007\044\016\041" +
    "\020\036\025\043\001\002\000\020\017\054\020\056\021" +
    "\052\022\055\023\053\024\051\030\163\001\002\000\042" +
    "\002\uffe2\004\uffe2\006\uffe2\007\uffe2\032\uffe2\035\uffe2\036" +
    "\uffe2\041\uffe2\052\uffe2\054\uffe2\055\uffe2\056\uffe2\057\uffe2" +
    "\060\uffe2\061\uffe2\063\uffe2\001\002\000\026\002\001\004" +
    "\165\006\013\007\031\032\027\035\022\036\015\052\024" +
    "\056\014\060\030\001\002\000\010\002\uffaf\005\uffaf\063" +
    "\005\001\002\000\006\002\uffff\005\167\001\002\000\004" +
    "\007\174\001\002\000\010\002\ufffa\005\ufffa\063\ufffa\001" +
    "\002\000\010\002\uffaf\005\uffaf\063\005\001\002\000\006" +
    "\002\ufffe\005\167\001\002\000\010\002\ufffb\005\ufffb\063" +
    "\ufffb\001\002\000\004\025\175\001\002\000\006\007\200" +
    "\026\ufff7\001\002\000\006\014\ufff5\026\ufff5\001\002\000" +
    "\004\026\221\001\002\000\006\010\206\027\207\001\002" +
    "\000\006\014\ufff6\026\ufff6\001\002\000\006\014\203\026" +
    "\ufff8\001\002\000\004\007\200\001\002\000\006\014\ufff3" +
    "\026\ufff3\001\002\000\006\014\ufff4\026\ufff4\001\002\000" +
    "\010\011\216\012\220\013\217\001\002\000\012\007\044" +
    "\016\041\020\036\025\043\001\002\000\020\017\054\020" +
    "\056\021\052\022\055\023\053\024\051\030\211\001\002" +
    "\000\004\010\212\001\002\000\010\011\213\012\215\013" +
    "\214\001\002\000\046\002\uffd9\004\uffd9\006\uffd9\007\uffd9" +
    "\014\uffd9\026\uffd9\032\uffd9\035\uffd9\036\uffd9\041\uffd9\052" +
    "\uffd9\054\uffd9\055\uffd9\056\uffd9\057\uffd9\060\uffd9\061\uffd9" +
    "\063\uffd9\001\002\000\046\002\uffd7\004\uffd7\006\uffd7\007" +
    "\uffd7\014\uffd7\026\uffd7\032\uffd7\035\uffd7\036\uffd7\041\uffd7" +
    "\052\uffd7\054\uffd7\055\uffd7\056\uffd7\057\uffd7\060\uffd7\061" +
    "\uffd7\063\uffd7\001\002\000\046\002\uffd8\004\uffd8\006\uffd8" +
    "\007\uffd8\014\uffd8\026\uffd8\032\uffd8\035\uffd8\036\uffd8\041" +
    "\uffd8\052\uffd8\054\uffd8\055\uffd8\056\uffd8\057\uffd8\060\uffd8" +
    "\061\uffd8\063\uffd8\001\002\000\046\002\uffde\004\uffde\006" +
    "\uffde\007\uffde\014\uffde\026\uffde\032\uffde\035\uffde\036\uffde" +
    "\041\uffde\052\uffde\054\uffde\055\uffde\056\uffde\057\uffde\060" +
    "\uffde\061\uffde\063\uffde\001\002\000\046\002\uffdc\004\uffdc" +
    "\006\uffdc\007\uffdc\014\uffdc\026\uffdc\032\uffdc\035\uffdc\036" +
    "\uffdc\041\uffdc\052\uffdc\054\uffdc\055\uffdc\056\uffdc\057\uffdc" +
    "\060\uffdc\061\uffdc\063\uffdc\001\002\000\046\002\uffdd\004" +
    "\uffdd\006\uffdd\007\uffdd\014\uffdd\026\uffdd\032\uffdd\035\uffdd" +
    "\036\uffdd\041\uffdd\052\uffdd\054\uffdd\055\uffdd\056\uffdd\057" +
    "\uffdd\060\uffdd\061\uffdd\063\uffdd\001\002\000\024\006\uffaf" +
    "\007\uffaf\032\uffaf\035\uffaf\036\uffaf\052\uffaf\056\uffaf\060" +
    "\uffaf\063\005\001\002\000\022\006\013\007\031\032\027" +
    "\035\022\036\015\052\024\056\014\060\030\001\002\000" +
    "\026\004\uffaf\006\uffaf\007\uffaf\032\uffaf\035\uffaf\036\uffaf" +
    "\052\uffaf\056\uffaf\060\uffaf\063\005\001\002\000\024\004" +
    "\225\006\013\007\031\032\027\035\022\036\015\052\024" +
    "\056\014\060\030\001\002\000\004\005\226\001\002\000" +
    "\010\002\ufff9\005\ufff9\063\ufff9\001\002\000\004\015\230" +
    "\001\002\000\012\007\044\016\041\020\036\025\043\001" +
    "\002\000\020\017\054\020\056\021\052\022\055\023\053" +
    "\024\051\037\232\001\002\000\012\007\044\016\041\020" +
    "\036\025\043\001\002\000\042\006\uffaf\007\uffaf\017\054" +
    "\020\056\021\052\022\055\023\053\024\051\032\uffaf\035" +
    "\uffaf\036\uffaf\040\234\052\uffaf\056\uffaf\060\uffaf\063\005" +
    "\001\002\000\012\007\044\016\041\020\036\025\043\001" +
    "\002\000\022\006\013\007\031\032\027\035\022\036\015" +
    "\052\024\056\014\060\030\001\002\000\026\006\uffaf\007" +
    "\uffaf\032\uffaf\035\uffaf\036\uffaf\041\uffaf\052\uffaf\056\uffaf" +
    "\060\uffaf\063\005\001\002\000\024\006\013\007\031\032" +
    "\027\035\022\036\015\041\240\052\024\056\014\060\030" +
    "\001\002\000\004\007\241\001\002\000\042\002\uffc1\004" +
    "\uffc1\006\uffc1\007\uffc1\032\uffc1\035\uffc1\036\uffc1\041\uffc1" +
    "\052\uffc1\054\uffc1\055\uffc1\056\uffc1\057\uffc1\060\uffc1\061" +
    "\uffc1\063\uffc1\001\002\000\040\006\uffaf\007\uffaf\017\054" +
    "\020\056\021\052\022\055\023\053\024\051\032\uffaf\035" +
    "\uffaf\036\uffaf\052\uffaf\056\uffaf\060\uffaf\063\005\001\002" +
    "\000\022\006\013\007\031\032\027\035\022\036\015\052" +
    "\024\056\014\060\030\001\002\000\026\006\uffaf\007\uffaf" +
    "\032\uffaf\035\uffaf\036\uffaf\041\uffaf\052\uffaf\056\uffaf\060" +
    "\uffaf\063\005\001\002\000\024\006\013\007\031\032\027" +
    "\035\022\036\015\041\246\052\024\056\014\060\030\001" +
    "\002\000\004\007\247\001\002\000\042\002\uffc0\004\uffc0" +
    "\006\uffc0\007\uffc0\032\uffc0\035\uffc0\036\uffc0\041\uffc0\052" +
    "\uffc0\054\uffc0\055\uffc0\056\uffc0\057\uffc0\060\uffc0\061\uffc0" +
    "\063\uffc0\001\002\000\030\006\uffaf\007\uffaf\032\uffaf\035" +
    "\uffaf\036\uffaf\047\133\050\135\052\uffaf\056\uffaf\060\uffaf" +
    "\063\005\001\002\000\022\006\013\007\031\032\027\035" +
    "\022\036\015\052\024\056\014\060\030\001\002\000\026" +
    "\006\uffaf\007\uffaf\032\uffaf\035\uffaf\036\uffaf\052\uffaf\056" +
    "\uffaf\057\uffaf\060\uffaf\063\005\001\002\000\024\006\013" +
    "\007\031\032\027\035\022\036\015\052\024\056\014\057" +
    "\254\060\030\001\002\000\042\002\uffb2\004\uffb2\006\uffb2" +
    "\007\uffb2\032\uffb2\035\uffb2\036\uffb2\041\uffb2\052\uffb2\054" +
    "\uffb2\055\uffb2\056\uffb2\057\uffb2\060\uffb2\061\uffb2\063\uffb2" +
    "\001\002\000\044\002\uffeb\004\uffeb\006\uffeb\007\uffeb\014" +
    "\264\032\uffeb\035\uffeb\036\uffeb\041\uffeb\052\uffeb\054\uffeb" +
    "\055\uffeb\056\uffeb\057\uffeb\060\uffeb\061\uffeb\063\uffeb\001" +
    "\002\000\044\002\uffda\004\uffda\006\uffda\007\uffda\014\uffda" +
    "\032\uffda\035\uffda\036\uffda\041\uffda\052\uffda\054\uffda\055" +
    "\uffda\056\uffda\057\uffda\060\uffda\061\uffda\063\uffda\001\002" +
    "\000\044\002\uffdf\004\uffdf\006\uffdf\007\uffdf\014\uffdf\032" +
    "\uffdf\035\uffdf\036\uffdf\041\uffdf\052\uffdf\054\uffdf\055\uffdf" +
    "\056\uffdf\057\uffdf\060\uffdf\061\uffdf\063\uffdf\001\002\000" +
    "\044\002\uffea\004\uffea\006\uffea\007\uffea\014\261\032\uffea" +
    "\035\uffea\036\uffea\041\uffea\052\uffea\054\uffea\055\uffea\056" +
    "\uffea\057\uffea\060\uffea\061\uffea\063\uffea\001\002\000\004" +
    "\007\263\001\002\000\044\002\uffdb\004\uffdb\006\uffdb\007" +
    "\uffdb\014\uffdb\032\uffdb\035\uffdb\036\uffdb\041\uffdb\052\uffdb" +
    "\054\uffdb\055\uffdb\056\uffdb\057\uffdb\060\uffdb\061\uffdb\063" +
    "\uffdb\001\002\000\004\027\207\001\002\000\004\007\265" +
    "\001\002\000\004\010\206\001\002\000\044\002\uffe0\004" +
    "\uffe0\006\uffe0\007\uffe0\014\uffe0\032\uffe0\035\uffe0\036\uffe0" +
    "\041\uffe0\052\uffe0\054\uffe0\055\uffe0\056\uffe0\057\uffe0\060" +
    "\uffe0\061\uffe0\063\uffe0\001\002\000\004\002\000\001\002" +
    "\000\044\002\uffae\004\uffae\005\uffae\006\uffae\007\uffae\032" +
    "\uffae\035\uffae\036\uffae\041\uffae\052\uffae\054\uffae\055\uffae" +
    "\056\uffae\057\uffae\060\uffae\061\uffae\063\uffae\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\266\000\010\002\006\033\007\034\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\011\015\012\025\017\022\020\016\022" +
    "\011\025\024\030\010\031\020\032\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\013\254\014\256\015" +
    "\257\016\255\001\001\000\012\021\041\024\113\026\110" +
    "\027\247\001\001\000\002\001\001\000\006\033\163\034" +
    "\003\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\021" +
    "\041\024\113\026\110\027\144\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\021\041\023\140\024\141\001" +
    "\001\000\006\033\101\034\003\001\001\000\002\001\001" +
    "\000\004\021\100\001\001\000\004\021\072\001\001\000" +
    "\012\007\037\010\036\021\041\024\044\001\001\000\002" +
    "\001\001\000\004\021\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\063\001\001\000\004\021\062\001\001\000" +
    "\004\021\061\001\001\000\004\021\060\001\001\000\004" +
    "\021\057\001\001\000\004\021\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\021\041\024\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\011\102\012\025\017\022\020\016\022\011" +
    "\025\024\030\010\031\020\032\017\001\001\000\006\033" +
    "\103\034\003\001\001\000\022\012\105\017\022\020\016" +
    "\022\011\025\024\030\010\031\020\032\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\021\041\024\113" +
    "\026\110\027\107\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\021\041\024\113\026\110\027\137\001\001" +
    "\000\012\021\131\024\113\026\110\027\130\001\001\000" +
    "\002\001\001\000\006\021\041\024\127\001\001\000\006" +
    "\021\041\024\126\001\001\000\006\021\041\024\125\001" +
    "\001\000\006\021\041\024\124\001\001\000\006\021\041" +
    "\024\123\001\001\000\006\021\041\024\122\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\021\041\024\113\026\110" +
    "\027\136\001\001\000\002\001\001\000\012\021\041\024" +
    "\113\026\110\027\135\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\021\041\024\143\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\033\146\034\003\001\001\000" +
    "\024\011\147\012\025\017\022\020\016\022\011\025\024" +
    "\030\010\031\020\032\017\001\001\000\006\033\150\034" +
    "\003\001\001\000\022\012\105\017\022\020\016\022\011" +
    "\025\024\030\010\031\020\032\017\001\001\000\006\033" +
    "\153\034\003\001\001\000\002\001\001\000\024\011\154" +
    "\012\025\017\022\020\016\022\011\025\024\030\010\031" +
    "\020\032\017\001\001\000\006\033\155\034\003\001\001" +
    "\000\022\012\105\017\022\020\016\022\011\025\024\030" +
    "\010\031\020\032\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\161\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\012\105\017\022\020\016\022\011" +
    "\025\024\030\010\031\020\032\017\001\001\000\006\033" +
    "\165\034\003\001\001\000\006\003\167\004\170\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\033\171\034" +
    "\003\001\001\000\004\003\172\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\005\176\006\201\014\200\016" +
    "\175\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\014" +
    "\204\016\203\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\207\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\033\221\034\003" +
    "\001\001\000\024\011\222\012\025\017\022\020\016\022" +
    "\011\025\024\030\010\031\020\032\017\001\001\000\006" +
    "\033\223\034\003\001\001\000\022\012\105\017\022\020" +
    "\016\022\011\025\024\030\010\031\020\032\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\230\001\001\000\002\001\001\000\004\021\232" +
    "\001\001\000\006\033\234\034\003\001\001\000\004\021" +
    "\241\001\001\000\024\011\235\012\025\017\022\020\016" +
    "\022\011\025\024\030\010\031\020\032\017\001\001\000" +
    "\006\033\236\034\003\001\001\000\022\012\105\017\022" +
    "\020\016\022\011\025\024\030\010\031\020\032\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\033\242" +
    "\034\003\001\001\000\024\011\243\012\025\017\022\020" +
    "\016\022\011\025\024\030\010\031\020\032\017\001\001" +
    "\000\006\033\244\034\003\001\001\000\022\012\105\017" +
    "\022\020\016\022\011\025\024\030\010\031\020\032\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\033" +
    "\250\034\003\001\001\000\024\011\251\012\025\017\022" +
    "\020\016\022\011\025\024\030\010\031\020\032\017\001" +
    "\001\000\006\033\252\034\003\001\001\000\022\012\105" +
    "\017\022\020\016\022\011\025\024\030\010\031\020\032" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\261\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\265\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


	private NodoBase root=null;
	private NodoBase funciones=null;
	private boolean debug=true;	
	private int lineaNum=0;

	public NodoBase getRoot(){
		return root;
	}
	
	public NodoBase getFunciones(){
		return funciones;
	}

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // lineas ::= LINEANUEVA 
            {
              NodoBase RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lineas",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // lineas ::= lineas LINEANUEVA 
            {
              NodoBase RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lineas",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // separar ::= 
            {
              NodoBase RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("separar",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // separar ::= lineas 
            {
              NodoBase RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("separar",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // do ::= DO separar seq_sent separar LOOP UNTIL expresionBool 
            {
              NodoBase RESULT =null;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		NodoBase cuerpo = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: if ::= IF SOLO");
		RESULT = new NodoDo(ex,cuerpo);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("do",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // while ::= WHILE expresionBool separar seq_sent separar WEND 
            {
              NodoWhile RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase cuerpo = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
		if(debug)
			System.out.println("\t Regla: if ::= IF SOLO");
		RESULT = new NodoWhile(ex,cuerpo);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // if ::= IF expresionBool THEN separar seq_sent separar ELSE separar seq_sent separar ENDIF 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int thenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int thenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		NodoBase then = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int else1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int else1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase else1 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
		if(debug)
			System.out.println("\t Regla: if ::= IF CON ELSE");
		RESULT = new NodoIf(ex, then, else1);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // if ::= IF expresionBool THEN separar seq_sent separar ENDIF 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int thenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int thenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase then = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
		if(debug)
			System.out.println("\t Regla: if ::= IF SOLO");
		RESULT = new NodoIf(ex, then);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // condicion ::= printValor DIFERENTE printValor 
            {
              NodoBase RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase e1 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase e2 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: condicion ::= DIFERENTE");
		RESULT = new NodoOperacionBool(e1,e2,Tipo.OpBool.DIFERENTE);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // condicion ::= printValor MAYORIGUAL printValor 
            {
              NodoBase RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase e1 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase e2 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: condicion ::= MAYORIGUAL");
		RESULT = new NodoOperacionBool(e1,e2,Tipo.OpBool.MAYORIGUAL);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // condicion ::= printValor MAYOR printValor 
            {
              NodoBase RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase e1 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase e2 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: condicion ::= MAYOR");
		RESULT = new NodoOperacionBool(e1,e2,Tipo.OpBool.MAYOR);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // condicion ::= printValor MENORIGUAL printValor 
            {
              NodoBase RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase e1 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase e2 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: condicion ::= MENORIGUAL");
		RESULT = new NodoOperacionBool(e1,e2,Tipo.OpBool.MENORIGUAL);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // condicion ::= printValor MENOR printValor 
            {
              NodoBase RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase e1 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase e2 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: condicion ::= MENOR");
		RESULT = new NodoOperacionBool(e1,e2,Tipo.OpBool.MENOR);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // condicion ::= printValor IGUAL printValor 
            {
              NodoBase RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase e1 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase e2 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: condicion ::= IGUAL");
		RESULT = new NodoOperacionBool(e1,e2,Tipo.OpBool.IGUAL);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expresionBool ::= LPARENT expresionBool RPARENT 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		if(debug)
			System.out.println("\t Regla: expresionBool ::= PARENTESIS ");
		RESULT = ex;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBool",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expresionBool ::= NOT expresionBool 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: expresionBool ::= NOT expresionBool");
		RESULT = new NodoOperacionBoolUnaria(ex);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBool",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expresionBool ::= expresionBool OR expresionBool 
            {
              NodoBase RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase c1 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase c2 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: expresionBool ::= expresionBool OR expresionBool ");
		RESULT = new NodoOperacionBoolLogica(c1,c2,Tipo.OpBoolLogica.OR);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBool",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expresionBool ::= expresionBool AND expresionBool 
            {
              NodoBase RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase c1 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase c2 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: expresionBool ::= expresionBool AND expresionBool ");
		RESULT = new NodoOperacionBoolLogica(c1,c2,Tipo.OpBoolLogica.AND);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBool",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expresionBool ::= condicion 
            {
              NodoBase RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase c = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: expresionBool ::= condicion");
		RESULT = c;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBool",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // for ::= FOR IDENTIFICADOR IGUAL expresion TO expresion STEP expresion separar seq_sent separar NEXT IDENTIFICADOR 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int desdeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int desderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		NodoBase desde = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int hastaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int hastaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		NodoBase hasta = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int stepleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int stepright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		NodoBase step = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodoBase cuerpo = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int variable2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int variable2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String variable2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: for ::= Todo el FOR");
		RESULT = new NodoFor(variable, desde, hasta, cuerpo, variable2, step);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // for ::= FOR IDENTIFICADOR IGUAL expresion TO expresion separar seq_sent separar NEXT IDENTIFICADOR 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int desdeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int desderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		NodoBase desde = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int hastaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int hastaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		NodoBase hasta = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodoBase cuerpo = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int variable2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int variable2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String variable2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: for ::= Todo el FOR");
		RESULT = new NodoFor(variable, desde, hasta, cuerpo, variable2);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // printValor ::= expresion 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: printValor ::= expresion");
		RESULT = ex;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("printValor",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // printValor ::= CADENA 
            {
              NodoBase RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: printValor ::= CADENA");
		RESULT = new NodoCadena(cadena.toString());				
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("printValor",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // printAnidado ::= printValor 
            {
              NodoBase RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase valor = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		if(debug)
			System.out.println("\t Regla: printAnidado ::= printValor");
		RESULT = valor;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("printAnidado",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // printAnidado ::= printAnidado PTCO printValor 
            {
              NodoBase RESULT =null;
		int valoresleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valoresright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase valores = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase valor = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: printAnidado ::= printAnidado PTCO printValor");
		NodoBase hijoActual = valores;
		if(hijoActual !=null){
			while(hijoActual.tieneHermano()){
				hijoActual = hijoActual.getHermanoDerecha();
			}
			hijoActual.setHermanoDerecha(valor);
			RESULT = valores;
		}else{
			RESULT = valor;
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("printAnidado",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // print ::= PRINT printAnidado PTCO 
            {
              NodoBase RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoBase sentencia = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
		if(debug)
			System.out.println("\t Regla: printAnidado ::= printAnidado PTCO");
		NodoEscribir nodoEscribir= new NodoEscribir(sentencia,false);
		RESULT = nodoEscribir;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // print ::= PRINT printAnidado 
            {
              NodoBase RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase sentencia = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: print ::= PRINT printAnidado");
		RESULT = new NodoEscribir(sentencia);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expresion ::= LPARENT expresion RPARENT 
            {
              NodoBase RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoBase e = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		if(debug)
			System.out.println("\t Regla: expresion ::= PARENTESIS ");
		RESULT = e;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expresion ::= REST expresion 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: expresion ::= RESTA expresion ");
		RESULT = new NodoOperacionMatUnaria(ex);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresion ::= expresion POTE expresion 
            {
              NodoBase RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase e1 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase e2 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: expresion ::= POTE ");
		RESULT = new NodoOperacionMat(e1,e2, Tipo.OpMat.POTE);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresion ::= expresion MOD expresion 
            {
              NodoBase RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase e1 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase e2 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: expresion ::= MOD ");
		RESULT = new NodoOperacionMat(e1,e2, Tipo.OpMat.MOD);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresion ::= expresion DIVI expresion 
            {
              NodoBase RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase e1 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase e2 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: expresion ::= DIVI ");
		RESULT = new NodoOperacionMat(e1,e2, Tipo.OpMat.DIVI);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion ::= expresion MULT expresion 
            {
              NodoBase RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase e1 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase e2 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: expresion ::= MULT ");
		RESULT = new NodoOperacionMat(e1,e2, Tipo.OpMat.MULT);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion ::= expresion REST expresion 
            {
              NodoBase RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase e1 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase e2 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: expresion ::= REST ");
		RESULT = new NodoOperacionMat(e1,e2, Tipo.OpMat.REST);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresion ::= expresion SUMA expresion 
            {
              NodoBase RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase e1 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase e2 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: expresion ::= SUMA ");
		RESULT = new NodoOperacionMat(e1,e2, Tipo.OpMat.SUMA);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresion ::= IDENTIFICADOR LCORCHE expresion RCORCHE 
            {
              NodoBase RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		if(debug)
			System.out.println("\t Regla: valor ::= IDENTIFICADOR ");
		RESULT = new NodoIdentificadorVector(nombre,ex);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresion ::= IDENTIFICADOR 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: valor ::= IDENTIFICADOR ");
		RESULT = new NodoIdentificador(variable);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expresion ::= NUMERO 
            {
              NodoBase RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: expresion ::= NUMERO ");
		RESULT = new NodoNumero(num);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // asignacionVector ::= IDENTIFICADOR LCORCHE expresion RCORCHE IGUAL CADENA 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: asignacion ::= IDENTIFICADOR IGUAL expresion");
		RESULT = new NodoAsignacionVector(variable, ex, new NodoCadena(valor));
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacionVector",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // asignacionVector ::= IDENTIFICADOR LCORCHE expresion RCORCHE IGUAL expresion 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase valor = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: asignacion ::= IDENTIFICADOR IGUAL expresion");
		RESULT = new NodoAsignacionVector(variable, ex, valor);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacionVector",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // asignacion ::= IDENTIFICADOR IGUAL CADENA 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: asignacion ::= IDENTIFICADOR IGUAL expresion");
		RESULT = new NodoAsignacion(variable, new NodoCadena(valor));
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // asignacion ::= IDENTIFICADOR IGUAL expresion 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase valor = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: asignacion ::= IDENTIFICADOR IGUAL expresion");
		RESULT = new NodoAsignacion(variable, valor);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // declaracionVector ::= IDENTIFICADOR LCORCHE expresion RCORCHE AS STRING 
            {
              NodoBase RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
		if(debug)
			System.out.println("\t Regla: declaracionVector ::= IDENTIFICADOR AS STRING");
		if(nombre!=null){
			RESULT = new NodoDeclaracionVector(nombre.toString(),ex,Tipo.Variable.STRING);		
		}else{
			RESULT = null;
			System.err.println("ERROR: declaracionVector ::= DIM (SIN NOMBRE DE VARIABLE)");
		}                                
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionVector",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // declaracionVector ::= IDENTIFICADOR LCORCHE expresion RCORCHE AS FLOAT 
            {
              NodoBase RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
		if(debug)
			System.out.println("\t Regla: declaracionVector ::= IDENTIFICADOR AS FLOAT");
		if(nombre!=null){
			RESULT = new NodoDeclaracionVector(nombre.toString(),ex,Tipo.Variable.FLOAT);		
		}else{
			RESULT = null;
			System.err.println("ERROR: declaracionVector ::= DIM (SIN NOMBRE DE VARIABLE)");
		}                                
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionVector",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // declaracionVector ::= IDENTIFICADOR LCORCHE expresion RCORCHE AS INTEGER 
            {
              NodoBase RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
		if(debug)
			System.out.println("\t Regla: declaracionVector ::= IDENTIFICADOR AS INTEGER");
		if(nombre!=null){
			RESULT = new NodoDeclaracionVector(nombre.toString(),ex,Tipo.Variable.INTEGER);		
		}else{
			RESULT = null;
			System.err.println("ERROR: declaracionVector ::= DIM (SIN NOMBRE DE VARIABLE)");
		}                                
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionVector",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // declaracionesVector ::= declaracionVector 
            {
              NodoBase RESULT =null;
		int declaracionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declaracionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase declaracion = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = declaracion;                               
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionesVector",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // declaracionesVector ::= declaracionesVector COMA declaracionVector 
            {
              NodoBase RESULT =null;
		int declaracionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int declaracionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase declaraciones = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int declaracionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declaracionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase declaracion = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: declaracionesVector ::= declaracionesVector COMA declaracionVector");
		NodoBase hijoActual = declaraciones;
		if(hijoActual !=null){
			while(hijoActual.tieneHermano()){
				hijoActual = hijoActual.getHermanoDerecha();
			}
			hijoActual.setHermanoDerecha(declaracion);
			RESULT = declaraciones;
		}else{
			RESULT = declaracion;
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionesVector",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // declaracion ::= IDENTIFICADOR AS STRING 
            {
              NodoBase RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
		if(debug)
			System.out.println("\t Regla: declaracion ::= IDENTIFICADOR AS STRING");
		if(nombre!=null){
			RESULT = new NodoDeclaracion(nombre.toString(),Tipo.Variable.STRING);		
		}else{
			RESULT = null;
			System.err.println("ERROR: declaracion ::= DIM (SIN NOMBRE DE VARIABLE)");
		}                                
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declaracion ::= IDENTIFICADOR AS FLOAT 
            {
              NodoBase RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
		if(debug)
			System.out.println("\t Regla: declaracion ::= IDENTIFICADOR AS FLOAT");
		if(nombre!=null){
			RESULT = new NodoDeclaracion(nombre.toString(),Tipo.Variable.FLOAT);		
		}else{
			RESULT = null;
			System.err.println("ERROR: declaracion ::= DIM (SIN NOMBRE DE VARIABLE)");
		}                                
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // declaracion ::= IDENTIFICADOR AS INTEGER 
            {
              NodoBase RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
		if(debug)
			System.out.println("\t Regla: declaracion ::= IDENTIFICADOR AS INTEGER");
		if(nombre!=null){
			RESULT = new NodoDeclaracion(nombre.toString(),Tipo.Variable.INTEGER);		
		}else{
			RESULT = null;
			System.err.println("ERROR: declaracion ::= DIM (SIN NOMBRE DE VARIABLE)");
		}                                
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declaraciones ::= declaracion 
            {
              NodoBase RESULT =null;
		int declaracionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declaracionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase declaracion = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: declaraciones ::= declaracion");
		RESULT = declaracion;                               
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaraciones",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declaraciones ::= declaraciones COMA declaracion 
            {
              NodoBase RESULT =null;
		int declaracionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int declaracionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase declaraciones = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int declaracionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declaracionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase declaracion = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: declaraciones ::= declaraciones COMA declaracion");
		NodoBase hijoActual = declaraciones;
		if(hijoActual !=null){
			while(hijoActual.tieneHermano()){
				hijoActual = hijoActual.getHermanoDerecha();
			}
			hijoActual.setHermanoDerecha(declaracion);
			RESULT = declaraciones;
		}else{
			RESULT = declaracion;
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaraciones",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sent ::= IDENTIFICADOR LPARENT envioParametrosOpcional RPARENT 
            {
              NodoBase RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoBase parametros = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		if(debug)
			System.out.println("\t Regla: sent ::= Llamado a procedimiento");
		RESULT = new NodoProcedimientoLlamada(nombre,parametros);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sent ::= INPUT IDENTIFICADOR LCORCHE expresion RCORCHE 
            {
              NodoBase RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		if(debug)
			System.out.println("\t Regla: sent ::= INPUT IDENTIFICADOR VECTOR");
		RESULT = new NodoLeerVector(nombre,ex);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sent ::= INPUT IDENTIFICADOR 
            {
              NodoBase RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: sent ::= INPUT IDENTIFICADOR");
		RESULT = new NodoLeer(nombre);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sent ::= do 
            {
              NodoBase RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase sentencia = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: sent ::= do");
		RESULT=sentencia;                              
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sent ::= while 
            {
              NodoBase RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoWhile sentencia = (NodoWhile)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: sent ::= while");
		RESULT=sentencia;                              
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sent ::= if 
            {
              NodoBase RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase sentencia = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: sent ::= if");
		RESULT=sentencia;                              
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sent ::= for 
            {
              NodoBase RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase sentencia = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: sent ::= for");
		RESULT=sentencia;                              
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sent ::= asignacionVector 
            {
              NodoBase RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase sentencia = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: sent ::= asignacionVector");
		RESULT=sentencia;                              
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sent ::= asignacion 
            {
              NodoBase RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase sentencia = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: sent ::= asignacion");
		RESULT=sentencia;                              
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sent ::= DIM declaracionesVector 
            {
              NodoBase RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase sentencia = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: sent ::= declaracion");
		RESULT = sentencia;                              
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sent ::= DIM declaraciones 
            {
              NodoBase RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase sentencia = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: sent ::= declaracion");
		RESULT = sentencia;                              
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sent ::= print 
            {
              NodoBase RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase sentencia = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: sent ::= print");
		RESULT = sentencia;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // seq_sent ::= sent 
            {
              NodoBase RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase sentencia = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: seq_sent ::= Una Sentencia");
		RESULT = sentencia;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_sent",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // seq_sent ::= seq_sent separar sent 
            {
              NodoBase RESULT =null;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase sentencias = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase sentencia = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: seq_sent ::= Varias Sentencias");
		NodoBase hijoActual = sentencias;
		if(hijoActual !=null){
			while(hijoActual.tieneHermano()){
				hijoActual = hijoActual.getHermanoDerecha();
			}
			hijoActual.setHermanoDerecha(sentencia);
			RESULT = sentencias;
		}else{
			RESULT = sentencia;
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_sent",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // envioParametros ::= printValor 
            {
              NodoBase RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase valor = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: envioParametros ::= printValor");
		RESULT = valor;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("envioParametros",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // envioParametros ::= envioParametros COMA printValor 
            {
              NodoBase RESULT =null;
		int enviosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int enviosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase envios = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase valor = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: envioParametros ::= envioParametros COMA printValor");
		NodoBase hijoActual = envios;
		if(hijoActual !=null){
			while(hijoActual.tieneHermano()){
				hijoActual = hijoActual.getHermanoDerecha();
			}
			hijoActual.setHermanoDerecha(valor);
			RESULT = envios;
		}else{
			RESULT = valor;
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("envioParametros",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // envioParametrosOpcional ::= 
            {
              NodoBase RESULT =null;
		
		if(debug)
			System.out.println("\t Regla: envioParametrosOpcional ::= nada");                             
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("envioParametrosOpcional",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // envioParametrosOpcional ::= envioParametros 
            {
              NodoBase RESULT =null;
		int recibeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int reciberight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase recibe = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: envioParametrosOpcional ::= envioParametros");
		RESULT = recibe;                               
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("envioParametrosOpcional",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // recibeParametros ::= recibeParametros COMA declaracionVector 
            {
              NodoBase RESULT =null;
		int declaracionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int declaracionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase declaraciones = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int declaracionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declaracionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase declaracion = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: recibeParametros ::= recibeParametros COMA declaracionVector");
		NodoBase hijoActual = declaraciones;
		if(hijoActual !=null){
			while(hijoActual.tieneHermano()){
				hijoActual = hijoActual.getHermanoDerecha();
			}
			hijoActual.setHermanoDerecha(declaracion);
			RESULT = declaraciones;
		}else{
			RESULT = declaracion;
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("recibeParametros",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // recibeParametros ::= recibeParametros COMA declaracion 
            {
              NodoBase RESULT =null;
		int declaracionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int declaracionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase declaraciones = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int declaracionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declaracionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase declaracion = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: recibeParametros ::= recibeParametros COMA declaracion");
		NodoBase hijoActual = declaraciones;
		if(hijoActual !=null){
			while(hijoActual.tieneHermano()){
				hijoActual = hijoActual.getHermanoDerecha();
			}
			hijoActual.setHermanoDerecha(declaracion);
			RESULT = declaraciones;
		}else{
			RESULT = declaracion;
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("recibeParametros",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // recibeParametros ::= declaracionVector 
            {
              NodoBase RESULT =null;
		int declaracionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declaracionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase declaracion = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: recibeParametros ::= declaracionVector");
		RESULT = declaracion;                               
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("recibeParametros",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // recibeParametros ::= declaracion 
            {
              NodoBase RESULT =null;
		int declaracionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declaracionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase declaracion = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: recibeParametros ::= declaracion");
		RESULT = declaracion;                               
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("recibeParametros",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // recibeParametrosOpcional ::= 
            {
              NodoBase RESULT =null;
		
		if(debug)
			System.out.println("\t Regla: recibeParametrosOpcional ::= nada");                             
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("recibeParametrosOpcional",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // recibeParametrosOpcional ::= recibeParametros 
            {
              NodoBase RESULT =null;
		int recibeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int reciberight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase recibe = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: recibeParametrosOpcional ::= recibeParametros");
		RESULT = recibe;                               
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("recibeParametrosOpcional",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // funcion ::= SUB IDENTIFICADOR LPARENT recibeParametrosOpcional RPARENT separar seq_sent separar END SUB 
            {
              NodoBase RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		NodoBase parametros = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int progleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int progright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodoBase prog = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
		if(debug)
			System.out.println("\t Regla: funcion ::= Delcaracion ");
		RESULT = new NodoProcedimientoDeclaracion(nombre,parametros,prog);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // funciones ::= funcion 
            {
              NodoBase RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase f = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: funciones ::= UNA FUNCION ");
		RESULT = f;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // funciones ::= funciones separar funcion 
            {
              NodoBase RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase fs = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase f = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: funciones ::= VARIAS FUNCIONES ");
		NodoBase hijoActual = fs;
		if(hijoActual !=null){
			while(hijoActual.tieneHermano()){
				hijoActual = hijoActual.getHermanoDerecha();
			}
			hijoActual.setHermanoDerecha(f);
			RESULT = fs;
		}else{
			RESULT = f;
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // programaTotal ::= error 
            {
              NodoBase RESULT =null;
		
		if(debug)
			System.out.println("\t Regla programaTotal ::= error"); 
		System.out.println("Error: programaTotal ::= NO ENCONTRADA");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programaTotal",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // programaTotal ::= separar 
            {
              NodoBase RESULT =null;
		
		if(debug)
			System.out.println("\t Regla: programaTotal ::= nada ");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programaTotal",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programaTotal ::= separar seq_sent separar END separar funciones separar 
            {
              NodoBase RESULT =null;
		int progleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int progright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		NodoBase prog = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int funcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoBase func = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		if(debug)
			System.out.println("\t Regla: programaTotal ::= seq_sent END funciones ");
		root=prog;
		funciones=func;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programaTotal",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programaTotal ::= separar seq_sent separar END separar 
            {
              NodoBase RESULT =null;
		int progleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int progright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodoBase prog = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
		if(debug)
			System.out.println("\t Regla: programaTotal ::= seq_sent END ");
		root=prog;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programaTotal",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programaTotal EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoBase start_val = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programaTotal ::= separar seq_sent separar 
            {
              NodoBase RESULT =null;
		int progleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int progright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoBase prog = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		if(debug)
			System.out.println("\t Regla: programaTotal ::= seq_sent");
		root=prog;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programaTotal",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

