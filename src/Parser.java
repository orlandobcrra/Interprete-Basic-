
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Oct 18 10:26:34 VET 2011
//----------------------------------------------------

import java_cup.runtime.*;
import ast.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Oct 18 10:26:34 VET 2011
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\123\000\002\002\005\000\002\002\004\000\002\002" +
    "\007\000\002\002\003\000\002\003\016\000\002\003\016" +
    "\000\002\003\003\000\002\004\005\000\002\004\005\000" +
    "\002\004\003\000\002\004\003\000\002\004\002\000\002" +
    "\006\003\000\002\006\002\000\002\005\005\000\002\005" +
    "\003\000\002\007\005\000\002\007\003\000\002\010\003" +
    "\000\002\010\004\000\002\010\004\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\004\000\002\010\007\000\002\010\006\000\002\011\005" +
    "\000\002\011\003\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\013\005\000\002\013\003\000\002" +
    "\014\010\000\002\014\010\000\002\014\010\000\002\015" +
    "\005\000\002\015\005\000\002\016\010\000\002\016\010" +
    "\000\002\017\003\000\002\017\003\000\002\017\006\000" +
    "\002\017\005\000\002\017\005\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\004\000\002\017\005\000\002\020\004\000\002\020\005" +
    "\000\002\021\005\000\002\021\003\000\002\022\003\000" +
    "\002\022\003\000\002\023\015\000\002\023\017\000\002" +
    "\025\003\000\002\025\005\000\002\025\005\000\002\025" +
    "\004\000\002\025\005\000\002\024\005\000\002\024\005" +
    "\000\002\024\005\000\002\024\005\000\002\024\005\000" +
    "\002\024\005\000\002\026\011\000\002\026\015\000\002" +
    "\027\010\000\002\030\011\000\002\031\003\000\002\031" +
    "\002\000\002\032\004\000\002\032\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\277\000\030\003\005\004\006\005\uffb1\007\uffb1\010" +
    "\uffb1\033\uffb1\036\uffb1\037\uffb1\053\uffb1\057\uffb1\061\uffb1" +
    "\001\002\000\044\002\uffb2\004\uffb2\005\uffb2\006\uffb2\007" +
    "\uffb2\010\uffb2\033\uffb2\036\uffb2\037\uffb2\042\uffb2\053\uffb2" +
    "\055\uffb2\056\uffb2\057\uffb2\060\uffb2\061\uffb2\062\uffb2\001" +
    "\002\000\004\002\ufffe\001\002\000\044\002\uffaf\004\uffaf" +
    "\005\uffaf\006\uffaf\007\uffaf\010\uffaf\033\uffaf\036\uffaf\037" +
    "\uffaf\042\uffaf\053\uffaf\055\uffaf\056\uffaf\057\uffaf\060\uffaf" +
    "\061\uffaf\062\uffaf\001\002\000\004\002\301\001\002\000" +
    "\026\004\016\005\014\007\031\010\027\033\026\036\011" +
    "\037\032\053\017\057\013\061\022\001\002\000\004\010" +
    "\275\001\002\000\042\002\uffef\004\uffef\005\uffef\007\uffef" +
    "\010\uffef\033\uffef\036\uffef\037\uffef\042\uffef\053\uffef\055" +
    "\uffef\056\uffef\057\uffef\060\uffef\061\uffef\062\uffef\001\002" +
    "\000\016\010\037\017\036\021\042\026\170\034\135\052" +
    "\167\001\002\000\042\002\uffe6\004\uffe6\005\uffe6\007\uffe6" +
    "\010\uffe6\033\uffe6\036\uffe6\037\uffe6\042\uffe6\053\uffe6\055" +
    "\uffe6\056\uffe6\057\uffe6\060\uffe6\061\uffe6\062\uffe6\001\002" +
    "\000\042\002\uffeb\004\uffeb\005\uffeb\007\uffeb\010\uffeb\033" +
    "\uffeb\036\uffeb\037\uffeb\042\uffeb\053\uffeb\055\uffeb\056\uffeb" +
    "\057\uffeb\060\uffeb\061\uffeb\062\uffeb\001\002\000\044\002" +
    "\uffb0\004\uffb0\005\uffb0\006\uffb0\007\uffb0\010\uffb0\033\uffb0" +
    "\036\uffb0\037\uffb0\042\uffb0\053\uffb0\055\uffb0\056\uffb0\057" +
    "\uffb0\060\uffb0\061\uffb0\062\uffb0\001\002\000\016\010\037" +
    "\017\036\021\042\026\170\034\135\052\167\001\002\000" +
    "\030\002\uffb1\004\006\005\uffb1\007\uffb1\010\uffb1\033\uffb1" +
    "\036\uffb1\037\uffb1\053\uffb1\057\uffb1\061\uffb1\001\002\000" +
    "\042\002\uffec\004\uffec\005\uffec\007\uffec\010\uffec\033\uffec" +
    "\036\uffec\037\uffec\042\uffec\053\uffec\055\uffec\056\uffec\057" +
    "\uffec\060\uffec\061\uffec\062\uffec\001\002\000\026\004\006" +
    "\005\uffb1\007\uffb1\010\uffb1\033\uffb1\036\uffb1\037\uffb1\053" +
    "\uffb1\057\uffb1\061\uffb1\001\002\000\042\002\uffe9\004\uffe9" +
    "\005\uffe9\007\uffe9\010\uffe9\033\uffe9\036\uffe9\037\uffe9\042" +
    "\uffe9\053\uffe9\055\uffe9\056\uffe9\057\uffe9\060\uffe9\061\uffe9" +
    "\062\uffe9\001\002\000\042\002\uffe8\004\uffe8\005\uffe8\007" +
    "\uffe8\010\uffe8\033\uffe8\036\uffe8\037\uffe8\042\uffe8\053\uffe8" +
    "\055\uffe8\056\uffe8\057\uffe8\060\uffe8\061\uffe8\062\uffe8\001" +
    "\002\000\042\002\uffe7\004\uffe7\005\uffe7\007\uffe7\010\uffe7" +
    "\033\uffe7\036\uffe7\037\uffe7\042\uffe7\053\uffe7\055\uffe7\056" +
    "\uffe7\057\uffe7\060\uffe7\061\uffe7\062\uffe7\001\002\000\014" +
    "\010\037\017\036\021\042\026\040\034\135\001\002\000" +
    "\010\016\132\026\134\030\133\001\002\000\042\002\uffea" +
    "\004\uffea\005\uffea\007\uffea\010\uffea\033\uffea\036\uffea\037" +
    "\uffea\042\uffea\053\uffea\055\uffea\056\uffea\057\uffea\060\uffea" +
    "\061\uffea\062\uffea\001\002\000\004\010\106\001\002\000" +
    "\004\010\034\001\002\000\042\002\ufff0\004\ufff0\005\ufff0" +
    "\007\ufff0\010\ufff0\033\ufff0\036\ufff0\037\ufff0\042\ufff0\053" +
    "\ufff0\055\ufff0\056\ufff0\057\ufff0\060\ufff0\061\ufff0\062\ufff0" +
    "\001\002\000\004\016\035\001\002\000\012\010\037\017" +
    "\036\021\042\026\040\001\002\000\114\002\uffd4\004\uffd4" +
    "\005\uffd4\007\uffd4\010\uffd4\015\uffd4\016\uffd4\020\uffd4\021" +
    "\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4\027\uffd4\031\uffd4" +
    "\033\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042" +
    "\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4" +
    "\051\uffd4\053\uffd4\054\uffd4\055\uffd4\056\uffd4\057\uffd4\060" +
    "\uffd4\061\uffd4\062\uffd4\001\002\000\116\002\uffd3\004\uffd3" +
    "\005\uffd3\007\uffd3\010\uffd3\015\uffd3\016\uffd3\020\uffd3\021" +
    "\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\027\uffd3\030\101" +
    "\031\uffd3\033\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\041" +
    "\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3" +
    "\050\uffd3\051\uffd3\053\uffd3\054\uffd3\055\uffd3\056\uffd3\057" +
    "\uffd3\060\uffd3\061\uffd3\062\uffd3\001\002\000\012\010\037" +
    "\017\036\021\042\026\040\001\002\000\020\020\047\021" +
    "\051\022\045\023\050\024\046\025\044\040\060\001\002" +
    "\000\012\010\037\017\036\021\042\026\040\001\002\000" +
    "\114\002\uffcb\004\uffcb\005\uffcb\007\uffcb\010\uffcb\015\uffcb" +
    "\016\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024\046\025" +
    "\uffcb\027\uffcb\031\uffcb\033\uffcb\035\uffcb\036\uffcb\037\uffcb" +
    "\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046" +
    "\uffcb\047\uffcb\050\uffcb\051\uffcb\053\uffcb\054\uffcb\055\uffcb" +
    "\056\uffcb\057\uffcb\060\uffcb\061\uffcb\062\uffcb\001\002\000" +
    "\012\010\037\017\036\021\042\026\040\001\002\000\012" +
    "\010\037\017\036\021\042\026\040\001\002\000\012\010" +
    "\037\017\036\021\042\026\040\001\002\000\012\010\037" +
    "\017\036\021\042\026\040\001\002\000\012\010\037\017" +
    "\036\021\042\026\040\001\002\000\012\010\037\017\036" +
    "\021\042\026\040\001\002\000\114\002\uffd0\004\uffd0\005" +
    "\uffd0\007\uffd0\010\uffd0\015\uffd0\016\uffd0\020\uffd0\021\uffd0" +
    "\022\045\023\050\024\046\025\044\027\uffd0\031\uffd0\033" +
    "\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0" +
    "\043\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0\051" +
    "\uffd0\053\uffd0\054\uffd0\055\uffd0\056\uffd0\057\uffd0\060\uffd0" +
    "\061\uffd0\062\uffd0\001\002\000\114\002\uffce\004\uffce\005" +
    "\uffce\007\uffce\010\uffce\015\uffce\016\uffce\020\uffce\021\uffce" +
    "\022\uffce\023\uffce\024\046\025\uffce\027\uffce\031\uffce\033" +
    "\uffce\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce\042\uffce" +
    "\043\uffce\044\uffce\045\uffce\046\uffce\047\uffce\050\uffce\051" +
    "\uffce\053\uffce\054\uffce\055\uffce\056\uffce\057\uffce\060\uffce" +
    "\061\uffce\062\uffce\001\002\000\114\002\uffd1\004\uffd1\005" +
    "\uffd1\007\uffd1\010\uffd1\015\uffd1\016\uffd1\020\uffd1\021\uffd1" +
    "\022\045\023\050\024\046\025\044\027\uffd1\031\uffd1\033" +
    "\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1" +
    "\043\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1\051" +
    "\uffd1\053\uffd1\054\uffd1\055\uffd1\056\uffd1\057\uffd1\060\uffd1" +
    "\061\uffd1\062\uffd1\001\002\000\114\002\uffcc\004\uffcc\005" +
    "\uffcc\007\uffcc\010\uffcc\015\uffcc\016\uffcc\020\uffcc\021\uffcc" +
    "\022\uffcc\023\uffcc\024\046\025\uffcc\027\uffcc\031\uffcc\033" +
    "\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc" +
    "\043\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc\050\uffcc\051" +
    "\uffcc\053\uffcc\054\uffcc\055\uffcc\056\uffcc\057\uffcc\060\uffcc" +
    "\061\uffcc\062\uffcc\001\002\000\114\002\uffcf\004\uffcf\005" +
    "\uffcf\007\uffcf\010\uffcf\015\uffcf\016\uffcf\020\uffcf\021\uffcf" +
    "\022\uffcf\023\uffcf\024\046\025\uffcf\027\uffcf\031\uffcf\033" +
    "\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf" +
    "\043\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf\051" +
    "\uffcf\053\uffcf\054\uffcf\055\uffcf\056\uffcf\057\uffcf\060\uffcf" +
    "\061\uffcf\062\uffcf\001\002\000\114\002\uffcd\004\uffcd\005" +
    "\uffcd\007\uffcd\010\uffcd\015\uffcd\016\uffcd\020\uffcd\021\uffcd" +
    "\022\uffcd\023\uffcd\024\046\025\uffcd\027\uffcd\031\uffcd\033" +
    "\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd" +
    "\043\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd\051" +
    "\uffcd\053\uffcd\054\uffcd\055\uffcd\056\uffcd\057\uffcd\060\uffcd" +
    "\061\uffcd\062\uffcd\001\002\000\012\010\037\017\036\021" +
    "\042\026\040\001\002\000\044\004\006\005\uffb1\007\uffb1" +
    "\010\uffb1\020\047\021\051\022\045\023\050\024\046\025" +
    "\044\033\uffb1\036\uffb1\037\uffb1\041\062\053\uffb1\057\uffb1" +
    "\061\uffb1\001\002\000\012\010\037\017\036\021\042\026" +
    "\040\001\002\000\026\004\016\005\014\007\031\010\027" +
    "\033\026\036\011\037\032\053\017\057\013\061\022\001" +
    "\002\000\030\004\006\005\uffb1\007\uffb1\010\uffb1\033\uffb1" +
    "\036\uffb1\037\uffb1\042\uffb1\053\uffb1\057\uffb1\061\uffb1\001" +
    "\002\000\030\004\016\005\014\007\031\010\027\033\026" +
    "\036\011\037\032\042\066\053\017\057\013\061\022\001" +
    "\002\000\004\010\070\001\002\000\042\002\ufff1\004\ufff1" +
    "\005\ufff1\007\ufff1\010\ufff1\033\ufff1\036\ufff1\037\ufff1\042" +
    "\ufff1\053\ufff1\055\ufff1\056\ufff1\057\ufff1\060\ufff1\061\ufff1" +
    "\062\ufff1\001\002\000\042\002\uffc3\004\uffc3\005\uffc3\007" +
    "\uffc3\010\uffc3\033\uffc3\036\uffc3\037\uffc3\042\uffc3\053\uffc3" +
    "\055\uffc3\056\uffc3\057\uffc3\060\uffc3\061\uffc3\062\uffc3\001" +
    "\002\000\042\004\006\005\uffb1\007\uffb1\010\uffb1\020\047" +
    "\021\051\022\045\023\050\024\046\025\044\033\uffb1\036" +
    "\uffb1\037\uffb1\053\uffb1\057\uffb1\061\uffb1\001\002\000\026" +
    "\004\016\005\014\007\031\010\027\033\026\036\011\037" +
    "\032\053\017\057\013\061\022\001\002\000\030\004\006" +
    "\005\uffb1\007\uffb1\010\uffb1\033\uffb1\036\uffb1\037\uffb1\042" +
    "\uffb1\053\uffb1\057\uffb1\061\uffb1\001\002\000\030\004\016" +
    "\005\014\007\031\010\027\033\026\036\011\037\032\042" +
    "\075\053\017\057\013\061\022\001\002\000\004\010\076" +
    "\001\002\000\042\002\uffc2\004\uffc2\005\uffc2\007\uffc2\010" +
    "\uffc2\033\uffc2\036\uffc2\037\uffc2\042\uffc2\053\uffc2\055\uffc2" +
    "\056\uffc2\057\uffc2\060\uffc2\061\uffc2\062\uffc2\001\002\000" +
    "\020\020\047\021\051\022\045\023\050\024\046\025\044" +
    "\027\100\001\002\000\114\002\uffca\004\uffca\005\uffca\007" +
    "\uffca\010\uffca\015\uffca\016\uffca\020\uffca\021\uffca\022\uffca" +
    "\023\uffca\024\uffca\025\uffca\027\uffca\031\uffca\033\uffca\035" +
    "\uffca\036\uffca\037\uffca\040\uffca\041\uffca\042\uffca\043\uffca" +
    "\044\uffca\045\uffca\046\uffca\047\uffca\050\uffca\051\uffca\053" +
    "\uffca\054\uffca\055\uffca\056\uffca\057\uffca\060\uffca\061\uffca" +
    "\062\uffca\001\002\000\012\010\037\017\036\021\042\026" +
    "\040\001\002\000\020\020\047\021\051\022\045\023\050" +
    "\024\046\025\044\031\103\001\002\000\114\002\uffd2\004" +
    "\uffd2\005\uffd2\007\uffd2\010\uffd2\015\uffd2\016\uffd2\020\uffd2" +
    "\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\027\uffd2\031" +
    "\uffd2\033\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2" +
    "\042\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2\047\uffd2\050" +
    "\uffd2\051\uffd2\053\uffd2\054\uffd2\055\uffd2\056\uffd2\057\uffd2" +
    "\060\uffd2\061\uffd2\062\uffd2\001\002\000\044\002\uffee\004" +
    "\uffee\005\uffee\007\uffee\010\uffee\015\127\033\uffee\036\uffee" +
    "\037\uffee\042\uffee\053\uffee\055\uffee\056\uffee\057\uffee\060" +
    "\uffee\061\uffee\062\uffee\001\002\000\044\002\uffdc\004\uffdc" +
    "\005\uffdc\007\uffdc\010\uffdc\015\uffdc\033\uffdc\036\uffdc\037" +
    "\uffdc\042\uffdc\053\uffdc\055\uffdc\056\uffdc\057\uffdc\060\uffdc" +
    "\061\uffdc\062\uffdc\001\002\000\006\011\123\030\114\001" +
    "\002\000\044\002\uffe1\004\uffe1\005\uffe1\007\uffe1\010\uffe1" +
    "\015\uffe1\033\uffe1\036\uffe1\037\uffe1\042\uffe1\053\uffe1\055" +
    "\uffe1\056\uffe1\057\uffe1\060\uffe1\061\uffe1\062\uffe1\001\002" +
    "\000\044\002\uffed\004\uffed\005\uffed\007\uffed\010\uffed\015" +
    "\111\033\uffed\036\uffed\037\uffed\042\uffed\053\uffed\055\uffed" +
    "\056\uffed\057\uffed\060\uffed\061\uffed\062\uffed\001\002\000" +
    "\004\010\113\001\002\000\044\002\uffdd\004\uffdd\005\uffdd" +
    "\007\uffdd\010\uffdd\015\uffdd\033\uffdd\036\uffdd\037\uffdd\042" +
    "\uffdd\053\uffdd\055\uffdd\056\uffdd\057\uffdd\060\uffdd\061\uffdd" +
    "\062\uffdd\001\002\000\004\030\114\001\002\000\012\010" +
    "\037\017\036\021\042\026\040\001\002\000\020\020\047" +
    "\021\051\022\045\023\050\024\046\025\044\031\116\001" +
    "\002\000\004\011\117\001\002\000\010\012\120\013\122" +
    "\014\121\001\002\000\046\002\uffdb\004\uffdb\005\uffdb\007" +
    "\uffdb\010\uffdb\015\uffdb\027\uffdb\033\uffdb\036\uffdb\037\uffdb" +
    "\042\uffdb\053\uffdb\055\uffdb\056\uffdb\057\uffdb\060\uffdb\061" +
    "\uffdb\062\uffdb\001\002\000\046\002\uffd9\004\uffd9\005\uffd9" +
    "\007\uffd9\010\uffd9\015\uffd9\027\uffd9\033\uffd9\036\uffd9\037" +
    "\uffd9\042\uffd9\053\uffd9\055\uffd9\056\uffd9\057\uffd9\060\uffd9" +
    "\061\uffd9\062\uffd9\001\002\000\046\002\uffda\004\uffda\005" +
    "\uffda\007\uffda\010\uffda\015\uffda\027\uffda\033\uffda\036\uffda" +
    "\037\uffda\042\uffda\053\uffda\055\uffda\056\uffda\057\uffda\060" +
    "\uffda\061\uffda\062\uffda\001\002\000\010\012\124\013\126" +
    "\014\125\001\002\000\046\002\uffe0\004\uffe0\005\uffe0\007" +
    "\uffe0\010\uffe0\015\uffe0\027\uffe0\033\uffe0\036\uffe0\037\uffe0" +
    "\042\uffe0\053\uffe0\055\uffe0\056\uffe0\057\uffe0\060\uffe0\061" +
    "\uffe0\062\uffe0\001\002\000\046\002\uffde\004\uffde\005\uffde" +
    "\007\uffde\010\uffde\015\uffde\027\uffde\033\uffde\036\uffde\037" +
    "\uffde\042\uffde\053\uffde\055\uffde\056\uffde\057\uffde\060\uffde" +
    "\061\uffde\062\uffde\001\002\000\046\002\uffdf\004\uffdf\005" +
    "\uffdf\007\uffdf\010\uffdf\015\uffdf\027\uffdf\033\uffdf\036\uffdf" +
    "\037\uffdf\042\uffdf\053\uffdf\055\uffdf\056\uffdf\057\uffdf\060" +
    "\uffdf\061\uffdf\062\uffdf\001\002\000\004\010\130\001\002" +
    "\000\004\011\123\001\002\000\044\002\uffe2\004\uffe2\005" +
    "\uffe2\007\uffe2\010\uffe2\015\uffe2\033\uffe2\036\uffe2\037\uffe2" +
    "\042\uffe2\053\uffe2\055\uffe2\056\uffe2\057\uffe2\060\uffe2\061" +
    "\uffe2\062\uffe2\001\002\000\014\010\037\017\036\021\042" +
    "\026\040\034\152\001\002\000\012\010\037\017\036\021" +
    "\042\026\040\001\002\000\016\010\037\017\036\021\042" +
    "\026\040\027\ufff4\034\135\001\002\000\072\002\uffc5\004" +
    "\uffc5\005\uffc5\007\uffc5\010\uffc5\015\uffc5\016\uffc5\027\uffc5" +
    "\033\uffc5\035\uffc5\036\uffc5\037\uffc5\042\uffc5\043\uffc5\044" +
    "\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5\051\uffc5\053\uffc5" +
    "\054\uffc5\055\uffc5\056\uffc5\057\uffc5\060\uffc5\061\uffc5\062" +
    "\uffc5\001\002\000\006\015\143\027\ufff5\001\002\000\106" +
    "\002\uffc4\004\uffc4\005\uffc4\007\uffc4\010\uffc4\015\uffc4\016" +
    "\uffc4\020\047\021\051\022\045\023\050\024\046\025\044" +
    "\027\uffc4\033\uffc4\035\uffc4\036\uffc4\037\uffc4\042\uffc4\043" +
    "\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4" +
    "\053\uffc4\054\uffc4\055\uffc4\056\uffc4\057\uffc4\060\uffc4\061" +
    "\uffc4\062\uffc4\001\002\000\004\027\142\001\002\000\006" +
    "\015\ufff2\027\ufff2\001\002\000\042\002\uffe3\004\uffe3\005" +
    "\uffe3\007\uffe3\010\uffe3\033\uffe3\036\uffe3\037\uffe3\042\uffe3" +
    "\053\uffe3\055\uffe3\056\uffe3\057\uffe3\060\uffe3\061\uffe3\062" +
    "\uffe3\001\002\000\014\010\037\017\036\021\042\026\040" +
    "\034\135\001\002\000\006\015\ufff3\027\ufff3\001\002\000" +
    "\020\020\047\021\051\022\045\023\050\024\046\025\044" +
    "\031\146\001\002\000\004\016\147\001\002\000\014\010" +
    "\037\017\036\021\042\026\040\034\150\001\002\000\042" +
    "\002\uffd5\004\uffd5\005\uffd5\007\uffd5\010\uffd5\033\uffd5\036" +
    "\uffd5\037\uffd5\042\uffd5\053\uffd5\055\uffd5\056\uffd5\057\uffd5" +
    "\060\uffd5\061\uffd5\062\uffd5\001\002\000\056\002\uffd6\004" +
    "\uffd6\005\uffd6\007\uffd6\010\uffd6\020\047\021\051\022\045" +
    "\023\050\024\046\025\044\033\uffd6\036\uffd6\037\uffd6\042" +
    "\uffd6\053\uffd6\055\uffd6\056\uffd6\057\uffd6\060\uffd6\061\uffd6" +
    "\062\uffd6\001\002\000\042\002\uffd7\004\uffd7\005\uffd7\007" +
    "\uffd7\010\uffd7\033\uffd7\036\uffd7\037\uffd7\042\uffd7\053\uffd7" +
    "\055\uffd7\056\uffd7\057\uffd7\060\uffd7\061\uffd7\062\uffd7\001" +
    "\002\000\056\002\uffd8\004\uffd8\005\uffd8\007\uffd8\010\uffd8" +
    "\020\047\021\051\022\045\023\050\024\046\025\044\033" +
    "\uffd8\036\uffd8\037\uffd8\042\uffd8\053\uffd8\055\uffd8\056\uffd8" +
    "\057\uffd8\060\uffd8\061\uffd8\062\uffd8\001\002\000\044\002" +
    "\uffc9\004\uffc9\005\uffc9\007\uffc9\010\uffc9\033\uffc9\035\156" +
    "\036\uffc9\037\uffc9\042\uffc9\053\uffc9\055\uffc9\056\uffc9\057" +
    "\uffc9\060\uffc9\061\uffc9\062\uffc9\001\002\000\044\002\uffc6" +
    "\004\uffc6\005\uffc6\007\uffc6\010\uffc6\033\uffc6\035\uffc6\036" +
    "\uffc6\037\uffc6\042\uffc6\053\uffc6\055\uffc6\056\uffc6\057\uffc6" +
    "\060\uffc6\061\uffc6\062\uffc6\001\002\000\052\002\uffc8\004" +
    "\uffc8\005\uffc8\007\uffc8\010\037\017\036\021\042\026\040" +
    "\033\uffc8\034\135\036\uffc8\037\uffc8\042\uffc8\053\uffc8\055" +
    "\uffc8\056\uffc8\057\uffc8\060\uffc8\061\uffc8\062\uffc8\001\002" +
    "\000\044\002\uffc7\004\uffc7\005\uffc7\007\uffc7\010\uffc7\033" +
    "\uffc7\035\uffc7\036\uffc7\037\uffc7\042\uffc7\053\uffc7\055\uffc7" +
    "\056\uffc7\057\uffc7\060\uffc7\061\uffc7\062\uffc7\001\002\000" +
    "\026\004\016\005\014\007\031\010\027\033\026\036\011" +
    "\037\032\053\017\057\013\061\022\001\002\000\030\004" +
    "\006\005\uffb1\007\uffb1\010\uffb1\033\uffb1\036\uffb1\037\uffb1" +
    "\053\uffb1\057\uffb1\061\uffb1\062\uffb1\001\002\000\030\004" +
    "\016\005\014\007\031\010\027\033\026\036\011\037\032" +
    "\053\017\057\013\061\022\062\163\001\002\000\004\063" +
    "\164\001\002\000\016\010\037\017\036\021\042\026\170" +
    "\034\135\052\167\001\002\000\046\002\uffb3\004\uffb3\005" +
    "\uffb3\007\uffb3\010\uffb3\033\uffb3\036\uffb3\037\uffb3\042\uffb3" +
    "\050\210\051\212\053\uffb3\055\uffb3\056\uffb3\057\uffb3\060" +
    "\uffb3\061\uffb3\062\uffb3\001\002\000\052\002\uffc1\004\uffc1" +
    "\005\uffc1\007\uffc1\010\uffc1\027\uffc1\033\uffc1\036\uffc1\037" +
    "\uffc1\042\uffc1\050\uffc1\051\uffc1\053\uffc1\054\uffc1\055\uffc1" +
    "\056\uffc1\057\uffc1\060\uffc1\061\uffc1\062\uffc1\001\002\000" +
    "\016\010\037\017\036\021\042\026\170\034\135\052\167" +
    "\001\002\000\016\010\037\017\036\021\042\026\170\034" +
    "\135\052\167\001\002\000\016\016\174\043\173\044\176" +
    "\045\172\046\177\047\175\001\002\000\014\010\037\017" +
    "\036\021\042\026\040\034\135\001\002\000\014\010\037" +
    "\017\036\021\042\026\040\034\135\001\002\000\014\010" +
    "\037\017\036\021\042\026\040\034\135\001\002\000\014" +
    "\010\037\017\036\021\042\026\040\034\135\001\002\000" +
    "\014\010\037\017\036\021\042\026\040\034\135\001\002" +
    "\000\014\010\037\017\036\021\042\026\040\034\135\001" +
    "\002\000\052\002\uffb9\004\uffb9\005\uffb9\007\uffb9\010\uffb9" +
    "\027\uffb9\033\uffb9\036\uffb9\037\uffb9\042\uffb9\050\uffb9\051" +
    "\uffb9\053\uffb9\054\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9" +
    "\061\uffb9\062\uffb9\001\002\000\052\002\uffbb\004\uffbb\005" +
    "\uffbb\007\uffbb\010\uffbb\027\uffbb\033\uffbb\036\uffbb\037\uffbb" +
    "\042\uffbb\050\uffbb\051\uffbb\053\uffbb\054\uffbb\055\uffbb\056" +
    "\uffbb\057\uffbb\060\uffbb\061\uffbb\062\uffbb\001\002\000\052" +
    "\002\uffb7\004\uffb7\005\uffb7\007\uffb7\010\uffb7\027\uffb7\033" +
    "\uffb7\036\uffb7\037\uffb7\042\uffb7\050\uffb7\051\uffb7\053\uffb7" +
    "\054\uffb7\055\uffb7\056\uffb7\057\uffb7\060\uffb7\061\uffb7\062" +
    "\uffb7\001\002\000\052\002\uffbc\004\uffbc\005\uffbc\007\uffbc" +
    "\010\uffbc\027\uffbc\033\uffbc\036\uffbc\037\uffbc\042\uffbc\050" +
    "\uffbc\051\uffbc\053\uffbc\054\uffbc\055\uffbc\056\uffbc\057\uffbc" +
    "\060\uffbc\061\uffbc\062\uffbc\001\002\000\052\002\uffba\004" +
    "\uffba\005\uffba\007\uffba\010\uffba\027\uffba\033\uffba\036\uffba" +
    "\037\uffba\042\uffba\050\uffba\051\uffba\053\uffba\054\uffba\055" +
    "\uffba\056\uffba\057\uffba\060\uffba\061\uffba\062\uffba\001\002" +
    "\000\052\002\uffb8\004\uffb8\005\uffb8\007\uffb8\010\uffb8\027" +
    "\uffb8\033\uffb8\036\uffb8\037\uffb8\042\uffb8\050\uffb8\051\uffb8" +
    "\053\uffb8\054\uffb8\055\uffb8\056\uffb8\057\uffb8\060\uffb8\061" +
    "\uffb8\062\uffb8\001\002\000\010\027\211\050\210\051\212" +
    "\001\002\000\034\016\uffc4\020\047\021\051\022\045\023" +
    "\050\024\046\025\044\027\100\043\uffc4\044\uffc4\045\uffc4" +
    "\046\uffc4\047\uffc4\001\002\000\016\010\037\017\036\021" +
    "\042\026\170\034\135\052\167\001\002\000\052\002\uffbd" +
    "\004\uffbd\005\uffbd\007\uffbd\010\uffbd\027\uffbd\033\uffbd\036" +
    "\uffbd\037\uffbd\042\uffbd\050\uffbd\051\uffbd\053\uffbd\054\uffbd" +
    "\055\uffbd\056\uffbd\057\uffbd\060\uffbd\061\uffbd\062\uffbd\001" +
    "\002\000\016\010\037\017\036\021\042\026\170\034\135" +
    "\052\167\001\002\000\052\002\uffbf\004\uffbf\005\uffbf\007" +
    "\uffbf\010\uffbf\027\uffbf\033\uffbf\036\uffbf\037\uffbf\042\uffbf" +
    "\050\uffbf\051\uffbf\053\uffbf\054\uffbf\055\uffbf\056\uffbf\057" +
    "\uffbf\060\uffbf\061\uffbf\062\uffbf\001\002\000\052\002\uffc0" +
    "\004\uffc0\005\uffc0\007\uffc0\010\uffc0\027\uffc0\033\uffc0\036" +
    "\uffc0\037\uffc0\042\uffc0\050\uffc0\051\uffc0\053\uffc0\054\uffc0" +
    "\055\uffc0\056\uffc0\057\uffc0\060\uffc0\061\uffc0\062\uffc0\001" +
    "\002\000\052\002\uffbe\004\uffbe\005\uffbe\007\uffbe\010\uffbe" +
    "\027\uffbe\033\uffbe\036\uffbe\037\uffbe\042\uffbe\050\uffbe\051" +
    "\uffbe\053\uffbe\054\uffbe\055\uffbe\056\uffbe\057\uffbe\060\uffbe" +
    "\061\uffbe\062\uffbe\001\002\000\030\002\001\004\016\005" +
    "\217\007\031\010\027\033\026\036\011\037\032\053\017" +
    "\057\013\061\022\001\002\000\032\002\uffe6\004\006\005" +
    "\uffe6\006\uffb1\007\uffe6\010\uffe6\033\uffe6\036\uffe6\037\uffe6" +
    "\053\uffe6\057\uffe6\061\uffe6\001\002\000\010\002\ufffb\004" +
    "\016\006\242\001\002\000\010\002\uffff\004\006\006\uffb1" +
    "\001\002\000\006\004\016\006\223\001\002\000\004\010" +
    "\224\001\002\000\004\026\225\001\002\000\010\010\106" +
    "\015\ufff6\027\ufff6\001\002\000\006\015\ufff7\027\ufff7\001" +
    "\002\000\006\015\231\027\232\001\002\000\006\015\ufff8" +
    "\027\ufff8\001\002\000\004\010\106\001\002\000\026\004" +
    "\006\005\uffb1\007\uffb1\010\uffb1\033\uffb1\036\uffb1\037\uffb1" +
    "\053\uffb1\057\uffb1\061\uffb1\001\002\000\026\004\016\005" +
    "\014\007\031\010\027\033\026\036\011\037\032\053\017" +
    "\057\013\061\022\001\002\000\026\004\006\005\uffb1\007" +
    "\uffb1\010\uffb1\033\uffb1\036\uffb1\037\uffb1\053\uffb1\057\uffb1" +
    "\061\uffb1\001\002\000\026\004\016\005\236\007\031\010" +
    "\027\033\026\036\011\037\032\053\017\057\013\061\022" +
    "\001\002\000\030\004\uffe6\005\uffe6\006\237\007\uffe6\010" +
    "\uffe6\033\uffe6\036\uffe6\037\uffe6\053\uffe6\057\uffe6\061\uffe6" +
    "\001\002\000\010\002\ufffd\004\ufffd\006\ufffd\001\002\000" +
    "\006\015\ufff9\027\ufff9\001\002\000\006\015\ufffa\027\ufffa" +
    "\001\002\000\004\010\243\001\002\000\004\026\244\001" +
    "\002\000\010\010\106\015\ufff6\027\ufff6\001\002\000\006" +
    "\015\231\027\246\001\002\000\026\004\006\005\uffb1\007" +
    "\uffb1\010\uffb1\033\uffb1\036\uffb1\037\uffb1\053\uffb1\057\uffb1" +
    "\061\uffb1\001\002\000\026\004\016\005\014\007\031\010" +
    "\027\033\026\036\011\037\032\053\017\057\013\061\022" +
    "\001\002\000\026\004\006\005\uffb1\007\uffb1\010\uffb1\033" +
    "\uffb1\036\uffb1\037\uffb1\053\uffb1\057\uffb1\061\uffb1\001\002" +
    "\000\026\004\016\005\252\007\031\010\027\033\026\036" +
    "\011\037\032\053\017\057\013\061\022\001\002\000\030" +
    "\004\uffe6\005\uffe6\006\253\007\uffe6\010\uffe6\033\uffe6\036" +
    "\uffe6\037\uffe6\053\uffe6\057\uffe6\061\uffe6\001\002\000\010" +
    "\002\uffb1\004\006\006\uffb1\001\002\000\010\002\ufffc\004" +
    "\016\006\ufffc\001\002\000\010\050\210\051\212\054\256" +
    "\001\002\000\026\004\006\005\uffb1\007\uffb1\010\uffb1\033" +
    "\uffb1\036\uffb1\037\uffb1\053\uffb1\057\uffb1\061\uffb1\001\002" +
    "\000\026\004\016\005\014\007\031\010\027\033\026\036" +
    "\011\037\032\053\017\057\013\061\022\001\002\000\032" +
    "\004\006\005\uffb1\007\uffb1\010\uffb1\033\uffb1\036\uffb1\037" +
    "\uffb1\053\uffb1\055\uffb1\056\uffb1\057\uffb1\061\uffb1\001\002" +
    "\000\032\004\016\005\014\007\031\010\027\033\026\036" +
    "\011\037\032\053\017\055\262\056\263\057\013\061\022" +
    "\001\002\000\026\004\006\005\uffb1\007\uffb1\010\uffb1\033" +
    "\uffb1\036\uffb1\037\uffb1\053\uffb1\057\uffb1\061\uffb1\001\002" +
    "\000\042\002\uffb6\004\uffb6\005\uffb6\007\uffb6\010\uffb6\033" +
    "\uffb6\036\uffb6\037\uffb6\042\uffb6\053\uffb6\055\uffb6\056\uffb6" +
    "\057\uffb6\060\uffb6\061\uffb6\062\uffb6\001\002\000\026\004" +
    "\016\005\014\007\031\010\027\033\026\036\011\037\032" +
    "\053\017\057\013\061\022\001\002\000\030\004\006\005" +
    "\uffb1\007\uffb1\010\uffb1\033\uffb1\036\uffb1\037\uffb1\053\uffb1" +
    "\056\uffb1\057\uffb1\061\uffb1\001\002\000\030\004\016\005" +
    "\014\007\031\010\027\033\026\036\011\037\032\053\017" +
    "\056\267\057\013\061\022\001\002\000\042\002\uffb5\004" +
    "\uffb5\005\uffb5\007\uffb5\010\uffb5\033\uffb5\036\uffb5\037\uffb5" +
    "\042\uffb5\053\uffb5\055\uffb5\056\uffb5\057\uffb5\060\uffb5\061" +
    "\uffb5\062\uffb5\001\002\000\032\004\006\005\uffb1\007\uffb1" +
    "\010\uffb1\033\uffb1\036\uffb1\037\uffb1\050\210\051\212\053" +
    "\uffb1\057\uffb1\061\uffb1\001\002\000\026\004\016\005\014" +
    "\007\031\010\027\033\026\036\011\037\032\053\017\057" +
    "\013\061\022\001\002\000\030\004\006\005\uffb1\007\uffb1" +
    "\010\uffb1\033\uffb1\036\uffb1\037\uffb1\053\uffb1\057\uffb1\060" +
    "\uffb1\061\uffb1\001\002\000\030\004\016\005\014\007\031" +
    "\010\027\033\026\036\011\037\032\053\017\057\013\060" +
    "\274\061\022\001\002\000\042\002\uffb4\004\uffb4\005\uffb4" +
    "\007\uffb4\010\uffb4\033\uffb4\036\uffb4\037\uffb4\042\uffb4\053" +
    "\uffb4\055\uffb4\056\uffb4\057\uffb4\060\uffb4\061\uffb4\062\uffb4" +
    "\001\002\000\044\002\uffe5\004\uffe5\005\uffe5\007\uffe5\010" +
    "\uffe5\030\276\033\uffe5\036\uffe5\037\uffe5\042\uffe5\053\uffe5" +
    "\055\uffe5\056\uffe5\057\uffe5\060\uffe5\061\uffe5\062\uffe5\001" +
    "\002\000\012\010\037\017\036\021\042\026\040\001\002" +
    "\000\020\020\047\021\051\022\045\023\050\024\046\025" +
    "\044\031\300\001\002\000\042\002\uffe4\004\uffe4\005\uffe4" +
    "\007\uffe4\010\uffe4\033\uffe4\036\uffe4\037\uffe4\042\uffe4\053" +
    "\uffe4\055\uffe4\056\uffe4\057\uffe4\060\uffe4\061\uffe4\062\uffe4" +
    "\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\277\000\010\002\006\031\007\032\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\007\017\010\032\015\020\016\014\020" +
    "\011\023\027\026\022\027\023\030\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\017\136\022\170\024" +
    "\165\025\267\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\017\136\022\170\024\165\025" +
    "\254\001\001\000\006\031\215\032\003\001\001\000\002" +
    "\001\001\000\006\031\157\032\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\017\136" +
    "\021\153\022\154\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\011\103\012\106\013\107\014\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\076\001\001\000\002\001\001\000\004\017" +
    "\042\001\001\000\002\001\001\000\004\017\056\001\001" +
    "\000\004\017\055\001\001\000\004\017\054\001\001\000" +
    "\004\017\053\001\001\000\004\017\052\001\001\000\004" +
    "\017\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\060\001\001\000\006\031\062\032" +
    "\003\001\001\000\004\017\070\001\001\000\024\007\063" +
    "\010\032\015\020\016\014\020\011\023\027\026\022\027" +
    "\023\030\024\001\001\000\006\031\064\032\003\001\001" +
    "\000\022\010\066\015\020\016\014\020\011\023\027\026" +
    "\022\027\023\030\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\031\071\032\003\001" +
    "\001\000\024\007\072\010\032\015\020\016\014\020\011" +
    "\023\027\026\022\027\023\030\024\001\001\000\006\031" +
    "\073\032\003\001\001\000\022\010\066\015\020\016\014" +
    "\020\011\023\027\026\022\027\023\030\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\101\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\111\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\114\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\130\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\152\001\001\000" +
    "\004\017\144\001\001\000\012\005\135\006\137\017\136" +
    "\022\140\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\017\136\022\143\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\150" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\017\136\022\156\001\001\000\002\001\001\000" +
    "\024\007\160\010\032\015\020\016\014\020\011\023\027" +
    "\026\022\027\023\030\024\001\001\000\006\031\161\032" +
    "\003\001\001\000\022\010\066\015\020\016\014\020\011" +
    "\023\027\026\022\027\023\030\024\001\001\000\002\001" +
    "\001\000\012\017\136\022\170\024\165\025\164\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\017\136\022" +
    "\170\024\165\025\214\001\001\000\012\017\206\022\170" +
    "\024\165\025\205\001\001\000\002\001\001\000\006\017" +
    "\136\022\204\001\001\000\006\017\136\022\203\001\001" +
    "\000\006\017\136\022\202\001\001\000\006\017\136\022" +
    "\201\001\001\000\006\017\136\022\200\001\001\000\006" +
    "\017\136\022\177\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\017\136\022\170\024\165\025\213\001\001\000\002" +
    "\001\001\000\012\017\136\022\170\024\165\025\212\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\010\066\015\020\016\014\020\011\023\027\026" +
    "\022\027\023\030\024\001\001\000\010\003\220\031\217" +
    "\032\003\001\001\000\002\001\001\000\006\031\221\032" +
    "\003\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\004\226\012\227\014\225\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\240\014\237\001\001\000\006\031\232\032\003\001" +
    "\001\000\024\007\233\010\032\015\020\016\014\020\011" +
    "\023\027\026\022\027\023\030\024\001\001\000\006\031" +
    "\234\032\003\001\001\000\022\010\066\015\020\016\014" +
    "\020\011\023\027\026\022\027\023\030\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\004" +
    "\244\012\227\014\225\001\001\000\002\001\001\000\006" +
    "\031\246\032\003\001\001\000\024\007\247\010\032\015" +
    "\020\016\014\020\011\023\027\026\022\027\023\030\024" +
    "\001\001\000\006\031\250\032\003\001\001\000\022\010" +
    "\066\015\020\016\014\020\011\023\027\026\022\027\023" +
    "\030\024\001\001\000\002\001\001\000\006\031\253\032" +
    "\003\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\031\256\032\003\001\001\000\024\007\257\010\032\015" +
    "\020\016\014\020\011\023\027\026\022\027\023\030\024" +
    "\001\001\000\006\031\260\032\003\001\001\000\022\010" +
    "\066\015\020\016\014\020\011\023\027\026\022\027\023" +
    "\030\024\001\001\000\006\031\263\032\003\001\001\000" +
    "\002\001\001\000\024\007\264\010\032\015\020\016\014" +
    "\020\011\023\027\026\022\027\023\030\024\001\001\000" +
    "\006\031\265\032\003\001\001\000\022\010\066\015\020" +
    "\016\014\020\011\023\027\026\022\027\023\030\024\001" +
    "\001\000\002\001\001\000\006\031\270\032\003\001\001" +
    "\000\024\007\271\010\032\015\020\016\014\020\011\023" +
    "\027\026\022\027\023\030\024\001\001\000\006\031\272" +
    "\032\003\001\001\000\022\010\066\015\020\016\014\020" +
    "\011\023\027\026\022\027\023\030\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\276\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


	private NodoBase root=null;
	private NodoBase funciones=null;
	private boolean debug=true;	
	private int lineaNum=0;

	public NodoBase getRoot(){
		return root;
	}
	
	public NodoBase getFunciones(){
		return funciones;
	}

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // lineas ::= LINEANUEVA 
            {
              NodoBase RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lineas",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // lineas ::= separar LINEANUEVA 
            {
              NodoBase RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lineas",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // separar ::= 
            {
              NodoBase RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("separar",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // separar ::= lineas 
            {
              NodoBase RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("separar",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // do ::= DO separar seq_sent separar LOOP UNTIL expresionBool 
            {
              NodoBase RESULT =null;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		NodoBase cuerpo = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: if ::= IF SOLO");
		RESULT = new NodoDo(ex,cuerpo);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("do",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // while ::= WHILE expresionBool separar seq_sent separar WEND 
            {
              NodoWhile RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase cuerpo = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
		if(debug)
			System.out.println("\t Regla: if ::= IF SOLO");
		RESULT = new NodoWhile(ex,cuerpo);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // if ::= IF expresionBool THEN separar seq_sent separar ELSE separar seq_sent separar ENDIF 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int thenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int thenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		NodoBase then = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int else1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int else1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase else1 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
		if(debug)
			System.out.println("\t Regla: if ::= IF CON ELSE");
		RESULT = new NodoIf(ex, then, else1);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // if ::= IF expresionBool THEN separar seq_sent separar ENDIF 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int thenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int thenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase then = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
		if(debug)
			System.out.println("\t Regla: if ::= IF SOLO");
		RESULT = new NodoIf(ex, then);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // condicion ::= printValor DIFERENTE printValor 
            {
              NodoBase RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase e1 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase e2 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: condicion ::= DIFERENTE");
		RESULT = new NodoOperacionBool(e1,e2,Tipo.OpBool.DIFERENTE);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // condicion ::= printValor MAYORIGUAL printValor 
            {
              NodoBase RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase e1 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase e2 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: condicion ::= MAYORIGUAL");
		RESULT = new NodoOperacionBool(e1,e2,Tipo.OpBool.MAYORIGUAL);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // condicion ::= printValor MAYOR printValor 
            {
              NodoBase RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase e1 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase e2 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: condicion ::= MAYOR");
		RESULT = new NodoOperacionBool(e1,e2,Tipo.OpBool.MAYOR);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // condicion ::= printValor MENORIGUAL printValor 
            {
              NodoBase RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase e1 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase e2 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: condicion ::= MENORIGUAL");
		RESULT = new NodoOperacionBool(e1,e2,Tipo.OpBool.MENORIGUAL);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // condicion ::= printValor MENOR printValor 
            {
              NodoBase RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase e1 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase e2 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: condicion ::= MENOR");
		RESULT = new NodoOperacionBool(e1,e2,Tipo.OpBool.MENOR);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // condicion ::= printValor IGUAL printValor 
            {
              NodoBase RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase e1 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase e2 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: condicion ::= IGUAL");
		RESULT = new NodoOperacionBool(e1,e2,Tipo.OpBool.IGUAL);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expresionBool ::= LPARENT expresionBool RPARENT 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		if(debug)
			System.out.println("\t Regla: expresionBool ::= PARENTESIS ");
		RESULT = ex;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBool",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expresionBool ::= NOT expresionBool 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: expresionBool ::= NOT expresionBool");
		RESULT = new NodoOperacionBoolUnaria(ex);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBool",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expresionBool ::= expresionBool OR expresionBool 
            {
              NodoBase RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase c1 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase c2 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: expresionBool ::= expresionBool OR expresionBool ");
		RESULT = new NodoOperacionBoolLogica(c1,c2,Tipo.OpBoolLogica.OR);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBool",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expresionBool ::= expresionBool AND expresionBool 
            {
              NodoBase RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase c1 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase c2 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: expresionBool ::= expresionBool AND expresionBool ");
		RESULT = new NodoOperacionBoolLogica(c1,c2,Tipo.OpBoolLogica.AND);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBool",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expresionBool ::= condicion 
            {
              NodoBase RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase c = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: expresionBool ::= condicion");
		RESULT = c;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBool",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // for ::= FOR IDENTIFICADOR IGUAL expresion TO expresion STEP expresion separar seq_sent separar NEXT IDENTIFICADOR 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int desdeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int desderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		NodoBase desde = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int hastaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int hastaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		NodoBase hasta = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int stepleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int stepright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		NodoBase step = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodoBase cuerpo = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int variable2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int variable2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String variable2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: for ::= Todo el FOR");
		RESULT = new NodoFor(variable, desde, hasta, cuerpo, variable2, step);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // for ::= FOR IDENTIFICADOR IGUAL expresion TO expresion separar seq_sent separar NEXT IDENTIFICADOR 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int desdeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int desderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		NodoBase desde = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int hastaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int hastaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		NodoBase hasta = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodoBase cuerpo = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int variable2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int variable2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String variable2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: for ::= Todo el FOR");
		RESULT = new NodoFor(variable, desde, hasta, cuerpo, variable2);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // printValor ::= expresion 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: printValor ::= expresion");
		RESULT = ex;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("printValor",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // printValor ::= CADENA 
            {
              NodoBase RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: printValor ::= CADENA");
		RESULT = new NodoCadena(cadena.toString());				
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("printValor",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // printAnidado ::= printValor 
            {
              NodoBase RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase valor = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		if(debug)
			System.out.println("\t Regla: printAnidado ::= printValor");
		RESULT = valor;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("printAnidado",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // printAnidado ::= printAnidado PTCO printValor 
            {
              NodoBase RESULT =null;
		int valoresleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valoresright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase valores = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase valor = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: printAnidado ::= printAnidado PTCO printValor");
		NodoBase hijoActual = valores;
		if(hijoActual !=null){
			while(hijoActual.tieneHermano()){
				hijoActual = hijoActual.getHermanoDerecha();
			}
			hijoActual.setHermanoDerecha(valor);
			RESULT = valores;
		}else{
			RESULT = valor;
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("printAnidado",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // print ::= PRINT printAnidado PTCO 
            {
              NodoBase RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoBase sentencia = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
		if(debug)
			System.out.println("\t Regla: printAnidado ::= printAnidado PTCO");
		NodoEscribir nodoEscribir= new NodoEscribir(sentencia,false);
		RESULT = nodoEscribir;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // print ::= PRINT printAnidado 
            {
              NodoBase RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase sentencia = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: print ::= PRINT printAnidado");
		RESULT = new NodoEscribir(sentencia);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresion ::= LPARENT expresion RPARENT 
            {
              NodoBase RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoBase e = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		if(debug)
			System.out.println("\t Regla: expresion ::= PARENTESIS ");
		RESULT = e;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresion ::= REST expresion 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: expresion ::= RESTA expresion ");
		RESULT = new NodoOperacionMatUnaria(ex);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresion ::= expresion POTE expresion 
            {
              NodoBase RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase e1 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase e2 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: expresion ::= POTE ");
		RESULT = new NodoOperacionMat(e1,e2, Tipo.OpMat.POTE);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion ::= expresion MOD expresion 
            {
              NodoBase RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase e1 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase e2 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: expresion ::= MOD ");
		RESULT = new NodoOperacionMat(e1,e2, Tipo.OpMat.MOD);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion ::= expresion DIVI expresion 
            {
              NodoBase RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase e1 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase e2 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: expresion ::= DIVI ");
		RESULT = new NodoOperacionMat(e1,e2, Tipo.OpMat.DIVI);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresion ::= expresion MULT expresion 
            {
              NodoBase RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase e1 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase e2 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: expresion ::= MULT ");
		RESULT = new NodoOperacionMat(e1,e2, Tipo.OpMat.MULT);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresion ::= expresion REST expresion 
            {
              NodoBase RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase e1 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase e2 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: expresion ::= REST ");
		RESULT = new NodoOperacionMat(e1,e2, Tipo.OpMat.REST);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresion ::= expresion SUMA expresion 
            {
              NodoBase RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase e1 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase e2 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: expresion ::= SUMA ");
		RESULT = new NodoOperacionMat(e1,e2, Tipo.OpMat.SUMA);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expresion ::= IDENTIFICADOR LCORCHE expresion RCORCHE 
            {
              NodoBase RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		if(debug)
			System.out.println("\t Regla: valor ::= IDENTIFICADOR ");
		RESULT = new NodoIdentificadorVector(nombre,ex);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expresion ::= IDENTIFICADOR 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: valor ::= IDENTIFICADOR ");
		RESULT = new NodoIdentificador(variable);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expresion ::= NUMERO 
            {
              NodoBase RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: expresion ::= NUMERO ");
		RESULT = new NodoNumero(num);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // asignacionVector ::= IDENTIFICADOR LCORCHE expresion RCORCHE IGUAL CADENA 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: asignacion ::= IDENTIFICADOR IGUAL expresion");
		RESULT = new NodoAsignacionVector(variable, ex, new NodoCadena(valor));
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacionVector",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // asignacionVector ::= IDENTIFICADOR LCORCHE expresion RCORCHE IGUAL expresion 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase valor = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: asignacion ::= IDENTIFICADOR IGUAL expresion");
		RESULT = new NodoAsignacionVector(variable, ex, valor);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacionVector",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // asignacion ::= IDENTIFICADOR IGUAL CADENA 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: asignacion ::= IDENTIFICADOR IGUAL expresion");
		RESULT = new NodoAsignacion(variable, new NodoCadena(valor));
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // asignacion ::= IDENTIFICADOR IGUAL expresion 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase valor = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: asignacion ::= IDENTIFICADOR IGUAL expresion");
		RESULT = new NodoAsignacion(variable, valor);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // declaracionVector ::= IDENTIFICADOR LCORCHE expresion RCORCHE AS STRING 
            {
              NodoBase RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
		if(debug)
			System.out.println("\t Regla: declaracionVector ::= IDENTIFICADOR AS STRING");
		if(nombre!=null){
			RESULT = new NodoDeclaracionVector(nombre.toString(),ex,Tipo.Variable.STRING);		
		}else{
			RESULT = null;
			System.err.println("ERROR: declaracionVector ::= DIM (SIN NOMBRE DE VARIABLE)");
		}                                
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionVector",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // declaracionVector ::= IDENTIFICADOR LCORCHE expresion RCORCHE AS FLOAT 
            {
              NodoBase RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
		if(debug)
			System.out.println("\t Regla: declaracionVector ::= IDENTIFICADOR AS FLOAT");
		if(nombre!=null){
			RESULT = new NodoDeclaracionVector(nombre.toString(),ex,Tipo.Variable.FLOAT);		
		}else{
			RESULT = null;
			System.err.println("ERROR: declaracionVector ::= DIM (SIN NOMBRE DE VARIABLE)");
		}                                
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionVector",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // declaracionVector ::= IDENTIFICADOR LCORCHE expresion RCORCHE AS INTEGER 
            {
              NodoBase RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
		if(debug)
			System.out.println("\t Regla: declaracionVector ::= IDENTIFICADOR AS INTEGER");
		if(nombre!=null){
			RESULT = new NodoDeclaracionVector(nombre.toString(),ex,Tipo.Variable.INTEGER);		
		}else{
			RESULT = null;
			System.err.println("ERROR: declaracionVector ::= DIM (SIN NOMBRE DE VARIABLE)");
		}                                
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionVector",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // declaracionesVector ::= declaracionVector 
            {
              NodoBase RESULT =null;
		int declaracionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declaracionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase declaracion = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = declaracion;                               
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionesVector",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declaracionesVector ::= declaracionesVector COMA declaracionVector 
            {
              NodoBase RESULT =null;
		int declaracionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int declaracionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase declaraciones = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int declaracionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declaracionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase declaracion = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: declaracionesVector ::= declaracionesVector COMA declaracionVector");
		NodoBase hijoActual = declaraciones;
		if(hijoActual !=null){
			while(hijoActual.tieneHermano()){
				hijoActual = hijoActual.getHermanoDerecha();
			}
			hijoActual.setHermanoDerecha(declaracion);
			RESULT = declaraciones;
		}else{
			RESULT = declaracion;
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionesVector",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // declaracion ::= IDENTIFICADOR AS STRING 
            {
              NodoBase RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
		if(debug)
			System.out.println("\t Regla: declaracion ::= IDENTIFICADOR AS STRING");
		if(nombre!=null){
			RESULT = new NodoDeclaracion(nombre.toString(),Tipo.Variable.STRING);		
		}else{
			RESULT = null;
			System.err.println("ERROR: declaracion ::= DIM (SIN NOMBRE DE VARIABLE)");
		}                                
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declaracion ::= IDENTIFICADOR AS FLOAT 
            {
              NodoBase RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
		if(debug)
			System.out.println("\t Regla: declaracion ::= IDENTIFICADOR AS FLOAT");
		if(nombre!=null){
			RESULT = new NodoDeclaracion(nombre.toString(),Tipo.Variable.FLOAT);		
		}else{
			RESULT = null;
			System.err.println("ERROR: declaracion ::= DIM (SIN NOMBRE DE VARIABLE)");
		}                                
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declaracion ::= IDENTIFICADOR AS INTEGER 
            {
              NodoBase RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
		if(debug)
			System.out.println("\t Regla: declaracion ::= IDENTIFICADOR AS INTEGER");
		if(nombre!=null){
			RESULT = new NodoDeclaracion(nombre.toString(),Tipo.Variable.INTEGER);		
		}else{
			RESULT = null;
			System.err.println("ERROR: declaracion ::= DIM (SIN NOMBRE DE VARIABLE)");
		}                                
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declaraciones ::= declaracion 
            {
              NodoBase RESULT =null;
		int declaracionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declaracionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase declaracion = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: declaraciones ::= declaracion");
		RESULT = declaracion;                               
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaraciones",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declaraciones ::= declaraciones COMA declaracion 
            {
              NodoBase RESULT =null;
		int declaracionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int declaracionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase declaraciones = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int declaracionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declaracionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase declaracion = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: declaraciones ::= declaraciones COMA declaracion");
		RESULT=null;
		NodoBase hijoActual = declaraciones;
		if(hijoActual !=null){
			while(hijoActual.tieneHermano()){
				hijoActual = hijoActual.getHermanoDerecha();
			}
			hijoActual.setHermanoDerecha(declaracion);
			RESULT = declaraciones;
		}else{
			RESULT = declaracion;
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaraciones",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sent ::= IDENTIFICADOR LPARENT declaracionesRecibe2 RPARENT 
            {
              NodoBase RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoBase parametros = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		if(debug)
			System.out.println("\t Regla: sent ::= INPUT IDENTIFICADOR");
		RESULT = new NodoProcedimientoLlamada(nombre,parametros);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sent ::= INPUT IDENTIFICADOR LCORCHE expresion RCORCHE 
            {
              NodoBase RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		if(debug)
			System.out.println("\t Regla: sent ::= INPUT IDENTIFICADOR");
		RESULT = new NodoLeerVector(nombre,ex);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sent ::= INPUT IDENTIFICADOR 
            {
              NodoBase RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: sent ::= INPUT IDENTIFICADOR");
		RESULT = new NodoLeer(nombre);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sent ::= END 
            {
              NodoBase RESULT =null;
		
		if(debug)
			System.out.println("\t Regla: sent ::= END");
		RESULT = null;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sent ::= do 
            {
              NodoBase RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase sentencia = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: sent ::= do");
		RESULT=sentencia;                              
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sent ::= while 
            {
              NodoBase RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoWhile sentencia = (NodoWhile)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: sent ::= while");
		RESULT=sentencia;                              
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sent ::= if 
            {
              NodoBase RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase sentencia = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: sent ::= if");
		RESULT=sentencia;                              
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sent ::= for 
            {
              NodoBase RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase sentencia = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: sent ::= for");
		RESULT=sentencia;                              
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sent ::= asignacionVector 
            {
              NodoBase RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase sentencia = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: sent ::= asignacionVector");
		RESULT=sentencia;                              
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sent ::= asignacion 
            {
              NodoBase RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase sentencia = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: sent ::= asignacion");
		RESULT=sentencia;                              
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sent ::= DIM declaracionesVector 
            {
              NodoBase RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase sentencia = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: sent ::= declaracion");
		RESULT = sentencia;                              
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sent ::= DIM declaraciones 
            {
              NodoBase RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase sentencia = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: sent ::= declaracion");
		RESULT = sentencia;                              
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sent ::= print 
            {
              NodoBase RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase sentencia = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: sent ::= print");
		RESULT = sentencia;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // seq_sent ::= sent 
            {
              NodoBase RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase sentencia = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: seq_sent ::= Una Sentencia");
		RESULT = sentencia;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_sent",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // seq_sent ::= seq_sent separar sent 
            {
              NodoBase RESULT =null;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase sentencias = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase sentencia = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: seq_sent ::= Varias Sentencias");
		NodoBase hijoActual = sentencias;
		if(hijoActual !=null){
			while(hijoActual.tieneHermano()){
				hijoActual = hijoActual.getHermanoDerecha();
			}
			hijoActual.setHermanoDerecha(sentencia);
			RESULT = sentencias;
		}else{
			RESULT = sentencia;
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_sent",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaracionesRecibe ::= printValor 
            {
              NodoBase RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase valor = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = valor;                               
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionesRecibe",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaracionesRecibe ::= declaracionesRecibe COMA printValor 
            {
              NodoBase RESULT =null;
		
		if(debug)
			System.out.println("\t Regla: declaracionesRecibe ::= declaracionesRecibe COMA IDENTIFICADOR");
		RESULT=null;
		//TODO lo del hermano
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionesRecibe",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaracionesRecibe2 ::= 
            {
              NodoBase RESULT =null;
		
		if(debug)
			System.out.println("\t Regla: parametros ::= nada ");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionesRecibe2",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaracionesRecibe2 ::= declaracionesRecibe 
            {
              NodoBase RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase d = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: parametros ::= declaraciones ");	
		RESULT = d;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionesRecibe2",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // parametros ::= 
            {
              NodoBase RESULT =null;
		
		if(debug)
			System.out.println("\t Regla: parametros ::= nada ");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // parametros ::= declaracionVector 
            {
              NodoBase RESULT =null;
		int declaracionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declaracionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase declaracion = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: declaraciones ::= declaracion");
		RESULT = declaracion;                               
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // parametros ::= declaracion 
            {
              NodoBase RESULT =null;
		int declaracionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declaracionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase declaracion = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: declaraciones ::= declaracion");
		RESULT = declaracion;                               
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // parametros ::= parametros COMA declaracionVector 
            {
              NodoBase RESULT =null;
		
		if(debug)
			System.out.println("\t Regla: declaraciones ::= declaraciones COMA declaracion");
		RESULT=null;
		//TODO lo del hermano
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // parametros ::= parametros COMA declaracion 
            {
              NodoBase RESULT =null;
		
		if(debug)
			System.out.println("\t Regla: declaraciones ::= declaraciones COMA declaracion");
		RESULT=null;
		//TODO lo del hermano
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // funciones ::= separar 
            {
              NodoBase RESULT =null;
		
		if(debug)
			System.out.println("\t Regla: funciones ::= separar ");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // funciones ::= separar SUB IDENTIFICADOR LPARENT parametros RPARENT separar seq_sent separar END SUB separar 
            {
              NodoBase RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		NodoBase parametros = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int progleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int progright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		NodoBase prog = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		
		if(debug)
			System.out.println("\t Regla: funciones ::= UNA FUNCION ");
		RESULT = new NodoProcedimientoDeclaracion(nombre,parametros,prog);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // funciones ::= funciones separar SUB IDENTIFICADOR LPARENT parametros RPARENT separar seq_sent separar END SUB 
            {
              NodoBase RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		NodoBase fs = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		NodoBase parametros = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int progleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int progright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodoBase prog = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
		if(debug)
			System.out.println("\t Regla: funciones ::= VARIAS FUNCIONES ");
		NodoBase hijoActual = fs;
		if(hijoActual !=null){
			while(hijoActual.tieneHermano()){
				hijoActual = hijoActual.getHermanoDerecha();
			}
			hijoActual.setHermanoDerecha(new NodoProcedimientoDeclaracion(nombre,parametros,prog));
			RESULT = fs;
		}else{
			RESULT = new NodoProcedimientoDeclaracion(nombre,parametros,prog);
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programaTotal ::= error 
            {
              NodoBase RESULT =null;
		
		if(debug)
			System.out.println("\t Regla programaTotal ::= error"); 
		System.out.println("Error: programaTotal ::= NO ENCONTRADA");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programaTotal",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programaTotal ::= separar seq_sent separar END funciones 
            {
              NodoBase RESULT =null;
		int progleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int progright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodoBase prog = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int funcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase func = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: programaTotal ::= seq_sent END funciones ");
		root=prog;
		funciones=func;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programaTotal",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programaTotal EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoBase start_val = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programaTotal ::= separar seq_sent separar 
            {
              NodoBase RESULT =null;
		int progleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int progright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoBase prog = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		if(debug)
			System.out.println("\t Regla: programaTotal ::= seq_sent");
		root=prog;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programaTotal",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

