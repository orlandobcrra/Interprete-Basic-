/* The following code was generated by JFlex 1.4.1 on 15/10/11 03:51 PM */

import java_cup.runtime.SymbolFactory;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 15/10/11 03:51 PM from the specification file
 * <tt>lexico.flex</tt>
 */
class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  7,  5,  0,  0,  6,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     7,  0,  8,  0,  4,  4,  0, 39, 30, 31, 27, 25, 23, 26,  2, 28, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  9, 35, 24, 36,  0, 
     0, 15,  3,  3, 12, 10, 20, 18, 37, 13,  3,  3, 21, 14, 11, 22, 
    32,  3, 19, 16, 17, 33,  3, 38, 34,  3,  3,  0,  0,  0, 29,  0, 
     0,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3, 
     3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\1\5\1\1"+
    "\1\6\12\3\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\3\1\20\1\21\1\3\1\22"+
    "\1\0\1\4\1\0\1\23\6\3\1\24\1\3\1\25"+
    "\1\3\1\26\4\3\1\27\1\3\1\30\1\31\1\32"+
    "\2\3\1\2\1\33\2\3\1\34\1\35\2\3\1\36"+
    "\5\3\1\37\4\3\1\40\1\41\2\3\1\42\1\3"+
    "\1\43\1\44\2\3\1\45\1\3\1\46\1\3\1\47"+
    "\1\3\1\50\1\51\1\52\1\3\1\53\1\54";

  private static int [] zzUnpackAction() {
    int [] result = new int[100];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\50\0\120\0\170\0\240\0\310\0\360\0\u0118"+
    "\0\50\0\u0140\0\u0168\0\u0190\0\u01b8\0\u01e0\0\u0208\0\u0230"+
    "\0\u0258\0\u0280\0\u02a8\0\50\0\50\0\50\0\50\0\50"+
    "\0\50\0\50\0\50\0\50\0\u02d0\0\u02f8\0\u0320\0\u0348"+
    "\0\u0370\0\u0398\0\50\0\u0118\0\u0118\0\u03c0\0\u03e8\0\u0410"+
    "\0\u0438\0\u0460\0\u0488\0\170\0\u04b0\0\170\0\u04d8\0\170"+
    "\0\u0500\0\u0528\0\u0550\0\u0578\0\170\0\u05a0\0\50\0\50"+
    "\0\50\0\u05c8\0\u05f0\0\u0398\0\u0618\0\u0640\0\u0668\0\170"+
    "\0\170\0\u0690\0\u06b8\0\170\0\u06e0\0\u0708\0\u0730\0\u0758"+
    "\0\u0780\0\170\0\u07a8\0\u07d0\0\u07f8\0\u0820\0\170\0\170"+
    "\0\u0848\0\u0870\0\170\0\u0898\0\170\0\u08c0\0\u08e8\0\u0910"+
    "\0\170\0\u0938\0\170\0\u0960\0\170\0\u0988\0\170\0\170"+
    "\0\170\0\u09b0\0\170\0\170";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[100];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\2\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\4\1\16"+
    "\1\17\1\20\1\4\1\21\1\22\1\4\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\2\4\1\36\1\37\1\4\1\40\1\41\51\0"+
    "\1\3\1\42\46\0\4\4\5\0\15\4\11\0\3\4"+
    "\2\0\2\4\7\0\1\43\46\0\1\43\51\0\1\7"+
    "\40\0\5\44\1\0\2\44\1\45\1\0\36\44\1\0"+
    "\4\4\5\0\1\4\1\46\11\4\1\47\1\4\11\0"+
    "\3\4\2\0\2\4\2\0\4\4\5\0\1\50\13\4"+
    "\1\51\11\0\3\4\2\0\2\4\2\0\4\4\5\0"+
    "\3\4\1\52\11\4\11\0\3\4\2\0\2\4\2\0"+
    "\4\4\5\0\1\4\1\53\10\4\1\54\2\4\11\0"+
    "\3\4\2\0\2\4\2\0\4\4\5\0\1\4\1\55"+
    "\4\4\1\56\6\4\11\0\3\4\2\0\2\4\2\0"+
    "\4\4\5\0\7\4\1\57\5\4\11\0\3\4\2\0"+
    "\2\4\2\0\4\4\5\0\14\4\1\60\11\0\3\4"+
    "\2\0\1\61\1\4\2\0\4\4\5\0\1\62\14\4"+
    "\11\0\3\4\2\0\2\4\2\0\4\4\5\0\13\4"+
    "\1\63\1\64\11\0\3\4\2\0\2\4\2\0\4\4"+
    "\5\0\11\4\1\65\3\4\11\0\3\4\2\0\2\4"+
    "\2\0\4\4\5\0\11\4\1\66\3\4\11\0\3\4"+
    "\2\0\2\4\31\0\1\67\13\0\1\70\33\0\1\71"+
    "\20\0\4\4\5\0\1\72\14\4\11\0\3\4\2\0"+
    "\1\73\1\4\1\0\5\41\1\0\42\41\1\0\1\74"+
    "\47\0\4\4\5\0\2\4\1\75\12\4\11\0\3\4"+
    "\2\0\2\4\2\0\4\4\5\0\6\4\1\76\6\4"+
    "\11\0\3\4\2\0\2\4\2\0\4\4\5\0\15\4"+
    "\11\0\2\4\1\77\2\0\2\4\2\0\4\4\5\0"+
    "\7\4\1\100\5\4\11\0\3\4\2\0\2\4\2\0"+
    "\4\4\5\0\4\4\1\101\10\4\11\0\3\4\2\0"+
    "\2\4\2\0\4\4\5\0\7\4\1\102\5\4\11\0"+
    "\1\103\2\4\2\0\2\4\2\0\4\4\5\0\2\4"+
    "\1\104\12\4\11\0\3\4\2\0\2\4\2\0\4\4"+
    "\5\0\1\105\10\4\1\106\3\4\11\0\3\4\2\0"+
    "\2\4\2\0\4\4\5\0\1\107\14\4\11\0\3\4"+
    "\2\0\2\4\2\0\4\4\5\0\4\4\1\110\10\4"+
    "\11\0\3\4\2\0\2\4\2\0\4\4\5\0\14\4"+
    "\1\111\11\0\3\4\2\0\2\4\2\0\4\4\5\0"+
    "\11\4\1\112\3\4\11\0\3\4\2\0\2\4\2\0"+
    "\4\4\5\0\3\4\1\113\11\4\11\0\3\4\2\0"+
    "\2\4\2\0\4\4\5\0\1\4\1\114\13\4\11\0"+
    "\3\4\2\0\2\4\2\0\4\4\5\0\3\4\1\115"+
    "\11\4\11\0\3\4\2\0\2\4\2\0\4\4\5\0"+
    "\3\4\1\116\11\4\11\0\3\4\2\0\2\4\2\0"+
    "\4\4\5\0\1\117\14\4\11\0\3\4\2\0\2\4"+
    "\2\0\4\4\5\0\7\4\1\120\5\4\11\0\3\4"+
    "\2\0\2\4\2\0\4\4\5\0\1\121\14\4\11\0"+
    "\3\4\2\0\2\4\2\0\4\4\5\0\15\4\11\0"+
    "\1\4\1\122\1\4\2\0\2\4\2\0\4\4\5\0"+
    "\15\4\11\0\1\123\2\4\2\0\2\4\2\0\4\4"+
    "\5\0\3\4\1\124\11\4\11\0\3\4\2\0\2\4"+
    "\2\0\4\4\5\0\1\4\1\125\13\4\11\0\3\4"+
    "\2\0\2\4\2\0\4\4\2\0\1\126\2\0\15\4"+
    "\11\0\3\4\2\0\2\4\2\0\4\4\5\0\5\4"+
    "\1\127\7\4\11\0\3\4\2\0\2\4\2\0\4\4"+
    "\5\0\1\4\1\130\13\4\11\0\3\4\2\0\2\4"+
    "\2\0\4\4\5\0\2\4\1\131\12\4\11\0\3\4"+
    "\2\0\2\4\2\0\4\4\5\0\13\4\1\132\1\4"+
    "\11\0\3\4\2\0\2\4\2\0\4\4\5\0\12\4"+
    "\1\133\2\4\11\0\3\4\2\0\2\4\2\0\4\4"+
    "\5\0\10\4\1\134\4\4\11\0\3\4\2\0\2\4"+
    "\2\0\4\4\5\0\7\4\1\135\5\4\11\0\3\4"+
    "\2\0\2\4\2\0\4\4\5\0\1\4\1\136\13\4"+
    "\11\0\3\4\2\0\2\4\1\0\5\126\1\0\42\126"+
    "\1\0\4\4\5\0\7\4\1\137\5\4\11\0\3\4"+
    "\2\0\2\4\2\0\4\4\5\0\7\4\1\140\5\4"+
    "\11\0\3\4\2\0\2\4\2\0\4\4\5\0\1\141"+
    "\14\4\11\0\3\4\2\0\2\4\2\0\4\4\5\0"+
    "\1\142\14\4\11\0\3\4\2\0\2\4\2\0\4\4"+
    "\5\0\10\4\1\143\4\4\11\0\3\4\2\0\2\4"+
    "\2\0\4\4\5\0\11\4\1\144\3\4\11\0\3\4"+
    "\2\0\2\4\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2520];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\6\1\1\11\12\1\11\11\5\1\1\0"+
    "\1\11\1\0\22\1\3\11\53\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[100];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	private SymbolFactory sf;
	private int lineaNum;
	private boolean debug;
	public Scanner(java.io.InputStream r, SymbolFactory sf){
		this(r);
		this.sf=sf;
		lineaNum=0;
		debug=true;
	}	


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 9: 
          { if(debug)
		System.out.println("token SUMA");
	return sf.newSymbol("SUMA",Symbols.SUMA);
          }
        case 45: break;
        case 25: 
          { if(debug)
		System.out.println("token DIFERENTE");
	return sf.newSymbol("DIFERENTE",Symbols.DIFERENTE);
          }
        case 46: break;
        case 22: 
          { if(debug)
		System.out.println("token TO");
	return sf.newSymbol("TO",Symbols.TO);
          }
        case 47: break;
        case 30: 
          { if(debug)
		System.out.println("token AND");
	return sf.newSymbol("AND",Symbols.AND);
          }
        case 48: break;
        case 32: 
          { if(debug)
		System.out.println("token ELSE");
	return sf.newSymbol("ELSE",Symbols.ELSE);
          }
        case 49: break;
        case 2: 
          { if(debug)
		System.out.println("token NUMERO");
	return sf.newSymbol("NUMERO",Symbols.NUMERO,new String(yytext()));
          }
        case 50: break;
        case 44: 
          { if(debug)
		System.out.println("token INTEGER");
	return sf.newSymbol("INTEGER",Symbols.INTEGER);
          }
        case 51: break;
        case 31: 
          { if(debug)
		System.out.println("token FOR");
	return sf.newSymbol("FOR",Symbols.FOR);
          }
        case 52: break;
        case 17: 
          { if(debug)
		System.out.println("token MAYOR");
	return sf.newSymbol("MAYOR",Symbols.MAYOR);
          }
        case 53: break;
        case 6: 
          { if(debug)
		System.out.println("token PTCO");
	return sf.newSymbol("PTCO",Symbols.PTCO);
          }
        case 54: break;
        case 4: 
          { lineaNum++;
	if(debug)
		System.out.println("token LINEANUEVA");
	return sf.newSymbol("LINEANUEVA",Symbols.LINEANUEVA);
          }
        case 55: break;
        case 12: 
          { if(debug)
		System.out.println("token DIVI");
	return sf.newSymbol("DIVI",Symbols.DIVI);
          }
        case 56: break;
        case 37: 
          { if(debug)
		System.out.println("token WEND");
	return sf.newSymbol("WEND",Symbols.WEND);
          }
        case 57: break;
        case 24: 
          { if(debug)
		System.out.println("token MENORIGUAL");
	return sf.newSymbol("MENORIGUAL",Symbols.MENORIGUAL);
          }
        case 58: break;
        case 23: 
          { if(debug)
		System.out.println("token OR");
	return sf.newSymbol("OR",Symbols.OR);
          }
        case 59: break;
        case 5: 
          { /*Salta espacios en blanco*/
          }
        case 60: break;
        case 1: 
          { System.err.println("Caracter Ilegal encontrado en analisis lexico: " + yytext() + "\n");
          }
        case 61: break;
        case 33: 
          { if(debug)
		System.out.println("token NEXT");
	return sf.newSymbol("NEXT",Symbols.NEXT);
          }
        case 62: break;
        case 40: 
          { if(debug)
		System.out.println("token FLOAT");
	return sf.newSymbol("FLOAT",Symbols.FLOAT);
          }
        case 63: break;
        case 10: 
          { if(debug)
		System.out.println("token REST");
	return sf.newSymbol("REST",Symbols.REST);
          }
        case 64: break;
        case 8: 
          { if(debug)
		System.out.println("token IGUAL");
	return sf.newSymbol("IGUAL",Symbols.IGUAL);
          }
        case 65: break;
        case 36: 
          { /* salto comentarios */
	if(debug)
		System.out.println("token COMENTARIO");
          }
        case 66: break;
        case 42: 
          { if(debug)
		System.out.println("token WHILE");
	return sf.newSymbol("WHILE",Symbols.WHILE);
          }
        case 67: break;
        case 29: 
          { if(debug)
		System.out.println("token DIM");
	return sf.newSymbol("DIM",Symbols.DIM);
          }
        case 68: break;
        case 16: 
          { if(debug)
		System.out.println("token MENOR");
	return sf.newSymbol("MENOR",Symbols.MENOR);
          }
        case 69: break;
        case 14: 
          { if(debug)
		System.out.println("token LPARENT");
	return sf.newSymbol("LPARENT",Symbols.LPARENT);
          }
        case 70: break;
        case 19: 
          { if(debug)
        System.out.println("token CADENA");
	return sf.newSymbol("CADENA",Symbols.CADENA,new String(yytext()));
          }
        case 71: break;
        case 26: 
          { if(debug)
		System.out.println("token MAYORIGUAL");
	return sf.newSymbol("MAYORIGUAL",Symbols.MAYORIGUAL);
          }
        case 72: break;
        case 3: 
          { if(debug)
		System.out.println("token IDENTIFICADOR");
	return sf.newSymbol("IDENTIFICADOR",Symbols.IDENTIFICADOR,new String(yytext()));
          }
        case 73: break;
        case 27: 
          { if(debug)
		System.out.println("token END");
	return sf.newSymbol("END",Symbols.END);
          }
        case 74: break;
        case 39: 
          { if(debug)
		System.out.println("token INPUT");
	return sf.newSymbol("INPUT",Symbols.INPUT);
          }
        case 75: break;
        case 13: 
          { if(debug)
		System.out.println("token POTE");
	return sf.newSymbol("POTE",Symbols.POTE);
          }
        case 76: break;
        case 34: 
          { if(debug)
		System.out.println("token STEP");
	return sf.newSymbol("STEP",Symbols.STEP);
          }
        case 77: break;
        case 28: 
          { if(debug)
		System.out.println("token NOT");
	return sf.newSymbol("NOT",Symbols.NOT);
          }
        case 78: break;
        case 20: 
          { if(debug)
		System.out.println("token IF");
	return sf.newSymbol("IF",Symbols.IF);
          }
        case 79: break;
        case 21: 
          { if(debug)
		System.out.println("token AS");
	return sf.newSymbol("AS",Symbols.AS);
          }
        case 80: break;
        case 41: 
          { if(debug)
		System.out.println("token PRINT");
	return sf.newSymbol("PRINT",Symbols.PRINT);
          }
        case 81: break;
        case 38: 
          { if(debug)
		System.out.println("token ENDIF");
	return sf.newSymbol("ENDIF",Symbols.ENDIF);
          }
        case 82: break;
        case 11: 
          { if(debug)
		System.out.println("token MULT");
	return sf.newSymbol("MULT",Symbols.MULT);
          }
        case 83: break;
        case 43: 
          { if(debug)
		System.out.println("token STRING");
	return sf.newSymbol("STRING",Symbols.STRING);
          }
        case 84: break;
        case 7: 
          { if(debug)
		System.out.println("token COMA");
	return sf.newSymbol("COMA",Symbols.COMA);
          }
        case 85: break;
        case 35: 
          { if(debug)
		System.out.println("token THEN");
	return sf.newSymbol("THEN",Symbols.THEN);
          }
        case 86: break;
        case 18: 
          { /*Salto comentarios*/
	if(debug)
		System.out.println("token COMENTARIO");
          }
        case 87: break;
        case 15: 
          { if(debug)
		System.out.println("token RPARENT");
	return sf.newSymbol("RPARENT",Symbols.RPARENT);
          }
        case 88: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { 	return sf.newSymbol("EOF",Symbols.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
