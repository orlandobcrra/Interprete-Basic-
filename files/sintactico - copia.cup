import java_cup.runtime.*;
import ast.*;

action code {:
	private NodoBase root=null;
	private boolean debug=true;	
	private int lineaNum=0;

	public NodoBase getRoot(){
		return root;
	}
:}

/* Simbolos Terminales */
terminal COMENTARIO;
terminal LINEANUEVA;
terminal SUB;
terminal END;
terminal DIM;
terminal String IDENTIFICADOR;
terminal AS;
terminal INTEGER;
terminal FLOAT;
terminal STRING;
terminal COMA;
terminal IGUAL;
terminal String NUMERO;
terminal SUMA;
terminal REST;
terminal MULT;
terminal DIVI;
terminal POTE;
terminal MOD;
terminal LPARENT;
terminal RPARENT;
terminal LCORCHE;
terminal RCORCHE;
terminal SIGNO;
terminal PRINT;
terminal String CADENA;
terminal PTCO;
terminal INPUT;
terminal FOR;
terminal TO;
terminal STEP;
terminal NEXT;
terminal MENORIGUAL;
terminal MENOR;
terminal MAYORIGUAL;
terminal MAYOR;
terminal DIFERENTE;
terminal AND;
terminal OR;
terminal NOT;
terminal IF;
terminal THEN;
terminal ELSE;
terminal ENDIF;
terminal WHILE;
terminal WEND;
terminal DO;
terminal LOOP;
terminal UNTIL;

/* Simbolos No Terminales */
non terminal NodoBase programaTotal;
non terminal NodoBase lineas;
non terminal NodoBase funciones;
non terminal NodoBase funcion;
non terminal NodoBase parametros;
non terminal NodoBase p2;
non terminal NodoBase programa;
non terminal NodoBase seq_sent;
non terminal NodoBase sent;
non terminal NodoBase declaraciones;
non terminal NodoBase declaracion;
non terminal NodoBase declaracionesVector;
non terminal NodoBase declaracionVector;
non terminal NodoBase asignacion;
non terminal NodoBase asignacionVector;
non terminal NodoBase expresion;
non terminal NodoBase print;
non terminal NodoBase printAnidado;
non terminal NodoBase printValor;
non terminal NodoBase for;
non terminal NodoBase condicion;
non terminal NodoBase expresionBool;
non terminal NodoBase if;
non terminal NodoWhile while;
non terminal NodoBase do;

precedence left OR;
precedence left AND;
precedence right NOT;
precedence left REST, SUMA;
precedence left MULT, DIVI, MOD;
precedence left SIGNO;
precedence right POTE;



/* REGLAS GRAMATICALES */

programaTotal ::=
	programa:prog {:
		if(debug)
			System.out.println("\t Regla: programaTotal ::= programa");
		root=prog;
	:}
	| programa END funciones {:
		if(debug)
			System.out.println("\t Regla: programaTotal ::= programa END funciones ");
	:}
	| {: 
		if(debug)
			System.out.println("\t Regla: programaTotal ::= nada :P ");
	:}
	| error {:
		if(debug)
			System.out.println("\t Regla programaTotal ::= error"); 
		System.out.println("Error: programaTotal ::= NO ENCONTRADA");
	:}
;

lineas ::=
	lineas LINEANUEVA {: :}
	| LINEANUEVA {: :}
	| {: :}
;

funciones ::=
	funciones:fs LINEANUEVA funcion {:
		if(debug)
			System.out.println("\t Regla: funciones ::= VARIAS FUNCIONES ");
	:}
	| funcion {:
		if(debug)
			System.out.println("\t Regla: funciones ::= UNA FUNCION ");
	:}
	| {:
		if(debug)
			System.out.println("\t Regla: funciones ::= nada ");
	:}
;

funcion ::=
	SUB IDENTIFICADOR:nombre LPARENT parametros RPARENT LINEANUEVA seq_sent:cuerpo LINEANUEVA END SUB {:
		if(debug)
			System.out.println("\t Regla: funcion ::= funcion :) ");
	:}
;

parametros ::=
	declaraciones {:
		if(debug)
			System.out.println("\t Regla: parametros ::= declaraciones ");	
	:}
	| {:
		if(debug)
			System.out.println("\t Regla: parametros ::= nada ");
	:}
;

programa ::=
	seq_sent:prog {:
		if(debug)
			System.out.println("\t Regla: programa ::= seq_sent");
		RESULT = prog;
    :}
	| seq_sent:prog LINEANUEVA {:
		if(debug)
			System.out.println("\t Regla: programa ::= seq_sent LINEANUEVA");
		RESULT = prog;
    :}
;

seq_sent ::=
	seq_sent:sentencias LINEANUEVA sent:sentencia {:
		if(debug)
			System.out.println("\t Regla: seq_sent ::= Varias Sentencias");
		NodoBase hijoActual = sentencias;
		if(hijoActual !=null){
			while(hijoActual.tieneHermano()){
				hijoActual = hijoActual.getHermanoDerecha();
			}
			hijoActual.setHermanoDerecha(sentencia);
			RESULT = sentencias;
		}else{
			RESULT = sentencia;
		}
	:}
	| sent:sentencia {:
		if(debug)
			System.out.println("\t Regla: seq_sent ::= Una Sentencia");
		RESULT = sentencia;
	:}
;

sent ::=
	print:sentencia {:
		if(debug)
			System.out.println("\t Regla: sent ::= print");
		RESULT = sentencia;
	:}
	| DIM declaraciones:sentencia {:
		if(debug)
			System.out.println("\t Regla: sent ::= declaracion");
		RESULT = sentencia;                              
	:}
	| DIM declaracionesVector:sentencia {:
		if(debug)
			System.out.println("\t Regla: sent ::= declaracion");
		RESULT = sentencia;                              
	:}
	| asignacion:sentencia {:
		if(debug)
			System.out.println("\t Regla: sent ::= asignacion");
		RESULT=sentencia;                              
	:}
	| asignacionVector:sentencia {:
		if(debug)
			System.out.println("\t Regla: sent ::= asignacionVector");
		RESULT=sentencia;                              
	:}
	| for:sentencia {:
		if(debug)
			System.out.println("\t Regla: sent ::= for");
		RESULT=sentencia;                              
	:}
	| if:sentencia {:
		if(debug)
			System.out.println("\t Regla: sent ::= if");
		RESULT=sentencia;                              
	:}
	| while:sentencia {:
		if(debug)
			System.out.println("\t Regla: sent ::= while");
		RESULT=sentencia;                              
	:}
	| do:sentencia {:
		if(debug)
			System.out.println("\t Regla: sent ::= do");
		RESULT=sentencia;                              
	:}
	| INPUT IDENTIFICADOR:nombre {:
		if(debug)
			System.out.println("\t Regla: sent ::= INPUT IDENTIFICADOR");
		RESULT = new NodoLeer(nombre);
	:}
	| INPUT IDENTIFICADOR:nombre LCORCHE expresion:ex RCORCHE {:
		if(debug)
			System.out.println("\t Regla: sent ::= INPUT IDENTIFICADOR");
		RESULT = new NodoLeerVector(nombre,ex);
	:}
	| LINEANUEVA {:
		if(debug)
			System.out.println("\t Regla: sent ::= LINEANUEVA");
	:}
;

declaraciones ::=
	declaraciones COMA declaracion {:
		if(debug)
			System.out.println("\t Regla: declaraciones ::= declaraciones COMA declaracion");
		RESULT=null;
		//TODO lo del hermano
	:}
	| declaracion:declaracion {:
		RESULT = declaracion;                               
	:}
;

declaracion ::=
	IDENTIFICADOR:nombre AS INTEGER {:
		if(debug)
			System.out.println("\t Regla: declaracion ::= IDENTIFICADOR AS INTEGER");
		if(nombre!=null){
			RESULT = new NodoDeclaracion(nombre.toString(),Tipo.Variable.INTEGER);		
		}else{
			RESULT = null;
			System.err.println("ERROR: declaracion ::= DIM (SIN NOMBRE DE VARIABLE)");
		}                                
	:}
	| IDENTIFICADOR:nombre AS FLOAT {:
		if(debug)
			System.out.println("\t Regla: declaracion ::= IDENTIFICADOR AS FLOAT");
		if(nombre!=null){
			RESULT = new NodoDeclaracion(nombre.toString(),Tipo.Variable.FLOAT);		
		}else{
			RESULT = null;
			System.err.println("ERROR: declaracion ::= DIM (SIN NOMBRE DE VARIABLE)");
		}                                
	:}
	| IDENTIFICADOR:nombre AS STRING {:
		if(debug)
			System.out.println("\t Regla: declaracion ::= IDENTIFICADOR AS STRING");
		if(nombre!=null){
			RESULT = new NodoDeclaracion(nombre.toString(),Tipo.Variable.STRING);		
		}else{
			RESULT = null;
			System.err.println("ERROR: declaracion ::= DIM (SIN NOMBRE DE VARIABLE)");
		}                                
	:}
;

declaracionesVector ::=
	declaracionesVector COMA declaracionVector {:
		if(debug)
			System.out.println("\t Regla: declaracionesVector ::= declaracionesVector COMA declaracionVector");
		RESULT=null;
		//TODO lo del hermano
	:}
	| declaracionVector:declaracion {:
		RESULT = declaracion;                               
	:}
;

declaracionVector ::=
	IDENTIFICADOR:nombre LCORCHE expresion:ex RCORCHE AS INTEGER {:
		if(debug)
			System.out.println("\t Regla: declaracionVector ::= IDENTIFICADOR AS INTEGER");
		if(nombre!=null){
			RESULT = new NodoDeclaracionVector(nombre.toString(),ex,Tipo.Variable.INTEGER);		
		}else{
			RESULT = null;
			System.err.println("ERROR: declaracionVector ::= DIM (SIN NOMBRE DE VARIABLE)");
		}                                
	:}
	| IDENTIFICADOR:nombre LCORCHE expresion:ex RCORCHE AS FLOAT {:
		if(debug)
			System.out.println("\t Regla: declaracionVector ::= IDENTIFICADOR AS FLOAT");
		if(nombre!=null){
			RESULT = new NodoDeclaracionVector(nombre.toString(),ex,Tipo.Variable.FLOAT);		
		}else{
			RESULT = null;
			System.err.println("ERROR: declaracionVector ::= DIM (SIN NOMBRE DE VARIABLE)");
		}                                
	:}
	| IDENTIFICADOR:nombre LCORCHE expresion:ex RCORCHE AS STRING {:
		if(debug)
			System.out.println("\t Regla: declaracionVector ::= IDENTIFICADOR AS STRING");
		if(nombre!=null){
			RESULT = new NodoDeclaracionVector(nombre.toString(),ex,Tipo.Variable.STRING);		
		}else{
			RESULT = null;
			System.err.println("ERROR: declaracionVector ::= DIM (SIN NOMBRE DE VARIABLE)");
		}                                
	:}
;

asignacion ::=
	IDENTIFICADOR:variable IGUAL expresion:valor {:
		if(debug)
			System.out.println("\t Regla: asignacion ::= IDENTIFICADOR IGUAL expresion");
		RESULT = new NodoAsignacion(variable, valor);
	:}
	| IDENTIFICADOR:variable IGUAL CADENA:valor {:
		if(debug)
			System.out.println("\t Regla: asignacion ::= IDENTIFICADOR IGUAL expresion");
		RESULT = new NodoAsignacion(variable, new NodoCadena(valor));
	:}
;

asignacionVector ::=
	IDENTIFICADOR:variable LCORCHE expresion:ex RCORCHE IGUAL expresion:valor {:
		if(debug)
			System.out.println("\t Regla: asignacion ::= IDENTIFICADOR IGUAL expresion");
		RESULT = new NodoAsignacionVector(variable, ex, valor);
	:}
	| IDENTIFICADOR:variable LCORCHE expresion:ex RCORCHE IGUAL CADENA:valor {:
		if(debug)
			System.out.println("\t Regla: asignacion ::= IDENTIFICADOR IGUAL expresion");
		RESULT = new NodoAsignacionVector(variable, ex, new NodoCadena(valor));
	:}
;

expresion ::= 
	NUMERO:num {:
		if(debug)
			System.out.println("\t Regla: expresion ::= NUMERO ");
		RESULT = new NodoNumero(num);
	:}
	| IDENTIFICADOR:variable {:
		if(debug)
			System.out.println("\t Regla: valor ::= IDENTIFICADOR ");
		RESULT = new NodoIdentificador(variable);
	:}
	| IDENTIFICADOR:nombre LCORCHE expresion:ex RCORCHE {:
		if(debug)
			System.out.println("\t Regla: valor ::= IDENTIFICADOR ");
		RESULT = new NodoIdentificadorVector(nombre,ex);
	:}
	| expresion:e1 SUMA expresion:e2 {:
		if(debug)
			System.out.println("\t Regla: expresion ::= SUMA ");
		RESULT = new NodoOperacionMat(e1,e2, Tipo.OpMat.SUMA);
	:}
	| expresion:e1 REST expresion:e2 {:
		if(debug)
			System.out.println("\t Regla: expresion ::= REST ");
		RESULT = new NodoOperacionMat(e1,e2, Tipo.OpMat.REST);
	:}
	| expresion:e1 MULT expresion:e2 {:
		if(debug)
			System.out.println("\t Regla: expresion ::= MULT ");
		RESULT = new NodoOperacionMat(e1,e2, Tipo.OpMat.MULT);
	:}
	| expresion:e1 DIVI expresion:e2 {:
		if(debug)
			System.out.println("\t Regla: expresion ::= DIVI ");
		RESULT = new NodoOperacionMat(e1,e2, Tipo.OpMat.DIVI);
	:}
	| expresion:e1 MOD expresion:e2 {:
		if(debug)
			System.out.println("\t Regla: expresion ::= MOD ");
		RESULT = new NodoOperacionMat(e1,e2, Tipo.OpMat.MOD);
	:}
	| expresion:e1 POTE expresion:e2 {:
		if(debug)
			System.out.println("\t Regla: expresion ::= POTE ");
		RESULT = new NodoOperacionMat(e1,e2, Tipo.OpMat.POTE);
	:}
	| REST expresion:ex {:
		if(debug)
			System.out.println("\t Regla: expresion ::= RESTA expresion ");
		RESULT = new NodoOperacionMatUnaria(ex);
	:}
	%prec SIGNO
	| LPARENT expresion:e RPARENT {:
		if(debug)
			System.out.println("\t Regla: expresion ::= PARENTESIS ");
		RESULT = e;
	:}
;

print ::=
	PRINT printAnidado:sentencia {:
		if(debug)
			System.out.println("\t Regla: print ::= PRINT printAnidado");
		RESULT = new NodoEscribir(sentencia);
	:}
	| PRINT	printAnidado:sentencia PTCO {: 
		if(debug)
			System.out.println("\t Regla: printAnidado ::= printAnidado PTCO");
		NodoEscribir nodoEscribir= new NodoEscribir(sentencia,false);
		RESULT = nodoEscribir;
	:}	
;
		
printAnidado ::=
	printAnidado:valores PTCO printValor:valor {:
		if(debug)
			System.out.println("\t Regla: printAnidado ::= printAnidado PTCO printValor");
		NodoBase hijoActual = valores;
		if(hijoActual !=null){
			while(hijoActual.tieneHermano()){
				hijoActual = hijoActual.getHermanoDerecha();
			}
			hijoActual.setHermanoDerecha(valor);
			RESULT = valores;
		}else{
			RESULT = valor;
		}
	:}			
	| printValor:valor {: 
		if(debug)
			System.out.println("\t Regla: printAnidado ::= printValor");
		RESULT = valor;
	:}		
;

printValor ::=
	CADENA:cadena {:
		if(debug)
			System.out.println("\t Regla: printValor ::= CADENA");
		RESULT = new NodoCadena(cadena.toString());				
	:}
	| expresion:ex {:
		if(debug)
			System.out.println("\t Regla: printValor ::= expresion");
		RESULT = ex;
	:}
;

for ::=
	FOR IDENTIFICADOR:variable IGUAL expresion:desde TO expresion:hasta LINEANUEVA seq_sent:cuerpo LINEANUEVA NEXT IDENTIFICADOR:variable2 {:
		if(debug)
			System.out.println("\t Regla: for ::= Todo el FOR");
		RESULT = new NodoFor(variable, desde, hasta, cuerpo, variable2);
	:}
	| FOR IDENTIFICADOR:variable IGUAL expresion:desde TO expresion:hasta STEP expresion:step LINEANUEVA seq_sent:cuerpo LINEANUEVA NEXT IDENTIFICADOR:variable2 {:
		if(debug)
			System.out.println("\t Regla: for ::= Todo el FOR");
		RESULT = new NodoFor(variable, desde, hasta, cuerpo, variable2, step);
	:}
;

expresionBool ::=
	condicion:c {:
		if(debug)
			System.out.println("\t Regla: expresionBool ::= condicion");
		RESULT = c;
	:}
	| expresionBool:c1 AND expresionBool:c2 {:
		if(debug)
			System.out.println("\t Regla: expresionBool ::= expresionBool AND expresionBool ");
		RESULT = new NodoOperacionBoolLogica(c1,c2,Tipo.OpBoolLogica.AND);
	:}
	| expresionBool:c1 OR expresionBool:c2 {:
		if(debug)
			System.out.println("\t Regla: expresionBool ::= expresionBool OR expresionBool ");
		RESULT = new NodoOperacionBoolLogica(c1,c2,Tipo.OpBoolLogica.OR);
	:}
	| NOT expresionBool:ex {:
		if(debug)
			System.out.println("\t Regla: expresionBool ::= NOT expresionBool");
		RESULT = new NodoOperacionBoolUnaria(ex);
	:}
	| LPARENT expresionBool:ex RPARENT {:
		if(debug)
			System.out.println("\t Regla: expresionBool ::= PARENTESIS ");
		RESULT = ex;
	:}
;

condicion ::=
	expresion:e1 IGUAL expresion:e2 {:
		if(debug)
			System.out.println("\t Regla: condicion ::= IGUAL");
		RESULT = new NodoOperacionBool(e1,e2,Tipo.OpBool.IGUAL);
	:}
	| expresion:e1 MENOR expresion:e2 {:
		if(debug)
			System.out.println("\t Regla: condicion ::= MENOR");
		RESULT = new NodoOperacionBool(e1,e2,Tipo.OpBool.MENOR);
	:}
	| expresion:e1 MENORIGUAL expresion:e2 {:
		if(debug)
			System.out.println("\t Regla: condicion ::= MENORIGUAL");
		RESULT = new NodoOperacionBool(e1,e2,Tipo.OpBool.MENORIGUAL);
	:}
	| expresion:e1 MAYOR expresion:e2 {:
		if(debug)
			System.out.println("\t Regla: condicion ::= MAYOR");
		RESULT = new NodoOperacionBool(e1,e2,Tipo.OpBool.MAYOR);
	:}
	| expresion:e1 MAYORIGUAL expresion:e2 {:
		if(debug)
			System.out.println("\t Regla: condicion ::= MAYORIGUAL");
		RESULT = new NodoOperacionBool(e1,e2,Tipo.OpBool.MAYORIGUAL);
	:}
	| expresion:e1 DIFERENTE expresion:e2 {:
		if(debug)
			System.out.println("\t Regla: condicion ::= DIFERENTE");
		RESULT = new NodoOperacionBool(e1,e2,Tipo.OpBool.DIFERENTE);
	:}
;

if ::=
	IF expresionBool:ex THEN LINEANUEVA seq_sent:then LINEANUEVA ENDIF {:
		if(debug)
			System.out.println("\t Regla: if ::= IF SOLO");
		RESULT = new NodoIf(ex, then);
	:}
	| IF expresionBool:ex THEN LINEANUEVA seq_sent:then LINEANUEVA ELSE LINEANUEVA seq_sent:else1 LINEANUEVA ENDIF {:
		if(debug)
			System.out.println("\t Regla: if ::= IF CON ELSE");
		RESULT = new NodoIf(ex, then, else1);
	:}
;

while ::=
	WHILE expresionBool:ex LINEANUEVA seq_sent:cuerpo LINEANUEVA WEND {:
		if(debug)
			System.out.println("\t Regla: if ::= IF SOLO");
		RESULT = new NodoWhile(ex,cuerpo);
	:}
;

do ::=
	DO LINEANUEVA seq_sent:cuerpo LINEANUEVA LOOP UNTIL expresionBool:ex {:
		if(debug)
			System.out.println("\t Regla: if ::= IF SOLO");
		RESULT = new NodoDo(ex,cuerpo);
	:}
;